/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.api;

import voucherify.client.ApiCallback;
import voucherify.client.ApiClient;
import voucherify.client.ApiException;
import voucherify.client.ApiResponse;
import voucherify.client.Configuration;
import voucherify.client.Pair;
import voucherify.client.ProgressRequestBody;
import voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import voucherify.client.model.CreatePublicationCampaign;
import voucherify.client.model.Customer;
import voucherify.client.model.ParameterOrderListPublications;
import voucherify.client.model.ParameterResultListPublications;
import voucherify.client.model.ParameterVoucherTypeListPublications;
import voucherify.client.model.PublicationsCreateRequestBody;
import voucherify.client.model.PublicationsCreateResponseBody;
import voucherify.client.model.PublicationsListResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPublication
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param publicationsCreateRequestBody Specify the publication parameters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object if a valid identifier was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublicationCall(Boolean joinOnce, PublicationsCreateRequestBody publicationsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicationsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/publications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (joinOnce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("join_once", joinOnce));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPublicationValidateBeforeCall(Boolean joinOnce, PublicationsCreateRequestBody publicationsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        return createPublicationCall(joinOnce, publicationsCreateRequestBody, _callback);

    }

    /**
     * Create Publication
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it&#39;s active and hasn&#39;t been published yet.    &lt;!-- theme: warning --&gt; &gt; 🚧 Clearly define the source of the voucher &gt; &gt; You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   &lt;!-- theme: warning --&gt; &gt; 🚧 Publish multiple vouchers &gt; In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.   &lt;!-- theme: info --&gt;  &gt; 📘 Auto-update campaign &gt; &gt; In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param publicationsCreateRequestBody Specify the publication parameters. (optional)
     * @return PublicationsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object if a valid identifier was provided. </td><td>  -  </td></tr>
     </table>
     */
    public PublicationsCreateResponseBody createPublication(Boolean joinOnce, PublicationsCreateRequestBody publicationsCreateRequestBody) throws ApiException {
        ApiResponse<PublicationsCreateResponseBody> localVarResp = createPublicationWithHttpInfo(joinOnce, publicationsCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Publication
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it&#39;s active and hasn&#39;t been published yet.    &lt;!-- theme: warning --&gt; &gt; 🚧 Clearly define the source of the voucher &gt; &gt; You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   &lt;!-- theme: warning --&gt; &gt; 🚧 Publish multiple vouchers &gt; In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.   &lt;!-- theme: info --&gt;  &gt; 📘 Auto-update campaign &gt; &gt; In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param publicationsCreateRequestBody Specify the publication parameters. (optional)
     * @return ApiResponse&lt;PublicationsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object if a valid identifier was provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicationsCreateResponseBody> createPublicationWithHttpInfo(Boolean joinOnce, PublicationsCreateRequestBody publicationsCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createPublicationValidateBeforeCall(joinOnce, publicationsCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<PublicationsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Publication (asynchronously)
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it&#39;s active and hasn&#39;t been published yet.    &lt;!-- theme: warning --&gt; &gt; 🚧 Clearly define the source of the voucher &gt; &gt; You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   &lt;!-- theme: warning --&gt; &gt; 🚧 Publish multiple vouchers &gt; In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.   &lt;!-- theme: info --&gt;  &gt; 📘 Auto-update campaign &gt; &gt; In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param publicationsCreateRequestBody Specify the publication parameters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object if a valid identifier was provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublicationAsync(Boolean joinOnce, PublicationsCreateRequestBody publicationsCreateRequestBody, final ApiCallback<PublicationsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPublicationValidateBeforeCall(joinOnce, publicationsCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PublicationsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPublication1
     * @param customer Contains information about the customer to whom the publication was directed. (required)
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param voucher Code of voucher being published. (optional)
     * @param campaign Create publication with campaign. (optional)
     * @param sourceId The merchant’s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If &#x60;source_id&#x60; is provided only 1 voucher can be published per request. (optional)
     * @param metadata The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublication1Call(Customer customer, Boolean joinOnce, String voucher, CreatePublicationCampaign campaign, String sourceId, Object metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/publications/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (joinOnce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("join_once", joinOnce));
        }

        if (voucher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voucher", voucher));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_id", sourceId));
        }

        if (customer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer", customer));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPublication1ValidateBeforeCall(Customer customer, Boolean joinOnce, String voucher, CreatePublicationCampaign campaign, String sourceId, Object metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling createPublication1(Async)");
        }

        return createPublication1Call(customer, joinOnce, voucher, campaign, sourceId, metadata, _callback);

    }

    /**
     * Create Publication
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it&#39;s active and hasn&#39;t been published yet. &gt; ❗️ Limited access &gt; &gt; Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &amp;rarr; **Project Settings** &amp;rarr; **General** &amp;rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.    &lt;!-- theme: warning --&gt; &gt; 🚧 Clearly define the source of the voucher &gt; &gt; You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   &lt;!-- theme: warning --&gt; &gt; 🚧 Publish multiple vouchers &gt; This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).    &lt;!-- theme: info --&gt;  &gt; 📘 Auto-update campaign &gt; &gt; In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.    ## Example Request  &#x60;&#x60;&#x60;markdown Publication Query  /publications/create?campaign[name]&#x3D;BlackFriday&amp;customer[source_id]&#x3D;Customer_Source_ID  &#x60;&#x60;&#x60;    &lt;!-- theme: danger --&gt; &gt; ❗️ Required   &gt; &gt; Query param &#x60;voucher&#x60; OR &#x60;campaign&#x60; MUST be filled out. If you provide both, &#x60;campaign&#x60; param will be skipped.
     * @param customer Contains information about the customer to whom the publication was directed. (required)
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param voucher Code of voucher being published. (optional)
     * @param campaign Create publication with campaign. (optional)
     * @param sourceId The merchant’s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If &#x60;source_id&#x60; is provided only 1 voucher can be published per request. (optional)
     * @param metadata The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format. (optional)
     * @return PublicationsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object. </td><td>  -  </td></tr>
     </table>
     */
    public PublicationsCreateResponseBody createPublication1(Customer customer, Boolean joinOnce, String voucher, CreatePublicationCampaign campaign, String sourceId, Object metadata) throws ApiException {
        ApiResponse<PublicationsCreateResponseBody> localVarResp = createPublication1WithHttpInfo(customer, joinOnce, voucher, campaign, sourceId, metadata);
        return localVarResp.getData();
    }

    /**
     * Create Publication
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it&#39;s active and hasn&#39;t been published yet. &gt; ❗️ Limited access &gt; &gt; Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &amp;rarr; **Project Settings** &amp;rarr; **General** &amp;rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.    &lt;!-- theme: warning --&gt; &gt; 🚧 Clearly define the source of the voucher &gt; &gt; You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   &lt;!-- theme: warning --&gt; &gt; 🚧 Publish multiple vouchers &gt; This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).    &lt;!-- theme: info --&gt;  &gt; 📘 Auto-update campaign &gt; &gt; In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.    ## Example Request  &#x60;&#x60;&#x60;markdown Publication Query  /publications/create?campaign[name]&#x3D;BlackFriday&amp;customer[source_id]&#x3D;Customer_Source_ID  &#x60;&#x60;&#x60;    &lt;!-- theme: danger --&gt; &gt; ❗️ Required   &gt; &gt; Query param &#x60;voucher&#x60; OR &#x60;campaign&#x60; MUST be filled out. If you provide both, &#x60;campaign&#x60; param will be skipped.
     * @param customer Contains information about the customer to whom the publication was directed. (required)
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param voucher Code of voucher being published. (optional)
     * @param campaign Create publication with campaign. (optional)
     * @param sourceId The merchant’s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If &#x60;source_id&#x60; is provided only 1 voucher can be published per request. (optional)
     * @param metadata The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format. (optional)
     * @return ApiResponse&lt;PublicationsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicationsCreateResponseBody> createPublication1WithHttpInfo(Customer customer, Boolean joinOnce, String voucher, CreatePublicationCampaign campaign, String sourceId, Object metadata) throws ApiException {
        okhttp3.Call localVarCall = createPublication1ValidateBeforeCall(customer, joinOnce, voucher, campaign, sourceId, metadata, null);
        Type localVarReturnType = new TypeToken<PublicationsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Publication (asynchronously)
     * This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it&#39;s active and hasn&#39;t been published yet. &gt; ❗️ Limited access &gt; &gt; Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &amp;rarr; **Project Settings** &amp;rarr; **General** &amp;rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.    &lt;!-- theme: warning --&gt; &gt; 🚧 Clearly define the source of the voucher &gt; &gt; You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   &lt;!-- theme: warning --&gt; &gt; 🚧 Publish multiple vouchers &gt; This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).    &lt;!-- theme: info --&gt;  &gt; 📘 Auto-update campaign &gt; &gt; In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.    ## Example Request  &#x60;&#x60;&#x60;markdown Publication Query  /publications/create?campaign[name]&#x3D;BlackFriday&amp;customer[source_id]&#x3D;Customer_Source_ID  &#x60;&#x60;&#x60;    &lt;!-- theme: danger --&gt; &gt; ❗️ Required   &gt; &gt; Query param &#x60;voucher&#x60; OR &#x60;campaign&#x60; MUST be filled out. If you provide both, &#x60;campaign&#x60; param will be skipped.
     * @param customer Contains information about the customer to whom the publication was directed. (required)
     * @param joinOnce Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer. (optional)
     * @param voucher Code of voucher being published. (optional)
     * @param campaign Create publication with campaign. (optional)
     * @param sourceId The merchant’s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If &#x60;source_id&#x60; is provided only 1 voucher can be published per request. (optional)
     * @param metadata The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a publication object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublication1Async(Customer customer, Boolean joinOnce, String voucher, CreatePublicationCampaign campaign, String sourceId, Object metadata, final ApiCallback<PublicationsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPublication1ValidateBeforeCall(customer, joinOnce, voucher, campaign, sourceId, metadata, _callback);
        Type localVarReturnType = new TypeToken<PublicationsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublications
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param campaign Filters by a given campaign name. (optional)
     * @param customer Filters by a unique customer ID. (optional)
     * @param voucher Filters by a given voucher code. (optional)
     * @param result Filters by a publication result. (optional)
     * @param voucherType Filters by a voucher type. (optional)
     * @param isReferralCode This filter works only for the &#x60;true&#x60; option. If set to &#x60;true&#x60;, the query returns only publications of codes from referral campaigns.  (optional)
     * @param filters Allows for combining the filters mentioned in the endpoint description. (optional)
     * @param sourceId Using this endpoint with a particular publication &#x60;source_id&#x60;, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular &#x60;source_id&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of publications you’ve previously created with &lt;!-- [create publication](OpenAPI.json/paths/~1publications/post) --&gt;[create publication](ref:create-publication) or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicationsCall(Integer limit, Integer page, ParameterOrderListPublications order, String campaign, String customer, String voucher, ParameterResultListPublications result, ParameterVoucherTypeListPublications voucherType, Boolean isReferralCode, String filters, String sourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/publications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (customer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer", customer));
        }

        if (voucher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voucher", voucher));
        }

        if (result != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("result", result));
        }

        if (voucherType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voucher_type", voucherType));
        }

        if (isReferralCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_referral_code", isReferralCode));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_id", sourceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublicationsValidateBeforeCall(Integer limit, Integer page, ParameterOrderListPublications order, String campaign, String customer, String voucher, ParameterResultListPublications result, ParameterVoucherTypeListPublications voucherType, Boolean isReferralCode, String filters, String sourceId, final ApiCallback _callback) throws ApiException {
        return listPublicationsCall(limit, page, order, campaign, customer, voucher, result, voucherType, isReferralCode, filters, sourceId, _callback);

    }

    /**
     * List Publications
     * Retrieve a list of publications. To return a **particular** publication, you can use the &#x60;source_id&#x60; query parameter and provide the &#x60;source_id&#x60; of the publication you are looking for specifically.  ## Pagination  &lt;!-- theme: warning --&gt; &gt; 🚧 Important! &gt; &gt; If you want to scroll through a huge set of records, it is recommended to use the &lt;!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) --&gt;[Exports API](ref:create-export). This API will return an error &#x60;page_over_limit&#x60; if you reach a page above 1000.  ## Filter Query  The &#x60;filters&#x60; query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:  &lt;!-- title: \&quot;Filter template\&quot; --&gt; &#x60;&#x60;&#x60;url filters[&lt;field_name&gt;][conditions][&lt;operator&gt;][&lt;index&gt;]&#x3D;&lt;value&gt; &#x60;&#x60;&#x60;  ### Operators:  &lt;!-- title: \&quot;Operators\&quot; --&gt; &#x60;&#x60;&#x60;     \&quot;$in\&quot;     \&quot;$not_in\&quot;     \&quot;$is\&quot;     \&quot;$is_not\&quot;     \&quot;$has_value\&quot;     \&quot;$is_unknown\&quot;     \&quot;$contains\&quot;     \&quot;$starts_with\&quot;     \&quot;$ends_with\&quot;     \&quot;$more_than\&quot;     \&quot;$less_than\&quot;     \&quot;$more_than_equal\&quot;     \&quot;$less_than_equal\&quot; &#x60;&#x60;&#x60;  ### Examples  &lt;!-- title: \&quot;Example 1 - List publications of a given customer\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$is][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL &#x60;&#x60;&#x60; &lt;!-- title: \&quot;Example 2 - List publications of 2 customers\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$in][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL&amp;filters[customer_id][conditions][$in][1]&#x3D;cust_aR7NfHusxT7PdTMAKMfWDXnc &#x60;&#x60;&#x60; &lt;!-- title: \&quot;Example 3 - List publications of 2 customers using junction operator\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$is][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL&amp;filters[customer_id][conditions][$is][1]&#x3D;cust_aR7NfHusxT7PdTMAKMfWDXnc&amp;filters[junction]&#x3D;OR &#x60;&#x60;&#x60;
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param campaign Filters by a given campaign name. (optional)
     * @param customer Filters by a unique customer ID. (optional)
     * @param voucher Filters by a given voucher code. (optional)
     * @param result Filters by a publication result. (optional)
     * @param voucherType Filters by a voucher type. (optional)
     * @param isReferralCode This filter works only for the &#x60;true&#x60; option. If set to &#x60;true&#x60;, the query returns only publications of codes from referral campaigns.  (optional)
     * @param filters Allows for combining the filters mentioned in the endpoint description. (optional)
     * @param sourceId Using this endpoint with a particular publication &#x60;source_id&#x60;, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular &#x60;source_id&#x60;. (optional)
     * @return PublicationsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of publications you’ve previously created with &lt;!-- [create publication](OpenAPI.json/paths/~1publications/post) --&gt;[create publication](ref:create-publication) or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first. </td><td>  -  </td></tr>
     </table>
     */
    public PublicationsListResponseBody listPublications(Integer limit, Integer page, ParameterOrderListPublications order, String campaign, String customer, String voucher, ParameterResultListPublications result, ParameterVoucherTypeListPublications voucherType, Boolean isReferralCode, String filters, String sourceId) throws ApiException {
        ApiResponse<PublicationsListResponseBody> localVarResp = listPublicationsWithHttpInfo(limit, page, order, campaign, customer, voucher, result, voucherType, isReferralCode, filters, sourceId);
        return localVarResp.getData();
    }

    /**
     * List Publications
     * Retrieve a list of publications. To return a **particular** publication, you can use the &#x60;source_id&#x60; query parameter and provide the &#x60;source_id&#x60; of the publication you are looking for specifically.  ## Pagination  &lt;!-- theme: warning --&gt; &gt; 🚧 Important! &gt; &gt; If you want to scroll through a huge set of records, it is recommended to use the &lt;!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) --&gt;[Exports API](ref:create-export). This API will return an error &#x60;page_over_limit&#x60; if you reach a page above 1000.  ## Filter Query  The &#x60;filters&#x60; query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:  &lt;!-- title: \&quot;Filter template\&quot; --&gt; &#x60;&#x60;&#x60;url filters[&lt;field_name&gt;][conditions][&lt;operator&gt;][&lt;index&gt;]&#x3D;&lt;value&gt; &#x60;&#x60;&#x60;  ### Operators:  &lt;!-- title: \&quot;Operators\&quot; --&gt; &#x60;&#x60;&#x60;     \&quot;$in\&quot;     \&quot;$not_in\&quot;     \&quot;$is\&quot;     \&quot;$is_not\&quot;     \&quot;$has_value\&quot;     \&quot;$is_unknown\&quot;     \&quot;$contains\&quot;     \&quot;$starts_with\&quot;     \&quot;$ends_with\&quot;     \&quot;$more_than\&quot;     \&quot;$less_than\&quot;     \&quot;$more_than_equal\&quot;     \&quot;$less_than_equal\&quot; &#x60;&#x60;&#x60;  ### Examples  &lt;!-- title: \&quot;Example 1 - List publications of a given customer\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$is][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL &#x60;&#x60;&#x60; &lt;!-- title: \&quot;Example 2 - List publications of 2 customers\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$in][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL&amp;filters[customer_id][conditions][$in][1]&#x3D;cust_aR7NfHusxT7PdTMAKMfWDXnc &#x60;&#x60;&#x60; &lt;!-- title: \&quot;Example 3 - List publications of 2 customers using junction operator\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$is][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL&amp;filters[customer_id][conditions][$is][1]&#x3D;cust_aR7NfHusxT7PdTMAKMfWDXnc&amp;filters[junction]&#x3D;OR &#x60;&#x60;&#x60;
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param campaign Filters by a given campaign name. (optional)
     * @param customer Filters by a unique customer ID. (optional)
     * @param voucher Filters by a given voucher code. (optional)
     * @param result Filters by a publication result. (optional)
     * @param voucherType Filters by a voucher type. (optional)
     * @param isReferralCode This filter works only for the &#x60;true&#x60; option. If set to &#x60;true&#x60;, the query returns only publications of codes from referral campaigns.  (optional)
     * @param filters Allows for combining the filters mentioned in the endpoint description. (optional)
     * @param sourceId Using this endpoint with a particular publication &#x60;source_id&#x60;, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular &#x60;source_id&#x60;. (optional)
     * @return ApiResponse&lt;PublicationsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of publications you’ve previously created with &lt;!-- [create publication](OpenAPI.json/paths/~1publications/post) --&gt;[create publication](ref:create-publication) or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicationsListResponseBody> listPublicationsWithHttpInfo(Integer limit, Integer page, ParameterOrderListPublications order, String campaign, String customer, String voucher, ParameterResultListPublications result, ParameterVoucherTypeListPublications voucherType, Boolean isReferralCode, String filters, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = listPublicationsValidateBeforeCall(limit, page, order, campaign, customer, voucher, result, voucherType, isReferralCode, filters, sourceId, null);
        Type localVarReturnType = new TypeToken<PublicationsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Publications (asynchronously)
     * Retrieve a list of publications. To return a **particular** publication, you can use the &#x60;source_id&#x60; query parameter and provide the &#x60;source_id&#x60; of the publication you are looking for specifically.  ## Pagination  &lt;!-- theme: warning --&gt; &gt; 🚧 Important! &gt; &gt; If you want to scroll through a huge set of records, it is recommended to use the &lt;!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) --&gt;[Exports API](ref:create-export). This API will return an error &#x60;page_over_limit&#x60; if you reach a page above 1000.  ## Filter Query  The &#x60;filters&#x60; query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:  &lt;!-- title: \&quot;Filter template\&quot; --&gt; &#x60;&#x60;&#x60;url filters[&lt;field_name&gt;][conditions][&lt;operator&gt;][&lt;index&gt;]&#x3D;&lt;value&gt; &#x60;&#x60;&#x60;  ### Operators:  &lt;!-- title: \&quot;Operators\&quot; --&gt; &#x60;&#x60;&#x60;     \&quot;$in\&quot;     \&quot;$not_in\&quot;     \&quot;$is\&quot;     \&quot;$is_not\&quot;     \&quot;$has_value\&quot;     \&quot;$is_unknown\&quot;     \&quot;$contains\&quot;     \&quot;$starts_with\&quot;     \&quot;$ends_with\&quot;     \&quot;$more_than\&quot;     \&quot;$less_than\&quot;     \&quot;$more_than_equal\&quot;     \&quot;$less_than_equal\&quot; &#x60;&#x60;&#x60;  ### Examples  &lt;!-- title: \&quot;Example 1 - List publications of a given customer\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$is][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL &#x60;&#x60;&#x60; &lt;!-- title: \&quot;Example 2 - List publications of 2 customers\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$in][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL&amp;filters[customer_id][conditions][$in][1]&#x3D;cust_aR7NfHusxT7PdTMAKMfWDXnc &#x60;&#x60;&#x60; &lt;!-- title: \&quot;Example 3 - List publications of 2 customers using junction operator\&quot; --&gt; &#x60;&#x60;&#x60;url GET /v1/publications?filters[customer_id][conditions][$is][0]&#x3D;cust_lUET6gRpO5Wxlg5p2j2gRCgL&amp;filters[customer_id][conditions][$is][1]&#x3D;cust_aR7NfHusxT7PdTMAKMfWDXnc&amp;filters[junction]&#x3D;OR &#x60;&#x60;&#x60;
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param campaign Filters by a given campaign name. (optional)
     * @param customer Filters by a unique customer ID. (optional)
     * @param voucher Filters by a given voucher code. (optional)
     * @param result Filters by a publication result. (optional)
     * @param voucherType Filters by a voucher type. (optional)
     * @param isReferralCode This filter works only for the &#x60;true&#x60; option. If set to &#x60;true&#x60;, the query returns only publications of codes from referral campaigns.  (optional)
     * @param filters Allows for combining the filters mentioned in the endpoint description. (optional)
     * @param sourceId Using this endpoint with a particular publication &#x60;source_id&#x60;, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular &#x60;source_id&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of publications you’ve previously created with &lt;!-- [create publication](OpenAPI.json/paths/~1publications/post) --&gt;[create publication](ref:create-publication) or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicationsAsync(Integer limit, Integer page, ParameterOrderListPublications order, String campaign, String customer, String voucher, ParameterResultListPublications result, ParameterVoucherTypeListPublications voucherType, Boolean isReferralCode, String filters, String sourceId, final ApiCallback<PublicationsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublicationsValidateBeforeCall(limit, page, order, campaign, customer, voucher, result, voucherType, isReferralCode, filters, sourceId, _callback);
        Type localVarReturnType = new TypeToken<PublicationsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
