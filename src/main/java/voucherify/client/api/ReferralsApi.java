/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.api;

import voucherify.client.ApiCallback;
import voucherify.client.ApiClient;
import voucherify.client.ApiException;
import voucherify.client.ApiResponse;
import voucherify.client.Configuration;
import voucherify.client.Pair;
import voucherify.client.ProgressRequestBody;
import voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import voucherify.client.model.ParameterFiltersListReferralsRedeemableHolders;
import voucherify.client.model.ParameterOrderListRedeemables;
import voucherify.client.model.ReferralsRedeemableHoldersListResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferralsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReferralsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferralsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for referralsCodeHolders
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referralsCodeHoldersCall(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/{campaignId}/members/{memberId}/holders"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsCodeHoldersValidateBeforeCall(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling referralsCodeHolders(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsCodeHolders(Async)");
        }

        return referralsCodeHoldersCall(campaignId, memberId, limit, order, startingAfterId, filters, _callback);

    }

    /**
     * List Referral Code Holders [Beta]
     * Retrieves the holders of the referral code from a referral campaign. &gt;ðŸš§ User Permissions &gt; &gt;The users of this endpoint must have the Read Customers (&#x60;customers.details.read&#x60;) permission granted.
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ReferralsRedeemableHoldersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public ReferralsRedeemableHoldersListResponseBody referralsCodeHolders(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        ApiResponse<ReferralsRedeemableHoldersListResponseBody> localVarResp = referralsCodeHoldersWithHttpInfo(campaignId, memberId, limit, order, startingAfterId, filters);
        return localVarResp.getData();
    }

    /**
     * List Referral Code Holders [Beta]
     * Retrieves the holders of the referral code from a referral campaign. &gt;ðŸš§ User Permissions &gt; &gt;The users of this endpoint must have the Read Customers (&#x60;customers.details.read&#x60;) permission granted.
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ApiResponse&lt;ReferralsRedeemableHoldersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReferralsRedeemableHoldersListResponseBody> referralsCodeHoldersWithHttpInfo(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        okhttp3.Call localVarCall = referralsCodeHoldersValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, filters, null);
        Type localVarReturnType = new TypeToken<ReferralsRedeemableHoldersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Referral Code Holders [Beta] (asynchronously)
     * Retrieves the holders of the referral code from a referral campaign. &gt;ðŸš§ User Permissions &gt; &gt;The users of this endpoint must have the Read Customers (&#x60;customers.details.read&#x60;) permission granted.
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash &#x60;-&#x60; preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referralsCodeHoldersAsync(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback<ReferralsRedeemableHoldersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsCodeHoldersValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, filters, _callback);
        Type localVarReturnType = new TypeToken<ReferralsRedeemableHoldersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referralsCodeHolders1
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referralsCodeHolders1Call(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/members/{memberId}/holders"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsCodeHolders1ValidateBeforeCall(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsCodeHolders1(Async)");
        }

        return referralsCodeHolders1Call(memberId, limit, order, startingAfterId, filters, _callback);

    }

    /**
     * List Referral Code Holders [Beta]
     * Retrieves the holders of the referral code from a referral campaign. &gt;ðŸš§ User Permissions &gt; &gt;The users of this endpoint must have the Read Customers (&#x60;customers.details.read&#x60;) permission granted.  &gt; ðŸ“˜ Alternative endpoint &gt; &gt;This endpoint is an alternative to this [List Member Holders endpoint](ref:referrals-member-holders). The URL was re-designed to retrieve the referral member holders without providing the &#x60;campaignId&#x60; as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ReferralsRedeemableHoldersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public ReferralsRedeemableHoldersListResponseBody referralsCodeHolders1(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        ApiResponse<ReferralsRedeemableHoldersListResponseBody> localVarResp = referralsCodeHolders1WithHttpInfo(memberId, limit, order, startingAfterId, filters);
        return localVarResp.getData();
    }

    /**
     * List Referral Code Holders [Beta]
     * Retrieves the holders of the referral code from a referral campaign. &gt;ðŸš§ User Permissions &gt; &gt;The users of this endpoint must have the Read Customers (&#x60;customers.details.read&#x60;) permission granted.  &gt; ðŸ“˜ Alternative endpoint &gt; &gt;This endpoint is an alternative to this [List Member Holders endpoint](ref:referrals-member-holders). The URL was re-designed to retrieve the referral member holders without providing the &#x60;campaignId&#x60; as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ApiResponse&lt;ReferralsRedeemableHoldersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReferralsRedeemableHoldersListResponseBody> referralsCodeHolders1WithHttpInfo(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        okhttp3.Call localVarCall = referralsCodeHolders1ValidateBeforeCall(memberId, limit, order, startingAfterId, filters, null);
        Type localVarReturnType = new TypeToken<ReferralsRedeemableHoldersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Referral Code Holders [Beta] (asynchronously)
     * Retrieves the holders of the referral code from a referral campaign. &gt;ðŸš§ User Permissions &gt; &gt;The users of this endpoint must have the Read Customers (&#x60;customers.details.read&#x60;) permission granted.  &gt; ðŸ“˜ Alternative endpoint &gt; &gt;This endpoint is an alternative to this [List Member Holders endpoint](ref:referrals-member-holders). The URL was re-designed to retrieve the referral member holders without providing the &#x60;campaignId&#x60; as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the holders of the redeemable that is assigned to the referral campaign. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referralsCodeHolders1Async(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback<ReferralsRedeemableHoldersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsCodeHolders1ValidateBeforeCall(memberId, limit, order, startingAfterId, filters, _callback);
        Type localVarReturnType = new TypeToken<ReferralsRedeemableHoldersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
