/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.api;

import voucherify.client.ApiCallback;
import voucherify.client.ApiClient;
import voucherify.client.ApiException;
import voucherify.client.ApiResponse;
import voucherify.client.Configuration;
import voucherify.client.Pair;
import voucherify.client.ProgressRequestBody;
import voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import voucherify.client.model.ManagementProjectListResponseBody;
import voucherify.client.model.ManagementProjectsBranding;
import voucherify.client.model.ManagementProjectsBrandingCreateRequestBody;
import voucherify.client.model.ManagementProjectsBrandingListResponseBody;
import voucherify.client.model.ManagementProjectsBrandingResponseBody;
import voucherify.client.model.ManagementProjectsCreateRequestBody;
import voucherify.client.model.ManagementProjectsCreateResponseBody;
import voucherify.client.model.ManagementProjectsCustomEventSchemaBase;
import voucherify.client.model.ManagementProjectsCustomEventSchemaCreateRequestBody;
import voucherify.client.model.ManagementProjectsCustomEventSchemaListResponseBody;
import voucherify.client.model.ManagementProjectsCustomEventSchemaResponseBody;
import voucherify.client.model.ManagementProjectsCustomEventSchemaResponseBodyBase;
import voucherify.client.model.ManagementProjectsMetadataSchemaCreateRequestBody;
import voucherify.client.model.ManagementProjectsMetadataSchemaListResponseBody;
import voucherify.client.model.ManagementProjectsMetadataSchemaResponseBody;
import voucherify.client.model.ManagementProjectsMetadataSchemaUpdateRequestBody;
import voucherify.client.model.ManagementProjectsResponseBody;
import voucherify.client.model.ManagementProjectsStackingRulesBase;
import voucherify.client.model.ManagementProjectsStackingRulesCreateRequestBody;
import voucherify.client.model.ManagementProjectsStackingRulesCreateResponseBody;
import voucherify.client.model.ManagementProjectsStackingRulesListResponseBody;
import voucherify.client.model.ManagementProjectsStackingRulesResponseBody;
import voucherify.client.model.ManagementProjectsStackingRulesUpdatedResponseBody;
import voucherify.client.model.ManagementProjectsUpdateRequestBody;
import voucherify.client.model.ManagementProjectsUserCreateRequestBody;
import voucherify.client.model.ManagementProjectsUserListResponseBody;
import voucherify.client.model.ManagementProjectsUserResponseBody;
import voucherify.client.model.ManagementProjectsUserUpdateRequestBody;
import voucherify.client.model.ManagementProjectsWebhooks;
import voucherify.client.model.ManagementProjectsWebhooksCreateRequestBody;
import voucherify.client.model.ManagementProjectsWebhooksListResponseBody;
import voucherify.client.model.ManagementProjectsWebhooksResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignUser
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUserCreateRequestBody Defines the user details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignUserCall(String projectId, ManagementProjectsUserCreateRequestBody managementProjectsUserCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsUserCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/users"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignUserValidateBeforeCall(String projectId, ManagementProjectsUserCreateRequestBody managementProjectsUserCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling assignUser(Async)");
        }

        return assignUserCall(projectId, managementProjectsUserCreateRequestBody, _callback);

    }

    /**
     * Assign User
     * Assigns a user to a given project. The user must be an existing user in Voucherify.  &gt; 🚧 Correct Use of Data &gt; &gt;To avoid errors, use the &#x60;\&quot;role\&quot;&#x60; key with either &#x60;\&quot;id\&quot;&#x60; or &#x60;\&quot;login\&quot;&#x60; keys.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUserCreateRequestBody Defines the user details. (optional)
     * @return ManagementProjectsUserResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsUserResponseBody assignUser(String projectId, ManagementProjectsUserCreateRequestBody managementProjectsUserCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsUserResponseBody> localVarResp = assignUserWithHttpInfo(projectId, managementProjectsUserCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Assign User
     * Assigns a user to a given project. The user must be an existing user in Voucherify.  &gt; 🚧 Correct Use of Data &gt; &gt;To avoid errors, use the &#x60;\&quot;role\&quot;&#x60; key with either &#x60;\&quot;id\&quot;&#x60; or &#x60;\&quot;login\&quot;&#x60; keys.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUserCreateRequestBody Defines the user details. (optional)
     * @return ApiResponse&lt;ManagementProjectsUserResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsUserResponseBody> assignUserWithHttpInfo(String projectId, ManagementProjectsUserCreateRequestBody managementProjectsUserCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = assignUserValidateBeforeCall(projectId, managementProjectsUserCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign User (asynchronously)
     * Assigns a user to a given project. The user must be an existing user in Voucherify.  &gt; 🚧 Correct Use of Data &gt; &gt;To avoid errors, use the &#x60;\&quot;role\&quot;&#x60; key with either &#x60;\&quot;id\&quot;&#x60; or &#x60;\&quot;login\&quot;&#x60; keys.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUserCreateRequestBody Defines the user details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignUserAsync(String projectId, ManagementProjectsUserCreateRequestBody managementProjectsUserCreateRequestBody, final ApiCallback<ManagementProjectsUserResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignUserValidateBeforeCall(projectId, managementProjectsUserCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBrand
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsBrandingCreateRequestBody Defines a brand configuration. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandCall(String projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsBrandingCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/branding"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrandValidateBeforeCall(String projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createBrand(Async)");
        }

        return createBrandCall(projectId, managementProjectsBrandingCreateRequestBody, _callback);

    }

    /**
     * Create Brand
     * Creates a new brand configuration.  You can have only one brand configured for a project.  &gt; 📘 White Labelling &gt; &gt; The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsBrandingCreateRequestBody Defines a brand configuration. (optional)
     * @return ManagementProjectsBrandingResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsBrandingResponseBody createBrand(String projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsBrandingResponseBody> localVarResp = createBrandWithHttpInfo(projectId, managementProjectsBrandingCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Brand
     * Creates a new brand configuration.  You can have only one brand configured for a project.  &gt; 📘 White Labelling &gt; &gt; The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsBrandingCreateRequestBody Defines a brand configuration. (optional)
     * @return ApiResponse&lt;ManagementProjectsBrandingResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsBrandingResponseBody> createBrandWithHttpInfo(String projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createBrandValidateBeforeCall(projectId, managementProjectsBrandingCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Brand (asynchronously)
     * Creates a new brand configuration.  You can have only one brand configured for a project.  &gt; 📘 White Labelling &gt; &gt; The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsBrandingCreateRequestBody Defines a brand configuration. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandAsync(String projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody, final ApiCallback<ManagementProjectsBrandingResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrandValidateBeforeCall(projectId, managementProjectsBrandingCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomEventSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsCustomEventSchemaCreateRequestBody Defines the custom event schema. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomEventSchemaCall(String projectId, ManagementProjectsCustomEventSchemaCreateRequestBody managementProjectsCustomEventSchemaCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsCustomEventSchemaCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/custom-event-schemas"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomEventSchemaValidateBeforeCall(String projectId, ManagementProjectsCustomEventSchemaCreateRequestBody managementProjectsCustomEventSchemaCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createCustomEventSchema(Async)");
        }

        return createCustomEventSchemaCall(projectId, managementProjectsCustomEventSchemaCreateRequestBody, _callback);

    }

    /**
     * Create Custom Event Schema
     * Creates a custom event schema.  The &#x60;\&quot;properties\&quot;&#x60; object is required, but it can be empty, however. This object is for optional custom properties (metadata).  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsCustomEventSchemaCreateRequestBody Defines the custom event schema. (optional)
     * @return ManagementProjectsCustomEventSchemaResponseBodyBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsCustomEventSchemaResponseBodyBase createCustomEventSchema(String projectId, ManagementProjectsCustomEventSchemaCreateRequestBody managementProjectsCustomEventSchemaCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsCustomEventSchemaResponseBodyBase> localVarResp = createCustomEventSchemaWithHttpInfo(projectId, managementProjectsCustomEventSchemaCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Custom Event Schema
     * Creates a custom event schema.  The &#x60;\&quot;properties\&quot;&#x60; object is required, but it can be empty, however. This object is for optional custom properties (metadata).  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsCustomEventSchemaCreateRequestBody Defines the custom event schema. (optional)
     * @return ApiResponse&lt;ManagementProjectsCustomEventSchemaResponseBodyBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsCustomEventSchemaResponseBodyBase> createCustomEventSchemaWithHttpInfo(String projectId, ManagementProjectsCustomEventSchemaCreateRequestBody managementProjectsCustomEventSchemaCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createCustomEventSchemaValidateBeforeCall(projectId, managementProjectsCustomEventSchemaCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaResponseBodyBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Custom Event Schema (asynchronously)
     * Creates a custom event schema.  The &#x60;\&quot;properties\&quot;&#x60; object is required, but it can be empty, however. This object is for optional custom properties (metadata).  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsCustomEventSchemaCreateRequestBody Defines the custom event schema. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomEventSchemaAsync(String projectId, ManagementProjectsCustomEventSchemaCreateRequestBody managementProjectsCustomEventSchemaCreateRequestBody, final ApiCallback<ManagementProjectsCustomEventSchemaResponseBodyBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomEventSchemaValidateBeforeCall(projectId, managementProjectsCustomEventSchemaCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaResponseBodyBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMetadataSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsMetadataSchemaCreateRequestBody Defines the metadata schema. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetadataSchemaCall(String projectId, ManagementProjectsMetadataSchemaCreateRequestBody managementProjectsMetadataSchemaCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsMetadataSchemaCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/metadata-schemas"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetadataSchemaValidateBeforeCall(String projectId, ManagementProjectsMetadataSchemaCreateRequestBody managementProjectsMetadataSchemaCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createMetadataSchema(Async)");
        }

        return createMetadataSchemaCall(projectId, managementProjectsMetadataSchemaCreateRequestBody, _callback);

    }

    /**
     * Create Metadata Schema
     * Creates a new metadata (custom attribute) schema.  The schema consists of a set of key-value pairs to customize Voucherify resources.   You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsMetadataSchemaCreateRequestBody Defines the metadata schema. (optional)
     * @return ManagementProjectsMetadataSchemaResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsMetadataSchemaResponseBody createMetadataSchema(String projectId, ManagementProjectsMetadataSchemaCreateRequestBody managementProjectsMetadataSchemaCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsMetadataSchemaResponseBody> localVarResp = createMetadataSchemaWithHttpInfo(projectId, managementProjectsMetadataSchemaCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Metadata Schema
     * Creates a new metadata (custom attribute) schema.  The schema consists of a set of key-value pairs to customize Voucherify resources.   You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsMetadataSchemaCreateRequestBody Defines the metadata schema. (optional)
     * @return ApiResponse&lt;ManagementProjectsMetadataSchemaResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsMetadataSchemaResponseBody> createMetadataSchemaWithHttpInfo(String projectId, ManagementProjectsMetadataSchemaCreateRequestBody managementProjectsMetadataSchemaCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createMetadataSchemaValidateBeforeCall(projectId, managementProjectsMetadataSchemaCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Metadata Schema (asynchronously)
     * Creates a new metadata (custom attribute) schema.  The schema consists of a set of key-value pairs to customize Voucherify resources.   You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsMetadataSchemaCreateRequestBody Defines the metadata schema. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetadataSchemaAsync(String projectId, ManagementProjectsMetadataSchemaCreateRequestBody managementProjectsMetadataSchemaCreateRequestBody, final ApiCallback<ManagementProjectsMetadataSchemaResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetadataSchemaValidateBeforeCall(projectId, managementProjectsMetadataSchemaCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProject
     * @param managementProjectsCreateRequestBody Define project details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a created project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        return createProjectCall(managementProjectsCreateRequestBody, _callback);

    }

    /**
     * Create Project
     * Creates a new project. You can add users, specify the cluster, timezone, currency, and other details.  All owners are added to the project by default.
     * @param managementProjectsCreateRequestBody Define project details. (optional)
     * @return ManagementProjectsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a created project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsCreateResponseBody createProject(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsCreateResponseBody> localVarResp = createProjectWithHttpInfo(managementProjectsCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Project
     * Creates a new project. You can add users, specify the cluster, timezone, currency, and other details.  All owners are added to the project by default.
     * @param managementProjectsCreateRequestBody Define project details. (optional)
     * @return ApiResponse&lt;ManagementProjectsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a created project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsCreateResponseBody> createProjectWithHttpInfo(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(managementProjectsCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Project (asynchronously)
     * Creates a new project. You can add users, specify the cluster, timezone, currency, and other details.  All owners are added to the project by default.
     * @param managementProjectsCreateRequestBody Define project details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a created project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody, final ApiCallback<ManagementProjectsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(managementProjectsCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStackingRules
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsStackingRulesCreateRequestBody Defines the stacking rule parameters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStackingRulesCall(String projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsStackingRulesCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/stacking-rules"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStackingRulesValidateBeforeCall(String projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createStackingRules(Async)");
        }

        return createStackingRulesCall(projectId, managementProjectsStackingRulesCreateRequestBody, _callback);

    }

    /**
     * Create Stacking Rules
     * Overwrites the default stacking rules.  If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use [Update Stacking Rules](ref:update-stacking-rules) endpoint to change the rules.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsStackingRulesCreateRequestBody Defines the stacking rule parameters. (optional)
     * @return ManagementProjectsStackingRulesCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsStackingRulesCreateResponseBody createStackingRules(String projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsStackingRulesCreateResponseBody> localVarResp = createStackingRulesWithHttpInfo(projectId, managementProjectsStackingRulesCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Stacking Rules
     * Overwrites the default stacking rules.  If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use [Update Stacking Rules](ref:update-stacking-rules) endpoint to change the rules.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsStackingRulesCreateRequestBody Defines the stacking rule parameters. (optional)
     * @return ApiResponse&lt;ManagementProjectsStackingRulesCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsStackingRulesCreateResponseBody> createStackingRulesWithHttpInfo(String projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createStackingRulesValidateBeforeCall(projectId, managementProjectsStackingRulesCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Stacking Rules (asynchronously)
     * Overwrites the default stacking rules.  If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use [Update Stacking Rules](ref:update-stacking-rules) endpoint to change the rules.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsStackingRulesCreateRequestBody Defines the stacking rule parameters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStackingRulesAsync(String projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody, final ApiCallback<ManagementProjectsStackingRulesCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStackingRulesValidateBeforeCall(projectId, managementProjectsStackingRulesCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebhook
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsWebhooksCreateRequestBody Defines a webhook configuration. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookCall(String projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsWebhooksCreateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/webhooks"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(String projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createWebhook(Async)");
        }

        return createWebhookCall(projectId, managementProjectsWebhooksCreateRequestBody, _callback);

    }

    /**
     * Create Webhook
     * Creates a new webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-01](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsWebhooksCreateRequestBody Defines a webhook configuration. (optional)
     * @return ManagementProjectsWebhooksResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsWebhooksResponseBody createWebhook(String projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsWebhooksResponseBody> localVarResp = createWebhookWithHttpInfo(projectId, managementProjectsWebhooksCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Webhook
     * Creates a new webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-01](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsWebhooksCreateRequestBody Defines a webhook configuration. (optional)
     * @return ApiResponse&lt;ManagementProjectsWebhooksResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsWebhooksResponseBody> createWebhookWithHttpInfo(String projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(projectId, managementProjectsWebhooksCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Webhook (asynchronously)
     * Creates a new webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-01](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsWebhooksCreateRequestBody Defines a webhook configuration. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookAsync(String projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody, final ApiCallback<ManagementProjectsWebhooksResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(projectId, managementProjectsWebhooksCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBrand
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the brand configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrandCall(String projectId, String brandingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/branding/{brandingId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "brandingId" + "}", localVarApiClient.escapeString(brandingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrandValidateBeforeCall(String projectId, String brandingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteBrand(Async)");
        }

        // verify the required parameter 'brandingId' is set
        if (brandingId == null) {
            throw new ApiException("Missing the required parameter 'brandingId' when calling deleteBrand(Async)");
        }

        return deleteBrandCall(projectId, brandingId, _callback);

    }

    /**
     * Delete Brand
     * Deletes permanently a brand configuration.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the brand configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBrand(String projectId, String brandingId) throws ApiException {
        deleteBrandWithHttpInfo(projectId, brandingId);
    }

    /**
     * Delete Brand
     * Deletes permanently a brand configuration.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the brand configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBrandWithHttpInfo(String projectId, String brandingId) throws ApiException {
        okhttp3.Call localVarCall = deleteBrandValidateBeforeCall(projectId, brandingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Brand (asynchronously)
     * Deletes permanently a brand configuration.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the brand configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrandAsync(String projectId, String brandingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrandValidateBeforeCall(projectId, brandingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomEventSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the custom event schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomEventSchemaCall(String projectId, String customEventSchemaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "customEventSchemaId" + "}", localVarApiClient.escapeString(customEventSchemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomEventSchemaValidateBeforeCall(String projectId, String customEventSchemaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteCustomEventSchema(Async)");
        }

        // verify the required parameter 'customEventSchemaId' is set
        if (customEventSchemaId == null) {
            throw new ApiException("Missing the required parameter 'customEventSchemaId' when calling deleteCustomEventSchema(Async)");
        }

        return deleteCustomEventSchemaCall(projectId, customEventSchemaId, _callback);

    }

    /**
     * Delete Custom Event Schema
     * Deletes permanently the custom event schema with its custom properties (metadata).  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the custom event schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomEventSchema(String projectId, String customEventSchemaId) throws ApiException {
        deleteCustomEventSchemaWithHttpInfo(projectId, customEventSchemaId);
    }

    /**
     * Delete Custom Event Schema
     * Deletes permanently the custom event schema with its custom properties (metadata).  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the custom event schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomEventSchemaWithHttpInfo(String projectId, String customEventSchemaId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomEventSchemaValidateBeforeCall(projectId, customEventSchemaId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Custom Event Schema (asynchronously)
     * Deletes permanently the custom event schema with its custom properties (metadata).  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the custom event schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomEventSchemaAsync(String projectId, String customEventSchemaId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomEventSchemaValidateBeforeCall(projectId, customEventSchemaId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMetadataSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the metadata schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetadataSchemaCall(String projectId, String metadataSchemaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "metadataSchemaId" + "}", localVarApiClient.escapeString(metadataSchemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetadataSchemaValidateBeforeCall(String projectId, String metadataSchemaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteMetadataSchema(Async)");
        }

        // verify the required parameter 'metadataSchemaId' is set
        if (metadataSchemaId == null) {
            throw new ApiException("Missing the required parameter 'metadataSchemaId' when calling deleteMetadataSchema(Async)");
        }

        return deleteMetadataSchemaCall(projectId, metadataSchemaId, _callback);

    }

    /**
     * Delete Metadata Schema
     * Deletes permanently the metadata schema.  In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  If you want to delete only one definition, use the [Update Metadata Schema](ref:update-metadata-schema) endpoint. In the request, provide the &#x60;\&quot;deleted\&quot;: true&#x60; pair in the definition object. This definition will be moved to Removed definitions.  If you want to create a new standard metadata schema, use the [Create Metadata Schema](ref:create-metadata-schema) endpoint.  &gt; 🚧 Metadata Purging &gt; &gt;This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. &gt; &gt;If you want to purge metadata from the entities: &gt;1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the [Update Metadata Schema](ref:update-metadata-schema) endpoint. &gt;2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. &gt;3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. &gt;Note: &gt;- This is an asynchronous action. You will be notified when it has been completed. &gt;- You cannot purge metadata for the Redemption and Publication schemas. &gt;4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the metadata schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMetadataSchema(String projectId, String metadataSchemaId) throws ApiException {
        deleteMetadataSchemaWithHttpInfo(projectId, metadataSchemaId);
    }

    /**
     * Delete Metadata Schema
     * Deletes permanently the metadata schema.  In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  If you want to delete only one definition, use the [Update Metadata Schema](ref:update-metadata-schema) endpoint. In the request, provide the &#x60;\&quot;deleted\&quot;: true&#x60; pair in the definition object. This definition will be moved to Removed definitions.  If you want to create a new standard metadata schema, use the [Create Metadata Schema](ref:create-metadata-schema) endpoint.  &gt; 🚧 Metadata Purging &gt; &gt;This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. &gt; &gt;If you want to purge metadata from the entities: &gt;1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the [Update Metadata Schema](ref:update-metadata-schema) endpoint. &gt;2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. &gt;3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. &gt;Note: &gt;- This is an asynchronous action. You will be notified when it has been completed. &gt;- You cannot purge metadata for the Redemption and Publication schemas. &gt;4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the metadata schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMetadataSchemaWithHttpInfo(String projectId, String metadataSchemaId) throws ApiException {
        okhttp3.Call localVarCall = deleteMetadataSchemaValidateBeforeCall(projectId, metadataSchemaId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Metadata Schema (asynchronously)
     * Deletes permanently the metadata schema.  In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  If you want to delete only one definition, use the [Update Metadata Schema](ref:update-metadata-schema) endpoint. In the request, provide the &#x60;\&quot;deleted\&quot;: true&#x60; pair in the definition object. This definition will be moved to Removed definitions.  If you want to create a new standard metadata schema, use the [Create Metadata Schema](ref:create-metadata-schema) endpoint.  &gt; 🚧 Metadata Purging &gt; &gt;This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. &gt; &gt;If you want to purge metadata from the entities: &gt;1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the [Update Metadata Schema](ref:update-metadata-schema) endpoint. &gt;2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. &gt;3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. &gt;Note: &gt;- This is an asynchronous action. You will be notified when it has been completed. &gt;- You cannot purge metadata for the Redemption and Publication schemas. &gt;4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the metadata schema has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetadataSchemaAsync(String projectId, String metadataSchemaId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetadataSchemaValidateBeforeCall(projectId, metadataSchemaId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProject(Async)");
        }

        return deleteProjectCall(projectId, _callback);

    }

    /**
     * Delete Project
     * Deletes an existing project.  The users currently using the deleted project will be automatically logged out.  &gt; 🚧 Sandbox Project &gt; &gt;The sandbox project cannot be deleted.
     * @param projectId Provide the unique identifier of the project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProject(String projectId) throws ApiException {
        deleteProjectWithHttpInfo(projectId);
    }

    /**
     * Delete Project
     * Deletes an existing project.  The users currently using the deleted project will be automatically logged out.  &gt; 🚧 Sandbox Project &gt; &gt;The sandbox project cannot be deleted.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Project (asynchronously)
     * Deletes an existing project.  The users currently using the deleted project will be automatically logged out.  &gt; 🚧 Sandbox Project &gt; &gt;The sandbox project cannot be deleted.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStackingRules
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the stacking rules have been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStackingRulesCall(String projectId, String stackingRulesId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "stackingRulesId" + "}", localVarApiClient.escapeString(stackingRulesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStackingRulesValidateBeforeCall(String projectId, String stackingRulesId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteStackingRules(Async)");
        }

        // verify the required parameter 'stackingRulesId' is set
        if (stackingRulesId == null) {
            throw new ApiException("Missing the required parameter 'stackingRulesId' when calling deleteStackingRules(Async)");
        }

        return deleteStackingRulesCall(projectId, stackingRulesId, _callback);

    }

    /**
     * Delete Stacking Rules
     * Deletes permanently the current settings for the stacking rules.  The stacking rules are restored to default values.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the stacking rules have been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStackingRules(String projectId, String stackingRulesId) throws ApiException {
        deleteStackingRulesWithHttpInfo(projectId, stackingRulesId);
    }

    /**
     * Delete Stacking Rules
     * Deletes permanently the current settings for the stacking rules.  The stacking rules are restored to default values.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the stacking rules have been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStackingRulesWithHttpInfo(String projectId, String stackingRulesId) throws ApiException {
        okhttp3.Call localVarCall = deleteStackingRulesValidateBeforeCall(projectId, stackingRulesId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Stacking Rules (asynchronously)
     * Deletes permanently the current settings for the stacking rules.  The stacking rules are restored to default values.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the stacking rules have been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStackingRulesAsync(String projectId, String stackingRulesId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStackingRulesValidateBeforeCall(projectId, stackingRulesId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebhook
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the webhook configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookCall(String projectId, String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/webhooks/{webhookId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String projectId, String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteWebhook(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(projectId, webhookId, _callback);

    }

    /**
     * Delete Webhook
     * Deletes a webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the webhook configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWebhook(String projectId, String webhookId) throws ApiException {
        deleteWebhookWithHttpInfo(projectId, webhookId);
    }

    /**
     * Delete Webhook
     * Deletes a webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the webhook configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWebhookWithHttpInfo(String projectId, String webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(projectId, webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Webhook (asynchronously)
     * Deletes a webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the webhook configuration has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookAsync(String projectId, String webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(projectId, webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrand
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandCall(String projectId, String brandingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/branding/{brandingId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "brandingId" + "}", localVarApiClient.escapeString(brandingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandValidateBeforeCall(String projectId, String brandingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getBrand(Async)");
        }

        // verify the required parameter 'brandingId' is set
        if (brandingId == null) {
            throw new ApiException("Missing the required parameter 'brandingId' when calling getBrand(Async)");
        }

        return getBrandCall(projectId, brandingId, _callback);

    }

    /**
     * Get Brand
     * Retrieves a brand configuration.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @return ManagementProjectsBrandingResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsBrandingResponseBody getBrand(String projectId, String brandingId) throws ApiException {
        ApiResponse<ManagementProjectsBrandingResponseBody> localVarResp = getBrandWithHttpInfo(projectId, brandingId);
        return localVarResp.getData();
    }

    /**
     * Get Brand
     * Retrieves a brand configuration.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @return ApiResponse&lt;ManagementProjectsBrandingResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsBrandingResponseBody> getBrandWithHttpInfo(String projectId, String brandingId) throws ApiException {
        okhttp3.Call localVarCall = getBrandValidateBeforeCall(projectId, brandingId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Brand (asynchronously)
     * Retrieves a brand configuration.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandAsync(String projectId, String brandingId, final ApiCallback<ManagementProjectsBrandingResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandValidateBeforeCall(projectId, brandingId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomEventSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomEventSchemaCall(String projectId, String customEventSchemaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "customEventSchemaId" + "}", localVarApiClient.escapeString(customEventSchemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomEventSchemaValidateBeforeCall(String projectId, String customEventSchemaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCustomEventSchema(Async)");
        }

        // verify the required parameter 'customEventSchemaId' is set
        if (customEventSchemaId == null) {
            throw new ApiException("Missing the required parameter 'customEventSchemaId' when calling getCustomEventSchema(Async)");
        }

        return getCustomEventSchemaCall(projectId, customEventSchemaId, _callback);

    }

    /**
     * Get Custom Event Schema
     * Retrieves a custom event schema.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @return ManagementProjectsCustomEventSchemaResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsCustomEventSchemaResponseBody getCustomEventSchema(String projectId, String customEventSchemaId) throws ApiException {
        ApiResponse<ManagementProjectsCustomEventSchemaResponseBody> localVarResp = getCustomEventSchemaWithHttpInfo(projectId, customEventSchemaId);
        return localVarResp.getData();
    }

    /**
     * Get Custom Event Schema
     * Retrieves a custom event schema.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @return ApiResponse&lt;ManagementProjectsCustomEventSchemaResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsCustomEventSchemaResponseBody> getCustomEventSchemaWithHttpInfo(String projectId, String customEventSchemaId) throws ApiException {
        okhttp3.Call localVarCall = getCustomEventSchemaValidateBeforeCall(projectId, customEventSchemaId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Custom Event Schema (asynchronously)
     * Retrieves a custom event schema.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomEventSchemaAsync(String projectId, String customEventSchemaId, final ApiCallback<ManagementProjectsCustomEventSchemaResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomEventSchemaValidateBeforeCall(projectId, customEventSchemaId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetadataSchema1
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataSchema1Call(String projectId, String metadataSchemaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "metadataSchemaId" + "}", localVarApiClient.escapeString(metadataSchemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataSchema1ValidateBeforeCall(String projectId, String metadataSchemaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getMetadataSchema1(Async)");
        }

        // verify the required parameter 'metadataSchemaId' is set
        if (metadataSchemaId == null) {
            throw new ApiException("Missing the required parameter 'metadataSchemaId' when calling getMetadataSchema1(Async)");
        }

        return getMetadataSchema1Call(projectId, metadataSchemaId, _callback);

    }

    /**
     * Get Metadata Schema
     * Retrieves a metadata schema.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @return ManagementProjectsMetadataSchemaResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsMetadataSchemaResponseBody getMetadataSchema1(String projectId, String metadataSchemaId) throws ApiException {
        ApiResponse<ManagementProjectsMetadataSchemaResponseBody> localVarResp = getMetadataSchema1WithHttpInfo(projectId, metadataSchemaId);
        return localVarResp.getData();
    }

    /**
     * Get Metadata Schema
     * Retrieves a metadata schema.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @return ApiResponse&lt;ManagementProjectsMetadataSchemaResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsMetadataSchemaResponseBody> getMetadataSchema1WithHttpInfo(String projectId, String metadataSchemaId) throws ApiException {
        okhttp3.Call localVarCall = getMetadataSchema1ValidateBeforeCall(projectId, metadataSchemaId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Metadata Schema (asynchronously)
     * Retrieves a metadata schema.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataSchema1Async(String projectId, String metadataSchemaId, final ApiCallback<ManagementProjectsMetadataSchemaResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataSchema1ValidateBeforeCall(projectId, metadataSchemaId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProject(Async)");
        }

        return getProjectCall(projectId, _callback);

    }

    /**
     * Get Project
     * Retrieves an existing project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsResponseBody getProject(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsResponseBody> localVarResp = getProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get Project
     * Retrieves an existing project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsResponseBody> getProjectWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Project (asynchronously)
     * Retrieves an existing project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of a project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(String projectId, final ApiCallback<ManagementProjectsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStackingRules
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the stacking rules for the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStackingRulesCall(String projectId, String stackingRulesId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "stackingRulesId" + "}", localVarApiClient.escapeString(stackingRulesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStackingRulesValidateBeforeCall(String projectId, String stackingRulesId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStackingRules(Async)");
        }

        // verify the required parameter 'stackingRulesId' is set
        if (stackingRulesId == null) {
            throw new ApiException("Missing the required parameter 'stackingRulesId' when calling getStackingRules(Async)");
        }

        return getStackingRulesCall(projectId, stackingRulesId, _callback);

    }

    /**
     * Get Stacking Rules
     * Retrieves the stacking rules for the project.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @return ManagementProjectsStackingRulesResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the stacking rules for the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsStackingRulesResponseBody getStackingRules(String projectId, String stackingRulesId) throws ApiException {
        ApiResponse<ManagementProjectsStackingRulesResponseBody> localVarResp = getStackingRulesWithHttpInfo(projectId, stackingRulesId);
        return localVarResp.getData();
    }

    /**
     * Get Stacking Rules
     * Retrieves the stacking rules for the project.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @return ApiResponse&lt;ManagementProjectsStackingRulesResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the stacking rules for the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsStackingRulesResponseBody> getStackingRulesWithHttpInfo(String projectId, String stackingRulesId) throws ApiException {
        okhttp3.Call localVarCall = getStackingRulesValidateBeforeCall(projectId, stackingRulesId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Stacking Rules (asynchronously)
     * Retrieves the stacking rules for the project.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the stacking rules for the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStackingRulesAsync(String projectId, String stackingRulesId, final ApiCallback<ManagementProjectsStackingRulesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStackingRulesValidateBeforeCall(projectId, stackingRulesId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the project user&#39;s details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/users/{userId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(projectId, userId, _callback);

    }

    /**
     * Get User
     * Retrieves the project user&#39;s details.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @return ManagementProjectsUserResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the project user&#39;s details. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsUserResponseBody getUser(String projectId, String userId) throws ApiException {
        ApiResponse<ManagementProjectsUserResponseBody> localVarResp = getUserWithHttpInfo(projectId, userId);
        return localVarResp.getData();
    }

    /**
     * Get User
     * Retrieves the project user&#39;s details.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @return ApiResponse&lt;ManagementProjectsUserResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the project user&#39;s details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsUserResponseBody> getUserWithHttpInfo(String projectId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(projectId, userId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously)
     * Retrieves the project user&#39;s details.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the project user&#39;s details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String projectId, String userId, final ApiCallback<ManagementProjectsUserResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(projectId, userId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhook
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookCall(String projectId, String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/webhooks/{webhookId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookValidateBeforeCall(String projectId, String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getWebhook(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhook(Async)");
        }

        return getWebhookCall(projectId, webhookId, _callback);

    }

    /**
     * Get Webhook
     * Retrieves a webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @return ManagementProjectsWebhooksResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsWebhooksResponseBody getWebhook(String projectId, String webhookId) throws ApiException {
        ApiResponse<ManagementProjectsWebhooksResponseBody> localVarResp = getWebhookWithHttpInfo(projectId, webhookId);
        return localVarResp.getData();
    }

    /**
     * Get Webhook
     * Retrieves a webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @return ApiResponse&lt;ManagementProjectsWebhooksResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsWebhooksResponseBody> getWebhookWithHttpInfo(String projectId, String webhookId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(projectId, webhookId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Webhook (asynchronously)
     * Retrieves a webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookAsync(String projectId, String webhookId, final ApiCallback<ManagementProjectsWebhooksResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(projectId, webhookId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBrands
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBrandsCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/branding"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBrandsValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listBrands(Async)");
        }

        return listBrandsCall(projectId, _callback);

    }

    /**
     * List Brands
     * Lists all brand configurations.  Because a project can have only one brand, it always returns a list with one item.  This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsBrandingListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsBrandingListResponseBody listBrands(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsBrandingListResponseBody> localVarResp = listBrandsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List Brands
     * Lists all brand configurations.  Because a project can have only one brand, it always returns a list with one item.  This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsBrandingListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsBrandingListResponseBody> listBrandsWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = listBrandsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Brands (asynchronously)
     * Lists all brand configurations.  Because a project can have only one brand, it always returns a list with one item.  This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the brand created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBrandsAsync(String projectId, final ApiCallback<ManagementProjectsBrandingListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBrandsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomEventSchemas
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomEventSchemasCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/custom-event-schemas"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomEventSchemasValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listCustomEventSchemas(Async)");
        }

        return listCustomEventSchemasCall(projectId, _callback);

    }

    /**
     * List Custom Event Schemas
     * Lists all custom event schemas available in the project.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsCustomEventSchemaListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsCustomEventSchemaListResponseBody listCustomEventSchemas(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsCustomEventSchemaListResponseBody> localVarResp = listCustomEventSchemasWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List Custom Event Schemas
     * Lists all custom event schemas available in the project.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsCustomEventSchemaListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsCustomEventSchemaListResponseBody> listCustomEventSchemasWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = listCustomEventSchemasValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Custom Event Schemas (asynchronously)
     * Lists all custom event schemas available in the project.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the custom event schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomEventSchemasAsync(String projectId, final ApiCallback<ManagementProjectsCustomEventSchemaListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomEventSchemasValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMetadataSchemas1
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMetadataSchemas1Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/metadata-schemas"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMetadataSchemas1ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listMetadataSchemas1(Async)");
        }

        return listMetadataSchemas1Call(projectId, _callback);

    }

    /**
     * List Metadata Schemas
     * Lists all metadata schemas available in the project.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsMetadataSchemaListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsMetadataSchemaListResponseBody listMetadataSchemas1(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsMetadataSchemaListResponseBody> localVarResp = listMetadataSchemas1WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List Metadata Schemas
     * Lists all metadata schemas available in the project.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsMetadataSchemaListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsMetadataSchemaListResponseBody> listMetadataSchemas1WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = listMetadataSchemas1ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Metadata Schemas (asynchronously)
     * Lists all metadata schemas available in the project.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the metadata schemas created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMetadataSchemas1Async(String projectId, final ApiCallback<ManagementProjectsMetadataSchemaListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMetadataSchemas1ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjects
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all projects with their details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listProjectsCall(_callback);

    }

    /**
     * List Projects
     * Lists all projects for the organization.  The endpoint does not require any query parameters.
     * @return ManagementProjectListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all projects with their details. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectListResponseBody listProjects() throws ApiException {
        ApiResponse<ManagementProjectListResponseBody> localVarResp = listProjectsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Projects
     * Lists all projects for the organization.  The endpoint does not require any query parameters.
     * @return ApiResponse&lt;ManagementProjectListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all projects with their details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectListResponseBody> listProjectsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ManagementProjectListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Projects (asynchronously)
     * Lists all projects for the organization.  The endpoint does not require any query parameters.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all projects with their details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsAsync(final ApiCallback<ManagementProjectListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ManagementProjectListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStackingRules
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. These can be either the default stacking rules or the created ones. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStackingRulesCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/stacking-rules"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStackingRulesValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listStackingRules(Async)");
        }

        return listStackingRulesCall(projectId, _callback);

    }

    /**
     * List Stacking Rules
     * Lists all stacking rules.  Returns always a list with one item.  This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the [Get Stacking Rules](ref:get-stacking-rules) or [Update Stacking Rules](ref:update-stacking-rules) endpoints.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsStackingRulesListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. These can be either the default stacking rules or the created ones. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsStackingRulesListResponseBody listStackingRules(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsStackingRulesListResponseBody> localVarResp = listStackingRulesWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List Stacking Rules
     * Lists all stacking rules.  Returns always a list with one item.  This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the [Get Stacking Rules](ref:get-stacking-rules) or [Update Stacking Rules](ref:update-stacking-rules) endpoints.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsStackingRulesListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. These can be either the default stacking rules or the created ones. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsStackingRulesListResponseBody> listStackingRulesWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = listStackingRulesValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Stacking Rules (asynchronously)
     * Lists all stacking rules.  Returns always a list with one item.  This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the [Get Stacking Rules](ref:get-stacking-rules) or [Update Stacking Rules](ref:update-stacking-rules) endpoints.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the stacking rules assigned to the project. These can be either the default stacking rules or the created ones. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStackingRulesAsync(String projectId, final ApiCallback<ManagementProjectsStackingRulesListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStackingRulesValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all the users assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/users"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listUsers(Async)");
        }

        return listUsersCall(projectId, _callback);

    }

    /**
     * List Users
     * Lists all users assigned to the project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsUserListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all the users assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsUserListResponseBody listUsers(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsUserListResponseBody> localVarResp = listUsersWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List Users
     * Lists all users assigned to the project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsUserListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all the users assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsUserListResponseBody> listUsersWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users (asynchronously)
     * Lists all users assigned to the project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of all the users assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersAsync(String projectId, final ApiCallback<ManagementProjectsUserListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebhooks
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about webhook configurations created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhooksCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/webhooks"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhooksValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listWebhooks(Async)");
        }

        return listWebhooksCall(projectId, _callback);

    }

    /**
     * List Webhooks
     * Lists all webhook configurations for the project.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ManagementProjectsWebhooksListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about webhook configurations created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsWebhooksListResponseBody listWebhooks(String projectId) throws ApiException {
        ApiResponse<ManagementProjectsWebhooksListResponseBody> localVarResp = listWebhooksWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List Webhooks
     * Lists all webhook configurations for the project.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @return ApiResponse&lt;ManagementProjectsWebhooksListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about webhook configurations created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsWebhooksListResponseBody> listWebhooksWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Webhooks (asynchronously)
     * Lists all webhook configurations for the project.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about webhook configurations created in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhooksAsync(String projectId, final ApiCallback<ManagementProjectsWebhooksListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unassignUser
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the user has been successfully unnassigned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignUserCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/users/{userId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignUserValidateBeforeCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling unassignUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unassignUser(Async)");
        }

        return unassignUserCall(projectId, userId, _callback);

    }

    /**
     * Unassign User
     * Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the user has been successfully unnassigned. </td><td>  -  </td></tr>
     </table>
     */
    public void unassignUser(String projectId, String userId) throws ApiException {
        unassignUserWithHttpInfo(projectId, userId);
    }

    /**
     * Unassign User
     * Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the user has been successfully unnassigned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unassignUserWithHttpInfo(String projectId, String userId) throws ApiException {
        okhttp3.Call localVarCall = unassignUserValidateBeforeCall(projectId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unassign User (asynchronously)
     * Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if the user has been successfully unnassigned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignUserAsync(String projectId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignUserValidateBeforeCall(projectId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBrand
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param managementProjectsBranding Defines the brand configuration to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBrandCall(String projectId, String brandingId, ManagementProjectsBranding managementProjectsBranding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsBranding;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/branding/{brandingId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "brandingId" + "}", localVarApiClient.escapeString(brandingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBrandValidateBeforeCall(String projectId, String brandingId, ManagementProjectsBranding managementProjectsBranding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateBrand(Async)");
        }

        // verify the required parameter 'brandingId' is set
        if (brandingId == null) {
            throw new ApiException("Missing the required parameter 'brandingId' when calling updateBrand(Async)");
        }

        return updateBrandCall(projectId, brandingId, managementProjectsBranding, _callback);

    }

    /**
     * Update Brand
     * Updates a brand configuration.  Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  &gt; 📘 White Labelling &gt; &gt; The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param managementProjectsBranding Defines the brand configuration to be updated. (optional)
     * @return ManagementProjectsBrandingResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsBrandingResponseBody updateBrand(String projectId, String brandingId, ManagementProjectsBranding managementProjectsBranding) throws ApiException {
        ApiResponse<ManagementProjectsBrandingResponseBody> localVarResp = updateBrandWithHttpInfo(projectId, brandingId, managementProjectsBranding);
        return localVarResp.getData();
    }

    /**
     * Update Brand
     * Updates a brand configuration.  Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  &gt; 📘 White Labelling &gt; &gt; The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param managementProjectsBranding Defines the brand configuration to be updated. (optional)
     * @return ApiResponse&lt;ManagementProjectsBrandingResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsBrandingResponseBody> updateBrandWithHttpInfo(String projectId, String brandingId, ManagementProjectsBranding managementProjectsBranding) throws ApiException {
        okhttp3.Call localVarCall = updateBrandValidateBeforeCall(projectId, brandingId, managementProjectsBranding, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Brand (asynchronously)
     * Updates a brand configuration.  Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  &gt; 📘 White Labelling &gt; &gt; The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param brandingId Provide the unique identifier of the brand configuration. (required)
     * @param managementProjectsBranding Defines the brand configuration to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated brand configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBrandAsync(String projectId, String brandingId, ManagementProjectsBranding managementProjectsBranding, final ApiCallback<ManagementProjectsBrandingResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBrandValidateBeforeCall(projectId, brandingId, managementProjectsBranding, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsBrandingResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomEventSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param managementProjectsCustomEventSchemaBase Defines the custom event schema to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomEventSchemaCall(String projectId, String customEventSchemaId, ManagementProjectsCustomEventSchemaBase managementProjectsCustomEventSchemaBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsCustomEventSchemaBase;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "customEventSchemaId" + "}", localVarApiClient.escapeString(customEventSchemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomEventSchemaValidateBeforeCall(String projectId, String customEventSchemaId, ManagementProjectsCustomEventSchemaBase managementProjectsCustomEventSchemaBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateCustomEventSchema(Async)");
        }

        // verify the required parameter 'customEventSchemaId' is set
        if (customEventSchemaId == null) {
            throw new ApiException("Missing the required parameter 'customEventSchemaId' when calling updateCustomEventSchema(Async)");
        }

        return updateCustomEventSchemaCall(projectId, customEventSchemaId, managementProjectsCustomEventSchemaBase, _callback);

    }

    /**
     * Update Custom Event Schema
     * Updates a custom event schema.  With this request, you can: - Add a non-existing property to a custom event schema. - Update an existing property.  In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  &gt; 👍 Additional Notes &gt; &gt;- You can change the type of an existing property, e.g. from &#x60;\&quot;string\&quot;&#x60; to &#x60;\&quot;number\&quot;&#x60;. &gt; &gt;- You can remove a custom property with this endpoint by providing &#x60;\&quot;deleted\&quot;: true&#x60; in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param managementProjectsCustomEventSchemaBase Defines the custom event schema to be updated. (optional)
     * @return ManagementProjectsCustomEventSchemaResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsCustomEventSchemaResponseBody updateCustomEventSchema(String projectId, String customEventSchemaId, ManagementProjectsCustomEventSchemaBase managementProjectsCustomEventSchemaBase) throws ApiException {
        ApiResponse<ManagementProjectsCustomEventSchemaResponseBody> localVarResp = updateCustomEventSchemaWithHttpInfo(projectId, customEventSchemaId, managementProjectsCustomEventSchemaBase);
        return localVarResp.getData();
    }

    /**
     * Update Custom Event Schema
     * Updates a custom event schema.  With this request, you can: - Add a non-existing property to a custom event schema. - Update an existing property.  In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  &gt; 👍 Additional Notes &gt; &gt;- You can change the type of an existing property, e.g. from &#x60;\&quot;string\&quot;&#x60; to &#x60;\&quot;number\&quot;&#x60;. &gt; &gt;- You can remove a custom property with this endpoint by providing &#x60;\&quot;deleted\&quot;: true&#x60; in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param managementProjectsCustomEventSchemaBase Defines the custom event schema to be updated. (optional)
     * @return ApiResponse&lt;ManagementProjectsCustomEventSchemaResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsCustomEventSchemaResponseBody> updateCustomEventSchemaWithHttpInfo(String projectId, String customEventSchemaId, ManagementProjectsCustomEventSchemaBase managementProjectsCustomEventSchemaBase) throws ApiException {
        okhttp3.Call localVarCall = updateCustomEventSchemaValidateBeforeCall(projectId, customEventSchemaId, managementProjectsCustomEventSchemaBase, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Custom Event Schema (asynchronously)
     * Updates a custom event schema.  With this request, you can: - Add a non-existing property to a custom event schema. - Update an existing property.  In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  &gt; 👍 Additional Notes &gt; &gt;- You can change the type of an existing property, e.g. from &#x60;\&quot;string\&quot;&#x60; to &#x60;\&quot;number\&quot;&#x60;. &gt; &gt;- You can remove a custom property with this endpoint by providing &#x60;\&quot;deleted\&quot;: true&#x60; in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  &gt; 📘 Custom Event Documentation &gt; &gt; Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. &gt; &gt;Read also the details about the [Track Custom Event](ref:track-custom-event) endpoint and the [Custom Event Object](ref:custom-event-object).
     * @param projectId Provide the unique identifier of the project. (required)
     * @param customEventSchemaId Provide the unique identifier of the custom event schema. (required)
     * @param managementProjectsCustomEventSchemaBase Defines the custom event schema to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated custom event schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomEventSchemaAsync(String projectId, String customEventSchemaId, ManagementProjectsCustomEventSchemaBase managementProjectsCustomEventSchemaBase, final ApiCallback<ManagementProjectsCustomEventSchemaResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomEventSchemaValidateBeforeCall(projectId, customEventSchemaId, managementProjectsCustomEventSchemaBase, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsCustomEventSchemaResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMetadataSchema
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param managementProjectsMetadataSchemaUpdateRequestBody Defines the metadata schema to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetadataSchemaCall(String projectId, String metadataSchemaId, ManagementProjectsMetadataSchemaUpdateRequestBody managementProjectsMetadataSchemaUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsMetadataSchemaUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "metadataSchemaId" + "}", localVarApiClient.escapeString(metadataSchemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetadataSchemaValidateBeforeCall(String projectId, String metadataSchemaId, ManagementProjectsMetadataSchemaUpdateRequestBody managementProjectsMetadataSchemaUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateMetadataSchema(Async)");
        }

        // verify the required parameter 'metadataSchemaId' is set
        if (metadataSchemaId == null) {
            throw new ApiException("Missing the required parameter 'metadataSchemaId' when calling updateMetadataSchema(Async)");
        }

        return updateMetadataSchemaCall(projectId, metadataSchemaId, managementProjectsMetadataSchemaUpdateRequestBody, _callback);

    }

    /**
     * Update Metadata Schema
     * Updates a metadata schema.  With this request, you can: - Add a non-existing attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values.  In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged.  However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  &gt; 👍 Additional Notes &gt; &gt;- You cannot change the type of an existing schema, e.g. from &#x60;\&quot;string\&quot;&#x60; to &#x60;\&quot;number\&quot;&#x60;. &gt; &gt;- You can remove a definition with this endpoint by providing &#x60;\&quot;deleted\&quot;: true&#x60; in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param managementProjectsMetadataSchemaUpdateRequestBody Defines the metadata schema to be updated. (optional)
     * @return ManagementProjectsMetadataSchemaResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsMetadataSchemaResponseBody updateMetadataSchema(String projectId, String metadataSchemaId, ManagementProjectsMetadataSchemaUpdateRequestBody managementProjectsMetadataSchemaUpdateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsMetadataSchemaResponseBody> localVarResp = updateMetadataSchemaWithHttpInfo(projectId, metadataSchemaId, managementProjectsMetadataSchemaUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Metadata Schema
     * Updates a metadata schema.  With this request, you can: - Add a non-existing attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values.  In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged.  However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  &gt; 👍 Additional Notes &gt; &gt;- You cannot change the type of an existing schema, e.g. from &#x60;\&quot;string\&quot;&#x60; to &#x60;\&quot;number\&quot;&#x60;. &gt; &gt;- You can remove a definition with this endpoint by providing &#x60;\&quot;deleted\&quot;: true&#x60; in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param managementProjectsMetadataSchemaUpdateRequestBody Defines the metadata schema to be updated. (optional)
     * @return ApiResponse&lt;ManagementProjectsMetadataSchemaResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsMetadataSchemaResponseBody> updateMetadataSchemaWithHttpInfo(String projectId, String metadataSchemaId, ManagementProjectsMetadataSchemaUpdateRequestBody managementProjectsMetadataSchemaUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateMetadataSchemaValidateBeforeCall(projectId, metadataSchemaId, managementProjectsMetadataSchemaUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Metadata Schema (asynchronously)
     * Updates a metadata schema.  With this request, you can: - Add a non-existing attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values.  In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged.  However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  &gt; 👍 Additional Notes &gt; &gt;- You cannot change the type of an existing schema, e.g. from &#x60;\&quot;string\&quot;&#x60; to &#x60;\&quot;number\&quot;&#x60;. &gt; &gt;- You can remove a definition with this endpoint by providing &#x60;\&quot;deleted\&quot;: true&#x60; in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  &gt; 📘 Metadata Documentation &gt; &gt; Read [the Getting Started with Metadata](https://support.voucherify.io/article/99-schema-validation-metadata) and [Metadata Mapping](doc:metadata-mapping) articles to learn how metadata work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param metadataSchemaId Provide the unique identifier of the metadata schema. (required)
     * @param managementProjectsMetadataSchemaUpdateRequestBody Defines the metadata schema to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated metadata schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetadataSchemaAsync(String projectId, String metadataSchemaId, ManagementProjectsMetadataSchemaUpdateRequestBody managementProjectsMetadataSchemaUpdateRequestBody, final ApiCallback<ManagementProjectsMetadataSchemaResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetadataSchemaValidateBeforeCall(projectId, metadataSchemaId, managementProjectsMetadataSchemaUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsMetadataSchemaResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProject
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUpdateRequestBody Define the project details to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of an updated project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectCall(String projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectValidateBeforeCall(String projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProject(Async)");
        }

        return updateProjectCall(projectId, managementProjectsUpdateRequestBody, _callback);

    }

    /**
     * Update Project
     * Updates an existing project.  You can add or modify settings for timezone, currency, notifications, and other details.  Only the fields sent in the request will be updated.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUpdateRequestBody Define the project details to be updated. (optional)
     * @return ManagementProjectsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of an updated project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsResponseBody updateProject(String projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsResponseBody> localVarResp = updateProjectWithHttpInfo(projectId, managementProjectsUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Project
     * Updates an existing project.  You can add or modify settings for timezone, currency, notifications, and other details.  Only the fields sent in the request will be updated.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUpdateRequestBody Define the project details to be updated. (optional)
     * @return ApiResponse&lt;ManagementProjectsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of an updated project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsResponseBody> updateProjectWithHttpInfo(String projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(projectId, managementProjectsUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Project (asynchronously)
     * Updates an existing project.  You can add or modify settings for timezone, currency, notifications, and other details.  Only the fields sent in the request will be updated.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param managementProjectsUpdateRequestBody Define the project details to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of an updated project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectAsync(String projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody, final ApiCallback<ManagementProjectsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(projectId, managementProjectsUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStackingRules
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param managementProjectsStackingRulesBase Defines the stacking rules to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated stacking rules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStackingRulesCall(String projectId, String stackingRulesId, ManagementProjectsStackingRulesBase managementProjectsStackingRulesBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsStackingRulesBase;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "stackingRulesId" + "}", localVarApiClient.escapeString(stackingRulesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStackingRulesValidateBeforeCall(String projectId, String stackingRulesId, ManagementProjectsStackingRulesBase managementProjectsStackingRulesBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateStackingRules(Async)");
        }

        // verify the required parameter 'stackingRulesId' is set
        if (stackingRulesId == null) {
            throw new ApiException("Missing the required parameter 'stackingRulesId' when calling updateStackingRules(Async)");
        }

        return updateStackingRulesCall(projectId, stackingRulesId, managementProjectsStackingRulesBase, _callback);

    }

    /**
     * Update Stacking Rules
     * Updates the stacking rules.  Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param managementProjectsStackingRulesBase Defines the stacking rules to be updated. (optional)
     * @return ManagementProjectsStackingRulesUpdatedResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated stacking rules. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsStackingRulesUpdatedResponseBody updateStackingRules(String projectId, String stackingRulesId, ManagementProjectsStackingRulesBase managementProjectsStackingRulesBase) throws ApiException {
        ApiResponse<ManagementProjectsStackingRulesUpdatedResponseBody> localVarResp = updateStackingRulesWithHttpInfo(projectId, stackingRulesId, managementProjectsStackingRulesBase);
        return localVarResp.getData();
    }

    /**
     * Update Stacking Rules
     * Updates the stacking rules.  Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param managementProjectsStackingRulesBase Defines the stacking rules to be updated. (optional)
     * @return ApiResponse&lt;ManagementProjectsStackingRulesUpdatedResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated stacking rules. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsStackingRulesUpdatedResponseBody> updateStackingRulesWithHttpInfo(String projectId, String stackingRulesId, ManagementProjectsStackingRulesBase managementProjectsStackingRulesBase) throws ApiException {
        okhttp3.Call localVarCall = updateStackingRulesValidateBeforeCall(projectId, stackingRulesId, managementProjectsStackingRulesBase, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesUpdatedResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Stacking Rules (asynchronously)
     * Updates the stacking rules.  Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  &gt; 📘 Stacking Rules Documentation &gt; &gt; Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param stackingRulesId Provide the unique identifier of the stacking rules. (required)
     * @param managementProjectsStackingRulesBase Defines the stacking rules to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated stacking rules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStackingRulesAsync(String projectId, String stackingRulesId, ManagementProjectsStackingRulesBase managementProjectsStackingRulesBase, final ApiCallback<ManagementProjectsStackingRulesUpdatedResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStackingRulesValidateBeforeCall(projectId, stackingRulesId, managementProjectsStackingRulesBase, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsStackingRulesUpdatedResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param managementProjectsUserUpdateRequestBody Defines the user&#39;s new role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String projectId, String userId, ManagementProjectsUserUpdateRequestBody managementProjectsUserUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsUserUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/users/{userId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String projectId, String userId, ManagementProjectsUserUpdateRequestBody managementProjectsUserUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }

        return updateUserCall(projectId, userId, managementProjectsUserUpdateRequestBody, _callback);

    }

    /**
     * Update User
     * Updates the user&#39;s role.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param managementProjectsUserUpdateRequestBody Defines the user&#39;s new role. (optional)
     * @return ManagementProjectsUserResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsUserResponseBody updateUser(String projectId, String userId, ManagementProjectsUserUpdateRequestBody managementProjectsUserUpdateRequestBody) throws ApiException {
        ApiResponse<ManagementProjectsUserResponseBody> localVarResp = updateUserWithHttpInfo(projectId, userId, managementProjectsUserUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update User
     * Updates the user&#39;s role.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param managementProjectsUserUpdateRequestBody Defines the user&#39;s new role. (optional)
     * @return ApiResponse&lt;ManagementProjectsUserResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsUserResponseBody> updateUserWithHttpInfo(String projectId, String userId, ManagementProjectsUserUpdateRequestBody managementProjectsUserUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(projectId, userId, managementProjectsUserUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * Updates the user&#39;s role.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param userId Provide the unique identifier of the user. Alternatively, provide the user&#39;s login. (required)
     * @param managementProjectsUserUpdateRequestBody Defines the user&#39;s new role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the user assigned to the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String projectId, String userId, ManagementProjectsUserUpdateRequestBody managementProjectsUserUpdateRequestBody, final ApiCallback<ManagementProjectsUserResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(projectId, userId, managementProjectsUserUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsUserResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebhook
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param managementProjectsWebhooks Defines the webhook configuration to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookCall(String projectId, String webhookId, ManagementProjectsWebhooks managementProjectsWebhooks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementProjectsWebhooks;

        // create path and map variables
        String localVarPath = "/management/v1/projects/{projectId}/webhooks/{webhookId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Management-Token", "X-Management-Id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(String projectId, String webhookId, ManagementProjectsWebhooks managementProjectsWebhooks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateWebhook(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(projectId, webhookId, managementProjectsWebhooks, _callback);

    }

    /**
     * Update Webhook
     * Updates a webhook configuration.  The &#x60;\&quot;events\&quot;&#x60; listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param managementProjectsWebhooks Defines the webhook configuration to be updated. (optional)
     * @return ManagementProjectsWebhooksResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementProjectsWebhooksResponseBody updateWebhook(String projectId, String webhookId, ManagementProjectsWebhooks managementProjectsWebhooks) throws ApiException {
        ApiResponse<ManagementProjectsWebhooksResponseBody> localVarResp = updateWebhookWithHttpInfo(projectId, webhookId, managementProjectsWebhooks);
        return localVarResp.getData();
    }

    /**
     * Update Webhook
     * Updates a webhook configuration.  The &#x60;\&quot;events\&quot;&#x60; listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param managementProjectsWebhooks Defines the webhook configuration to be updated. (optional)
     * @return ApiResponse&lt;ManagementProjectsWebhooksResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementProjectsWebhooksResponseBody> updateWebhookWithHttpInfo(String projectId, String webhookId, ManagementProjectsWebhooks managementProjectsWebhooks) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(projectId, webhookId, managementProjectsWebhooks, null);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Webhook (asynchronously)
     * Updates a webhook configuration.  The &#x60;\&quot;events\&quot;&#x60; listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  &gt; 📘 Webhook Documentation &gt; &gt; Read [Webhooks v2024-01-1](ref:introduction-to-webhooks) article to learn how webhooks work in Voucherify.
     * @param projectId Provide the unique identifier of the project. (required)
     * @param webhookId Provide the unique identifier of the webhook configuration. (required)
     * @param managementProjectsWebhooks Defines the webhook configuration to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details about the updated webhook configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookAsync(String projectId, String webhookId, ManagementProjectsWebhooks managementProjectsWebhooks, final ApiCallback<ManagementProjectsWebhooksResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(projectId, webhookId, managementProjectsWebhooks, _callback);
        Type localVarReturnType = new TypeToken<ManagementProjectsWebhooksResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
