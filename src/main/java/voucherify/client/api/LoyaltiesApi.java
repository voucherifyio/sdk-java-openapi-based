/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.api;

import voucherify.client.ApiCallback;
import voucherify.client.ApiClient;
import voucherify.client.ApiException;
import voucherify.client.ApiResponse;
import voucherify.client.Configuration;
import voucherify.client.Pair;
import voucherify.client.ProgressRequestBody;
import voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import voucherify.client.model.LoyaltiesDeleteResponseBody;
import voucherify.client.model.LoyaltiesEarningRulesDisableResponseBody;
import voucherify.client.model.LoyaltiesEarningRulesEnableResponseBody;
import voucherify.client.model.LoyaltiesEarningRulesGetResponseBody;
import voucherify.client.model.LoyaltiesMembersBalanceUpdateRequestBody;
import voucherify.client.model.LoyaltiesMembersBalanceUpdateResponseBody;
import voucherify.client.model.LoyaltiesMembersPointsExpirationListResponseBody;
import voucherify.client.model.LoyaltiesMembersRedemptionRedeemRequestBody;
import voucherify.client.model.LoyaltiesMembersRedemptionRedeemResponseBody;
import voucherify.client.model.LoyaltiesMembersRewardsListResponseBody;
import voucherify.client.model.LoyaltiesMembersTiersListResponseBody;
import voucherify.client.model.LoyaltiesMembersTransactionsExportCreateRequestBody;
import voucherify.client.model.LoyaltiesMembersTransactionsExportCreateResponseBody;
import voucherify.client.model.LoyaltiesMembersTransactionsListResponseBody;
import voucherify.client.model.LoyaltiesMembersTransfersCreateResponseBody;
import voucherify.client.model.LoyaltiesRewardAssignmentsGetResponseBody;
import voucherify.client.model.LoyaltiesRewardAssignmentsRewardGetResponseBody;
import voucherify.client.model.LoyaltiesRewardsGetResponseBody;
import voucherify.client.model.LoyaltiesTiersCreateInBulkRequestBodyItem;
import voucherify.client.model.LoyaltiesTiersEarningRulesListResponseBody;
import voucherify.client.model.LoyaltiesTiersGetResponseBody;
import voucherify.client.model.LoyaltiesTiersListResponseBody;
import voucherify.client.model.LoyaltiesTiersRewardsListResponseBody;
import voucherify.client.model.LoyaltiesTransferPoints;
import voucherify.client.model.LoyaltyTier;
import voucherify.client.model.ParameterOrderListLoyaltyTiers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoyaltiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoyaltiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoyaltiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createInBulkLoyaltyTiers
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns created loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInBulkLoyaltyTiersCall(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesTiersCreateInBulkRequestBodyItem;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInBulkLoyaltyTiersValidateBeforeCall(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createInBulkLoyaltyTiers(Async)");
        }

        return createInBulkLoyaltyTiersCall(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, _callback);

    }

    /**
     * Create loyalty tiers
     * Creates loyalty tiers for desired campaign.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @return List&lt;LoyaltyTier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns created loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public List<LoyaltyTier> createInBulkLoyaltyTiers(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem) throws ApiException {
        ApiResponse<List<LoyaltyTier>> localVarResp = createInBulkLoyaltyTiersWithHttpInfo(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem);
        return localVarResp.getData();
    }

    /**
     * Create loyalty tiers
     * Creates loyalty tiers for desired campaign.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @return ApiResponse&lt;List&lt;LoyaltyTier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns created loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LoyaltyTier>> createInBulkLoyaltyTiersWithHttpInfo(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem) throws ApiException {
        okhttp3.Call localVarCall = createInBulkLoyaltyTiersValidateBeforeCall(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, null);
        Type localVarReturnType = new TypeToken<List<LoyaltyTier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create loyalty tiers (asynchronously)
     * Creates loyalty tiers for desired campaign.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns created loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInBulkLoyaltyTiersAsync(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem, final ApiCallback<List<LoyaltyTier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInBulkLoyaltyTiersValidateBeforeCall(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, _callback);
        Type localVarReturnType = new TypeToken<List<LoyaltyTier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEarningRule
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling deleteEarningRule(Async)");
        }

        return deleteEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Delete Earning Rule
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEarningRule(String campaignId, String earningRuleId) throws ApiException {
        deleteEarningRuleWithHttpInfo(campaignId, earningRuleId);
    }

    /**
     * Delete Earning Rule
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Earning Rule (asynchronously)
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoyaltyProgram
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param force If this flag is set to &#x60;true&#x60;, the campaign and related vouchers will be removed permanently. If it is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the loyalty campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the &#x60;async_action_id&#x60; from the response and pass it using &lt;!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) --&gt;[Get Async Action](ref:get-async-action) endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoyaltyProgramCall(String campaignId, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoyaltyProgramValidateBeforeCall(String campaignId, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteLoyaltyProgram(Async)");
        }

        return deleteLoyaltyProgramCall(campaignId, force, _callback);

    }

    /**
     * Delete Loyalty Campaign
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards.  If the &#x60;force&#x60; parameter is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to [the bin](ref:list-bin-entries).
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param force If this flag is set to &#x60;true&#x60;, the campaign and related vouchers will be removed permanently. If it is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @return LoyaltiesDeleteResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the loyalty campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the &#x60;async_action_id&#x60; from the response and pass it using &lt;!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) --&gt;[Get Async Action](ref:get-async-action) endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesDeleteResponseBody deleteLoyaltyProgram(String campaignId, Boolean force) throws ApiException {
        ApiResponse<LoyaltiesDeleteResponseBody> localVarResp = deleteLoyaltyProgramWithHttpInfo(campaignId, force);
        return localVarResp.getData();
    }

    /**
     * Delete Loyalty Campaign
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards.  If the &#x60;force&#x60; parameter is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to [the bin](ref:list-bin-entries).
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param force If this flag is set to &#x60;true&#x60;, the campaign and related vouchers will be removed permanently. If it is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @return ApiResponse&lt;LoyaltiesDeleteResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the loyalty campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the &#x60;async_action_id&#x60; from the response and pass it using &lt;!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) --&gt;[Get Async Action](ref:get-async-action) endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesDeleteResponseBody> deleteLoyaltyProgramWithHttpInfo(String campaignId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteLoyaltyProgramValidateBeforeCall(campaignId, force, null);
        Type localVarReturnType = new TypeToken<LoyaltiesDeleteResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Loyalty Campaign (asynchronously)
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards.  If the &#x60;force&#x60; parameter is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to [the bin](ref:list-bin-entries).
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param force If this flag is set to &#x60;true&#x60;, the campaign and related vouchers will be removed permanently. If it is set to &#x60;false&#x60; or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the loyalty campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the &#x60;async_action_id&#x60; from the response and pass it using &lt;!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) --&gt;[Get Async Action](ref:get-async-action) endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoyaltyProgramAsync(String campaignId, Boolean force, final ApiCallback<LoyaltiesDeleteResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoyaltyProgramValidateBeforeCall(campaignId, force, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesDeleteResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRewardAssignment1
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRewardAssignment1Call(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRewardAssignment1ValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteRewardAssignment1(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling deleteRewardAssignment1(Async)");
        }

        return deleteRewardAssignment1Call(campaignId, assignmentId, _callback);

    }

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRewardAssignment1(String campaignId, String assignmentId) throws ApiException {
        deleteRewardAssignment1WithHttpInfo(campaignId, assignmentId);
    }

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRewardAssignment1WithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Reward Assignment (asynchronously)
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns no content if deletion is successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRewardAssignment1Async(String campaignId, String assignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableEarningRule
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling disableEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling disableEarningRule(Async)");
        }

        return disableEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Disable Earning Rule
     * Disable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @return LoyaltiesEarningRulesDisableResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesEarningRulesDisableResponseBody disableEarningRule(String campaignId, String earningRuleId) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesDisableResponseBody> localVarResp = disableEarningRuleWithHttpInfo(campaignId, earningRuleId);
        return localVarResp.getData();
    }

    /**
     * Disable Earning Rule
     * Disable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @return ApiResponse&lt;LoyaltiesEarningRulesDisableResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesEarningRulesDisableResponseBody> disableEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = disableEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesDisableResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Earning Rule (asynchronously)
     * Disable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<LoyaltiesEarningRulesDisableResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesDisableResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableEarningRule
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling enableEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling enableEarningRule(Async)");
        }

        return enableEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Enable Earning Rule
     * Enable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @return LoyaltiesEarningRulesEnableResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesEarningRulesEnableResponseBody enableEarningRule(String campaignId, String earningRuleId) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesEnableResponseBody> localVarResp = enableEarningRuleWithHttpInfo(campaignId, earningRuleId);
        return localVarResp.getData();
    }

    /**
     * Enable Earning Rule
     * Enable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @return ApiResponse&lt;LoyaltiesEarningRulesEnableResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesEarningRulesEnableResponseBody> enableEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = enableEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesEnableResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Earning Rule (asynchronously)
     * Enable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique earning rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the &#x60;active&#x60; parameter set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<LoyaltiesEarningRulesEnableResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesEnableResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportLoyaltyCardTransactions
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportLoyaltyCardTransactionsCall(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersTransactionsExportCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/transactions/export"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportLoyaltyCardTransactionsValidateBeforeCall(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling exportLoyaltyCardTransactions(Async)");
        }

        return exportLoyaltyCardTransactionsCall(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);

    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.  | **Field** | **Definition** | **Example Export** | |:---|:---|:---| | id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 | | type | Transaction type. | - &#x60;POINTS_EXPIRATION&#x60; &lt;br&gt; - &#x60;POINTS_ADDITION&#x60; &lt;br&gt; - &#x60;POINTS_REMOVAL&#x60; &lt;br&gt; - &#x60;POINTS_TRANSFER_OUT&#x60; &lt;br&gt; - &#x60;POINTS_ACCRUAL&#x60; &lt;br&gt; - &#x60;POINTS_REFUND&#x60; &lt;br&gt; - &#x60;POINTS_REDEMPTION&#x60; | | source_id | Custom source ID of the transaction if one was included originally. | source_id_custom | | reason | Contains the reason for the transaction if one was included originally. |  | | balance | The loyalty card balance after the transaction. |  | | amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  | | created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  | | voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp | | campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV | | source|  Channel through which the transaction was initiated. | - &#x60;API&#x60; &lt;br&gt; - &#x60;voucherify-web-ui&#x60; &lt;br&gt; - &#x60;Automation&#x60; | | details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. | | related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return LoyaltiesMembersTransactionsExportCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersTransactionsExportCreateResponseBody exportLoyaltyCardTransactions(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResp = exportLoyaltyCardTransactionsWithHttpInfo(memberId, loyaltiesMembersTransactionsExportCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.  | **Field** | **Definition** | **Example Export** | |:---|:---|:---| | id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 | | type | Transaction type. | - &#x60;POINTS_EXPIRATION&#x60; &lt;br&gt; - &#x60;POINTS_ADDITION&#x60; &lt;br&gt; - &#x60;POINTS_REMOVAL&#x60; &lt;br&gt; - &#x60;POINTS_TRANSFER_OUT&#x60; &lt;br&gt; - &#x60;POINTS_ACCRUAL&#x60; &lt;br&gt; - &#x60;POINTS_REFUND&#x60; &lt;br&gt; - &#x60;POINTS_REDEMPTION&#x60; | | source_id | Custom source ID of the transaction if one was included originally. | source_id_custom | | reason | Contains the reason for the transaction if one was included originally. |  | | balance | The loyalty card balance after the transaction. |  | | amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  | | created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  | | voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp | | campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV | | source|  Channel through which the transaction was initiated. | - &#x60;API&#x60; &lt;br&gt; - &#x60;voucherify-web-ui&#x60; &lt;br&gt; - &#x60;Automation&#x60; | | details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. | | related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsExportCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> exportLoyaltyCardTransactionsWithHttpInfo(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = exportLoyaltyCardTransactionsValidateBeforeCall(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Loyalty Card Transactions (asynchronously)
     * Export transactions that are associated with point movements on a loyalty card.  | **Field** | **Definition** | **Example Export** | |:---|:---|:---| | id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 | | type | Transaction type. | - &#x60;POINTS_EXPIRATION&#x60; &lt;br&gt; - &#x60;POINTS_ADDITION&#x60; &lt;br&gt; - &#x60;POINTS_REMOVAL&#x60; &lt;br&gt; - &#x60;POINTS_TRANSFER_OUT&#x60; &lt;br&gt; - &#x60;POINTS_ACCRUAL&#x60; &lt;br&gt; - &#x60;POINTS_REFUND&#x60; &lt;br&gt; - &#x60;POINTS_REDEMPTION&#x60; | | source_id | Custom source ID of the transaction if one was included originally. | source_id_custom | | reason | Contains the reason for the transaction if one was included originally. |  | | balance | The loyalty card balance after the transaction. |  | | amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  | | created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  | | voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp | | campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV | | source|  Channel through which the transaction was initiated. | - &#x60;API&#x60; &lt;br&gt; - &#x60;voucherify-web-ui&#x60; &lt;br&gt; - &#x60;Automation&#x60; | | details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. | | related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportLoyaltyCardTransactionsAsync(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback<LoyaltiesMembersTransactionsExportCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportLoyaltyCardTransactionsValidateBeforeCall(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportLoyaltyCardTransactions1
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportLoyaltyCardTransactions1Call(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersTransactionsExportCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/transactions/export"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportLoyaltyCardTransactions1ValidateBeforeCall(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling exportLoyaltyCardTransactions1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling exportLoyaltyCardTransactions1(Async)");
        }

        return exportLoyaltyCardTransactions1Call(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);

    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.  | **Field** | **Definition** | **Example Export** | |:---|:---|:---| | id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 | | type | Transaction type. | - &#x60;POINTS_EXPIRATION&#x60; &lt;br&gt; - &#x60;POINTS_ADDITION&#x60; &lt;br&gt; - &#x60;POINTS_REMOVAL&#x60; &lt;br&gt; - &#x60;POINTS_TRANSFER_OUT&#x60; &lt;br&gt; - &#x60;POINTS_ACCRUAL&#x60; &lt;br&gt; - &#x60;POINTS_REFUND&#x60; &lt;br&gt; - &#x60;POINTS_REDEMPTION&#x60; | | source_id | Custom source ID of the transaction if one was included originally. | source_id_custom | | reason | Contains the reason for the transaction if one was included originally. |  | | balance | The loyalty card balance after the transaction. |  | | amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  | | created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  | | voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp | | campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV | | source|  Channel through which the transaction was initiated. | - &#x60;API&#x60; &lt;br&gt; - &#x60;voucherify-web-ui&#x60; &lt;br&gt; - &#x60;Automation&#x60; | | details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. | | related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return LoyaltiesMembersTransactionsExportCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersTransactionsExportCreateResponseBody exportLoyaltyCardTransactions1(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResp = exportLoyaltyCardTransactions1WithHttpInfo(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.  | **Field** | **Definition** | **Example Export** | |:---|:---|:---| | id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 | | type | Transaction type. | - &#x60;POINTS_EXPIRATION&#x60; &lt;br&gt; - &#x60;POINTS_ADDITION&#x60; &lt;br&gt; - &#x60;POINTS_REMOVAL&#x60; &lt;br&gt; - &#x60;POINTS_TRANSFER_OUT&#x60; &lt;br&gt; - &#x60;POINTS_ACCRUAL&#x60; &lt;br&gt; - &#x60;POINTS_REFUND&#x60; &lt;br&gt; - &#x60;POINTS_REDEMPTION&#x60; | | source_id | Custom source ID of the transaction if one was included originally. | source_id_custom | | reason | Contains the reason for the transaction if one was included originally. |  | | balance | The loyalty card balance after the transaction. |  | | amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  | | created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  | | voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp | | campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV | | source|  Channel through which the transaction was initiated. | - &#x60;API&#x60; &lt;br&gt; - &#x60;voucherify-web-ui&#x60; &lt;br&gt; - &#x60;Automation&#x60; | | details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. | | related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsExportCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> exportLoyaltyCardTransactions1WithHttpInfo(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = exportLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Loyalty Card Transactions (asynchronously)
     * Export transactions that are associated with point movements on a loyalty card.  | **Field** | **Definition** | **Example Export** | |:---|:---|:---| | id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 | | type | Transaction type. | - &#x60;POINTS_EXPIRATION&#x60; &lt;br&gt; - &#x60;POINTS_ADDITION&#x60; &lt;br&gt; - &#x60;POINTS_REMOVAL&#x60; &lt;br&gt; - &#x60;POINTS_TRANSFER_OUT&#x60; &lt;br&gt; - &#x60;POINTS_ACCRUAL&#x60; &lt;br&gt; - &#x60;POINTS_REFUND&#x60; &lt;br&gt; - &#x60;POINTS_REDEMPTION&#x60; | | source_id | Custom source ID of the transaction if one was included originally. | source_id_custom | | reason | Contains the reason for the transaction if one was included originally. |  | | balance | The loyalty card balance after the transaction. |  | | amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  | | created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  | | voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp | | campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV | | source|  Channel through which the transaction was initiated. | - &#x60;API&#x60; &lt;br&gt; - &#x60;voucherify-web-ui&#x60; &lt;br&gt; - &#x60;Automation&#x60; | | details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. | | related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportLoyaltyCardTransactions1Async(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback<LoyaltiesMembersTransactionsExportCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEarningRule
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the earning rule details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling getEarningRule(Async)");
        }

        return getEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Get Earning Rule
     * Retrieves an earning rule assigned to a campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @return LoyaltiesEarningRulesGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the earning rule details. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesEarningRulesGetResponseBody getEarningRule(String campaignId, String earningRuleId) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesGetResponseBody> localVarResp = getEarningRuleWithHttpInfo(campaignId, earningRuleId);
        return localVarResp.getData();
    }

    /**
     * Get Earning Rule
     * Retrieves an earning rule assigned to a campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @return ApiResponse&lt;LoyaltiesEarningRulesGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the earning rule details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesEarningRulesGetResponseBody> getEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = getEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Earning Rule (asynchronously)
     * Retrieves an earning rule assigned to a campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an earning rule object with the earning rule details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<LoyaltiesEarningRulesGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoyaltyTier
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty tier object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoyaltyTierCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "loyaltyTierId" + "}", localVarApiClient.escapeString(loyaltyTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoyaltyTierValidateBeforeCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getLoyaltyTier(Async)");
        }

        // verify the required parameter 'loyaltyTierId' is set
        if (loyaltyTierId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyTierId' when calling getLoyaltyTier(Async)");
        }

        return getLoyaltyTierCall(campaignId, loyaltyTierId, _callback);

    }

    /**
     * Get Loyalty Tier
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return LoyaltiesTiersGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty tier object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesTiersGetResponseBody getLoyaltyTier(String campaignId, String loyaltyTierId) throws ApiException {
        ApiResponse<LoyaltiesTiersGetResponseBody> localVarResp = getLoyaltyTierWithHttpInfo(campaignId, loyaltyTierId);
        return localVarResp.getData();
    }

    /**
     * Get Loyalty Tier
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return ApiResponse&lt;LoyaltiesTiersGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty tier object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesTiersGetResponseBody> getLoyaltyTierWithHttpInfo(String campaignId, String loyaltyTierId) throws ApiException {
        okhttp3.Call localVarCall = getLoyaltyTierValidateBeforeCall(campaignId, loyaltyTierId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Loyalty Tier (asynchronously)
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty tier object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoyaltyTierAsync(String campaignId, String loyaltyTierId, final ApiCallback<LoyaltiesTiersGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoyaltyTierValidateBeforeCall(campaignId, loyaltyTierId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardAssignment1
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRewardAssignment1Call(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardAssignment1ValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRewardAssignment1(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardAssignment1(Async)");
        }

        return getRewardAssignment1Call(campaignId, assignmentId, _callback);

    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return LoyaltiesRewardAssignmentsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesRewardAssignmentsGetResponseBody getRewardAssignment1(String campaignId, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> localVarResp = getRewardAssignment1WithHttpInfo(campaignId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return ApiResponse&lt;LoyaltiesRewardAssignmentsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> getRewardAssignment1WithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Assignment (asynchronously)
     * Retrieve specific reward assignment.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRewardAssignment1Async(String campaignId, String assignmentId, final ApiCallback<LoyaltiesRewardAssignmentsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardAssignment2
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRewardAssignment2Call(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardAssignment2ValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRewardAssignment2(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardAssignment2(Async)");
        }

        return getRewardAssignment2Call(campaignId, assignmentId, _callback);

    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.  &gt; 📘 Alternative endpoint &gt; &gt; This endpoint is an alternative to this [endpoint](ref:get-reward-assignment-2). 
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return LoyaltiesRewardsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesRewardsGetResponseBody getRewardAssignment2(String campaignId, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardsGetResponseBody> localVarResp = getRewardAssignment2WithHttpInfo(campaignId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.  &gt; 📘 Alternative endpoint &gt; &gt; This endpoint is an alternative to this [endpoint](ref:get-reward-assignment-2). 
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return ApiResponse&lt;LoyaltiesRewardsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesRewardsGetResponseBody> getRewardAssignment2WithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardAssignment2ValidateBeforeCall(campaignId, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Assignment (asynchronously)
     * Retrieve specific reward assignment.  &gt; 📘 Alternative endpoint &gt; &gt; This endpoint is an alternative to this [endpoint](ref:get-reward-assignment-2). 
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specific reward assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRewardAssignment2Async(String campaignId, String assignmentId, final ApiCallback<LoyaltiesRewardsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardAssignment2ValidateBeforeCall(campaignId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardDetails
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns reward details in the context of a loyalty *campaign* and reward assignment ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRewardDetailsCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardDetailsValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRewardDetails(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardDetails(Async)");
        }

        return getRewardDetailsCall(campaignId, assignmentId, _callback);

    }

    /**
     * Get Reward Details
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return LoyaltiesRewardAssignmentsRewardGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns reward details in the context of a loyalty *campaign* and reward assignment ID. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesRewardAssignmentsRewardGetResponseBody getRewardDetails(String campaignId, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> localVarResp = getRewardDetailsWithHttpInfo(campaignId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Details
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return ApiResponse&lt;LoyaltiesRewardAssignmentsRewardGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns reward details in the context of a loyalty *campaign* and reward assignment ID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> getRewardDetailsWithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardDetailsValidateBeforeCall(campaignId, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsRewardGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Details (asynchronously)
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns reward details in the context of a loyalty *campaign* and reward assignment ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRewardDetailsAsync(String campaignId, String assignmentId, final ApiCallback<LoyaltiesRewardAssignmentsRewardGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardDetailsValidateBeforeCall(campaignId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsRewardGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyCardTransactions
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyCardTransactionsCall(String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/transactions"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyCardTransactionsValidateBeforeCall(String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listLoyaltyCardTransactions(Async)");
        }

        return listLoyaltyCardTransactionsCall(memberId, limit, page, _callback);

    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return LoyaltiesMembersTransactionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersTransactionsListResponseBody listLoyaltyCardTransactions(String memberId, Integer limit, Integer page) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResp = listLoyaltyCardTransactionsWithHttpInfo(memberId, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersTransactionsListResponseBody> listLoyaltyCardTransactionsWithHttpInfo(String memberId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyCardTransactionsValidateBeforeCall(memberId, limit, page, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Card Transactions (asynchronously)
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyCardTransactionsAsync(String memberId, Integer limit, Integer page, final ApiCallback<LoyaltiesMembersTransactionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyCardTransactionsValidateBeforeCall(memberId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyCardTransactions1
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyCardTransactions1Call(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/transactions"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyCardTransactions1ValidateBeforeCall(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyCardTransactions1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listLoyaltyCardTransactions1(Async)");
        }

        return listLoyaltyCardTransactions1Call(campaignId, memberId, limit, page, _callback);

    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return LoyaltiesMembersTransactionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersTransactionsListResponseBody listLoyaltyCardTransactions1(String campaignId, String memberId, Integer limit, Integer page) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResp = listLoyaltyCardTransactions1WithHttpInfo(campaignId, memberId, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersTransactionsListResponseBody> listLoyaltyCardTransactions1WithHttpInfo(String campaignId, String memberId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, limit, page, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Card Transactions (asynchronously)
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty card transaction objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyCardTransactions1Async(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback<LoyaltiesMembersTransactionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyTierEarningRules
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of earning rules for a given tier. The object for each earning rule also contains information about how the points are calculated; this includes mapping. If a specific multiplier was used to calculate points for a given tier, then the &#x60;loyalty.points&#x60; parameter will account for this calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyTierEarningRulesCall(String campaignId, String loyaltyTierId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "loyaltyTierId" + "}", localVarApiClient.escapeString(loyaltyTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyTierEarningRulesValidateBeforeCall(String campaignId, String loyaltyTierId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyTierEarningRules(Async)");
        }

        // verify the required parameter 'loyaltyTierId' is set
        if (loyaltyTierId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyTierId' when calling listLoyaltyTierEarningRules(Async)");
        }

        return listLoyaltyTierEarningRulesCall(campaignId, loyaltyTierId, limit, page, _callback);

    }

    /**
     * List Loyalty Tier Earning Rules
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return LoyaltiesTiersEarningRulesListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of earning rules for a given tier. The object for each earning rule also contains information about how the points are calculated; this includes mapping. If a specific multiplier was used to calculate points for a given tier, then the &#x60;loyalty.points&#x60; parameter will account for this calculation. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesTiersEarningRulesListResponseBody listLoyaltyTierEarningRules(String campaignId, String loyaltyTierId, Integer limit, Integer page) throws ApiException {
        ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> localVarResp = listLoyaltyTierEarningRulesWithHttpInfo(campaignId, loyaltyTierId, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Tier Earning Rules
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return ApiResponse&lt;LoyaltiesTiersEarningRulesListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of earning rules for a given tier. The object for each earning rule also contains information about how the points are calculated; this includes mapping. If a specific multiplier was used to calculate points for a given tier, then the &#x60;loyalty.points&#x60; parameter will account for this calculation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> listLoyaltyTierEarningRulesWithHttpInfo(String campaignId, String loyaltyTierId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyTierEarningRulesValidateBeforeCall(campaignId, loyaltyTierId, limit, page, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersEarningRulesListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Tier Earning Rules (asynchronously)
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of earning rules for a given tier. The object for each earning rule also contains information about how the points are calculated; this includes mapping. If a specific multiplier was used to calculate points for a given tier, then the &#x60;loyalty.points&#x60; parameter will account for this calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyTierEarningRulesAsync(String campaignId, String loyaltyTierId, Integer limit, Integer page, final ApiCallback<LoyaltiesTiersEarningRulesListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyTierEarningRulesValidateBeforeCall(campaignId, loyaltyTierId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersEarningRulesListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyTierRewards
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty tier reward objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyTierRewardsCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "loyaltyTierId" + "}", localVarApiClient.escapeString(loyaltyTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyTierRewardsValidateBeforeCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyTierRewards(Async)");
        }

        // verify the required parameter 'loyaltyTierId' is set
        if (loyaltyTierId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyTierId' when calling listLoyaltyTierRewards(Async)");
        }

        return listLoyaltyTierRewardsCall(campaignId, loyaltyTierId, _callback);

    }

    /**
     * List Loyalty Tier Rewards
     * Get available rewards for a given tier.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return LoyaltiesTiersRewardsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty tier reward objects. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesTiersRewardsListResponseBody listLoyaltyTierRewards(String campaignId, String loyaltyTierId) throws ApiException {
        ApiResponse<LoyaltiesTiersRewardsListResponseBody> localVarResp = listLoyaltyTierRewardsWithHttpInfo(campaignId, loyaltyTierId);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Tier Rewards
     * Get available rewards for a given tier.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return ApiResponse&lt;LoyaltiesTiersRewardsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty tier reward objects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesTiersRewardsListResponseBody> listLoyaltyTierRewardsWithHttpInfo(String campaignId, String loyaltyTierId) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyTierRewardsValidateBeforeCall(campaignId, loyaltyTierId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersRewardsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Tier Rewards (asynchronously)
     * Get available rewards for a given tier.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of loyalty tier reward objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyTierRewardsAsync(String campaignId, String loyaltyTierId, final ApiCallback<LoyaltiesTiersRewardsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyTierRewardsValidateBeforeCall(campaignId, loyaltyTierId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersRewardsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyTiers
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty tier objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyTiersCall(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyTiersValidateBeforeCall(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyTiers(Async)");
        }

        return listLoyaltyTiersCall(campaignId, limit, order, _callback);

    }

    /**
     * List Loyalty Tiers
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return LoyaltiesTiersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty tier objects. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesTiersListResponseBody listLoyaltyTiers(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order) throws ApiException {
        ApiResponse<LoyaltiesTiersListResponseBody> localVarResp = listLoyaltyTiersWithHttpInfo(campaignId, limit, order);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Tiers
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;LoyaltiesTiersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty tier objects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesTiersListResponseBody> listLoyaltyTiersWithHttpInfo(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyTiersValidateBeforeCall(campaignId, limit, order, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Tiers (asynchronously)
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty tier objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoyaltyTiersAsync(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order, final ApiCallback<LoyaltiesTiersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyTiersValidateBeforeCall(campaignId, limit, order, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberLoyaltyTier
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a data array containing the member&#39;s loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMemberLoyaltyTierCall(String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/tiers"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberLoyaltyTierValidateBeforeCall(String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberLoyaltyTier(Async)");
        }

        return listMemberLoyaltyTierCall(memberId, _callback);

    }

    /**
     * List Member&#39;s Loyalty Tiers
     * Retrieve member tiers using the loyalty card ID.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @return LoyaltiesMembersTiersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a data array containing the member&#39;s loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersTiersListResponseBody listMemberLoyaltyTier(String memberId) throws ApiException {
        ApiResponse<LoyaltiesMembersTiersListResponseBody> localVarResp = listMemberLoyaltyTierWithHttpInfo(memberId);
        return localVarResp.getData();
    }

    /**
     * List Member&#39;s Loyalty Tiers
     * Retrieve member tiers using the loyalty card ID.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @return ApiResponse&lt;LoyaltiesMembersTiersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a data array containing the member&#39;s loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersTiersListResponseBody> listMemberLoyaltyTierWithHttpInfo(String memberId) throws ApiException {
        okhttp3.Call localVarCall = listMemberLoyaltyTierValidateBeforeCall(memberId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTiersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member&#39;s Loyalty Tiers (asynchronously)
     * Retrieve member tiers using the loyalty card ID.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a data array containing the member&#39;s loyalty tiers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMemberLoyaltyTierAsync(String memberId, final ApiCallback<LoyaltiesMembersTiersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberLoyaltyTierValidateBeforeCall(memberId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTiersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberRewards
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to &#x60;true&#x60; to return rewards which the customer can actually afford. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of rewards for the given &#x60;member_id&#x60;. Returns a filtered list if the query parameter &#x60;affordable_only&#x60; is set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMemberRewardsCall(String memberId, Boolean affordableOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/rewards"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (affordableOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affordable_only", affordableOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberRewardsValidateBeforeCall(String memberId, Boolean affordableOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberRewards(Async)");
        }

        return listMemberRewardsCall(memberId, affordableOnly, _callback);

    }

    /**
     * List Member Rewards
     * Retrieves the list of rewards that the given customer (identified by &#x60;member_id&#x60;, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.    You can use the &#x60;affordable_only&#x60; parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).    Please note that rewards that are disabled (i.e. set to &#x60;Not Available&#x60; in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to &#x60;true&#x60; to return rewards which the customer can actually afford. (optional)
     * @return LoyaltiesMembersRewardsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of rewards for the given &#x60;member_id&#x60;. Returns a filtered list if the query parameter &#x60;affordable_only&#x60; is set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersRewardsListResponseBody listMemberRewards(String memberId, Boolean affordableOnly) throws ApiException {
        ApiResponse<LoyaltiesMembersRewardsListResponseBody> localVarResp = listMemberRewardsWithHttpInfo(memberId, affordableOnly);
        return localVarResp.getData();
    }

    /**
     * List Member Rewards
     * Retrieves the list of rewards that the given customer (identified by &#x60;member_id&#x60;, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.    You can use the &#x60;affordable_only&#x60; parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).    Please note that rewards that are disabled (i.e. set to &#x60;Not Available&#x60; in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to &#x60;true&#x60; to return rewards which the customer can actually afford. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersRewardsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of rewards for the given &#x60;member_id&#x60;. Returns a filtered list if the query parameter &#x60;affordable_only&#x60; is set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersRewardsListResponseBody> listMemberRewardsWithHttpInfo(String memberId, Boolean affordableOnly) throws ApiException {
        okhttp3.Call localVarCall = listMemberRewardsValidateBeforeCall(memberId, affordableOnly, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRewardsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member Rewards (asynchronously)
     * Retrieves the list of rewards that the given customer (identified by &#x60;member_id&#x60;, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.    You can use the &#x60;affordable_only&#x60; parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).    Please note that rewards that are disabled (i.e. set to &#x60;Not Available&#x60; in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to &#x60;true&#x60; to return rewards which the customer can actually afford. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of rewards for the given &#x60;member_id&#x60;. Returns a filtered list if the query parameter &#x60;affordable_only&#x60; is set to &#x60;true&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMemberRewardsAsync(String memberId, Boolean affordableOnly, final ApiCallback<LoyaltiesMembersRewardsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberRewardsValidateBeforeCall(memberId, affordableOnly, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRewardsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPointsExpiration
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty points expiration buckets along with an expiration date if the points are due to expire. No expiration date parameter is returned if the loyalty points bucket does not expire. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPointsExpirationCall(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/points-expiration"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPointsExpirationValidateBeforeCall(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listPointsExpiration(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listPointsExpiration(Async)");
        }

        return listPointsExpirationCall(campaignId, memberId, limit, page, _callback);

    }

    /**
     * Get Points Expiration
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the [Exports API](ref:create-export) to retrieve a list of both &#x60;ACTIVE&#x60; and &#x60;EXPIRED&#x60; point buckets.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return LoyaltiesMembersPointsExpirationListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty points expiration buckets along with an expiration date if the points are due to expire. No expiration date parameter is returned if the loyalty points bucket does not expire. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersPointsExpirationListResponseBody listPointsExpiration(String campaignId, String memberId, Integer limit, Integer page) throws ApiException {
        ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> localVarResp = listPointsExpirationWithHttpInfo(campaignId, memberId, limit, page);
        return localVarResp.getData();
    }

    /**
     * Get Points Expiration
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the [Exports API](ref:create-export) to retrieve a list of both &#x60;ACTIVE&#x60; and &#x60;EXPIRED&#x60; point buckets.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersPointsExpirationListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty points expiration buckets along with an expiration date if the points are due to expire. No expiration date parameter is returned if the loyalty points bucket does not expire. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> listPointsExpirationWithHttpInfo(String campaignId, String memberId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listPointsExpirationValidateBeforeCall(campaignId, memberId, limit, page, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPointsExpirationListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Points Expiration (asynchronously)
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the [Exports API](ref:create-export) to retrieve a list of both &#x60;ACTIVE&#x60; and &#x60;EXPIRED&#x60; point buckets.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the &#x60;name&#x60; of the campaign as the path parameter value, e.g., &#x60;Loyalty%20Campaign&#x60;.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is &#x60;1&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of loyalty points expiration buckets along with an expiration date if the points are due to expire. No expiration date parameter is returned if the loyalty points bucket does not expire. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPointsExpirationAsync(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback<LoyaltiesMembersPointsExpirationListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPointsExpirationValidateBeforeCall(campaignId, memberId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPointsExpirationListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redeemReward
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redeemRewardCall(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersRedemptionRedeemRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/redemption"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemRewardValidateBeforeCall(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling redeemReward(Async)");
        }

        return redeemRewardCall(memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);

    }

    /**
     * Redeem Reward
     * &lt;!-- theme: info --&gt; &gt; 📘 Alternative endpoint &gt; &gt; This endpoint is an alternative to this &lt;!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1redemption) --&gt;[endpoint](ref:redeem-reward-1). The URL was re-designed to allow you to redeem a reward without having to provide the &#x60;campaignId&#x60; as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return LoyaltiesMembersRedemptionRedeemResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersRedemptionRedeemResponseBody redeemReward(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResp = redeemRewardWithHttpInfo(memberId, loyaltiesMembersRedemptionRedeemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Redeem Reward
     * &lt;!-- theme: info --&gt; &gt; 📘 Alternative endpoint &gt; &gt; This endpoint is an alternative to this &lt;!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1redemption) --&gt;[endpoint](ref:redeem-reward-1). The URL was re-designed to allow you to redeem a reward without having to provide the &#x60;campaignId&#x60; as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersRedemptionRedeemResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> redeemRewardWithHttpInfo(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = redeemRewardValidateBeforeCall(memberId, loyaltiesMembersRedemptionRedeemRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redeem Reward (asynchronously)
     * &lt;!-- theme: info --&gt; &gt; 📘 Alternative endpoint &gt; &gt; This endpoint is an alternative to this &lt;!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1redemption) --&gt;[endpoint](ref:redeem-reward-1). The URL was re-designed to allow you to redeem a reward without having to provide the &#x60;campaignId&#x60; as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redeemRewardAsync(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback<LoyaltiesMembersRedemptionRedeemResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemRewardValidateBeforeCall(memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redeemReward1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redeemReward1Call(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersRedemptionRedeemRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/redemption"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemReward1ValidateBeforeCall(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling redeemReward1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling redeemReward1(Async)");
        }

        return redeemReward1Call(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);

    }

    /**
     * Redeem Reward
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return LoyaltiesMembersRedemptionRedeemResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersRedemptionRedeemResponseBody redeemReward1(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResp = redeemReward1WithHttpInfo(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Redeem Reward
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersRedemptionRedeemResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> redeemReward1WithHttpInfo(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = redeemReward1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redeem Reward (asynchronously)
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a redemption object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redeemReward1Async(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback<LoyaltiesMembersRedemptionRedeemResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemReward1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferPoints
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty card object for the loaded loyalty card, ie. the one that that points were transferred to from the other cards(s). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferPointsCall(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesTransferPoints;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/transfers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferPointsValidateBeforeCall(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling transferPoints(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling transferPoints(Async)");
        }

        return transferPointsCall(campaignId, memberId, loyaltiesTransferPoints, _callback);

    }

    /**
     * Transfer Loyalty Points
     * Transfer points between different loyalty cards. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @return LoyaltiesMembersTransfersCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty card object for the loaded loyalty card, ie. the one that that points were transferred to from the other cards(s). </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersTransfersCreateResponseBody transferPoints(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints) throws ApiException {
        ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> localVarResp = transferPointsWithHttpInfo(campaignId, memberId, loyaltiesTransferPoints);
        return localVarResp.getData();
    }

    /**
     * Transfer Loyalty Points
     * Transfer points between different loyalty cards. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransfersCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty card object for the loaded loyalty card, ie. the one that that points were transferred to from the other cards(s). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> transferPointsWithHttpInfo(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints) throws ApiException {
        okhttp3.Call localVarCall = transferPointsValidateBeforeCall(campaignId, memberId, loyaltiesTransferPoints, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransfersCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Loyalty Points (asynchronously)
     * Transfer points between different loyalty cards. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a loyalty card object for the loaded loyalty card, ie. the one that that points were transferred to from the other cards(s). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferPointsAsync(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints, final ApiCallback<LoyaltiesMembersTransfersCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferPointsValidateBeforeCall(campaignId, memberId, loyaltiesTransferPoints, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransfersCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoyaltyCardBalance
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoyaltyCardBalanceCall(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersBalanceUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/balance"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoyaltyCardBalanceValidateBeforeCall(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateLoyaltyCardBalance(Async)");
        }

        return updateLoyaltyCardBalanceCall(memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);

    }

    /**
     * Add or Remove Loyalty Card Balance
     * This method gives adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.   &lt;!-- theme: info --&gt;   &gt;🚧 Async Action &gt;  &gt; This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.   &gt; 📘 Alternative endpoint &gt; This endpoint is an alternative to this &lt;!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1balance) --&gt;[endpoint](ref:update-loyalty-card-balance-1). The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the &#x60;campaignId&#x60; as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return LoyaltiesMembersBalanceUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersBalanceUpdateResponseBody updateLoyaltyCardBalance(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResp = updateLoyaltyCardBalanceWithHttpInfo(memberId, loyaltiesMembersBalanceUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Add or Remove Loyalty Card Balance
     * This method gives adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.   &lt;!-- theme: info --&gt;   &gt;🚧 Async Action &gt;  &gt; This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.   &gt; 📘 Alternative endpoint &gt; This endpoint is an alternative to this &lt;!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1balance) --&gt;[endpoint](ref:update-loyalty-card-balance-1). The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the &#x60;campaignId&#x60; as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersBalanceUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> updateLoyaltyCardBalanceWithHttpInfo(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateLoyaltyCardBalanceValidateBeforeCall(memberId, loyaltiesMembersBalanceUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or Remove Loyalty Card Balance (asynchronously)
     * This method gives adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.   &lt;!-- theme: info --&gt;   &gt;🚧 Async Action &gt;  &gt; This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.   &gt; 📘 Alternative endpoint &gt; This endpoint is an alternative to this &lt;!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1balance) --&gt;[endpoint](ref:update-loyalty-card-balance-1). The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the &#x60;campaignId&#x60; as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoyaltyCardBalanceAsync(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback<LoyaltiesMembersBalanceUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoyaltyCardBalanceValidateBeforeCall(memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoyaltyCardBalance1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoyaltyCardBalance1Call(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersBalanceUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/balance"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoyaltyCardBalance1ValidateBeforeCall(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateLoyaltyCardBalance1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateLoyaltyCardBalance1(Async)");
        }

        return updateLoyaltyCardBalance1Call(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);

    }

    /**
     * Add or Remove Loyalty Card Balance
     * This method adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.    &gt;🚧 Async Action &gt;  &gt; This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return LoyaltiesMembersBalanceUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltiesMembersBalanceUpdateResponseBody updateLoyaltyCardBalance1(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResp = updateLoyaltyCardBalance1WithHttpInfo(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Add or Remove Loyalty Card Balance
     * This method adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.    &gt;🚧 Async Action &gt;  &gt; This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersBalanceUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> updateLoyaltyCardBalance1WithHttpInfo(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateLoyaltyCardBalance1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or Remove Loyalty Card Balance (asynchronously)
     * This method adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.    &gt;🚧 Async Action &gt;  &gt; This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a balance object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoyaltyCardBalance1Async(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback<LoyaltiesMembersBalanceUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoyaltyCardBalance1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
