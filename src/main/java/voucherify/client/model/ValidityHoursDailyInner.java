/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Defines the reccuring period(s) when the resource will be active.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ValidityHoursDailyInner {
  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Gets or Sets daysOfWeek
   */
  @JsonAdapter(DaysOfWeekEnum.Adapter.class)
  public enum DaysOfWeekEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6);

    private Integer value;

    DaysOfWeekEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DaysOfWeekEnum fromValue(Integer value) {
      for (DaysOfWeekEnum b : DaysOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DaysOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DaysOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DaysOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DaysOfWeekEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DAYS_OF_WEEK = "days_of_week";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_WEEK)
  private List<DaysOfWeekEnum> daysOfWeek;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expiration_time";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private String expirationTime;

  public ValidityHoursDailyInner() {
  }

  public ValidityHoursDailyInner startTime(String startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Defines the starting hour of validity in the HH:mm format. The resource is *inactive before* this time.
   * @return startTime
  **/
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }


  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public ValidityHoursDailyInner daysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public ValidityHoursDailyInner addDaysOfWeekItem(DaysOfWeekEnum daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

   /**
   * Integer array corresponding to the particular days of the week in which the resource is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60;  Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday
   * @return daysOfWeek
  **/
  @javax.annotation.Nullable
  public List<DaysOfWeekEnum> getDaysOfWeek() {
    return daysOfWeek;
  }


  public void setDaysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }


  public ValidityHoursDailyInner expirationTime(String expirationTime) {
    
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * Defines the ending hour of validity in the HH:mm format. The resource is *inactive after* this time.
   * @return expirationTime
  **/
  @javax.annotation.Nullable
  public String getExpirationTime() {
    return expirationTime;
  }


  public void setExpirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidityHoursDailyInner validityHoursDailyInner = (ValidityHoursDailyInner) o;
    return Objects.equals(this.startTime, validityHoursDailyInner.startTime) &&
        Objects.equals(this.daysOfWeek, validityHoursDailyInner.daysOfWeek) &&
        Objects.equals(this.expirationTime, validityHoursDailyInner.expirationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, daysOfWeek, expirationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidityHoursDailyInner {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start_time");
    openapiFields.add("days_of_week");
    openapiFields.add("expiration_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValidityHoursDailyInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidityHoursDailyInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidityHoursDailyInner is not found in the empty JSON string", ValidityHoursDailyInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidityHoursDailyInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidityHoursDailyInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("start_time") != null && !jsonObj.get("start_time").isJsonNull()) && !jsonObj.get("start_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_time").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("days_of_week") != null && !jsonObj.get("days_of_week").isJsonNull() && !jsonObj.get("days_of_week").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_of_week` to be an array in the JSON string but got `%s`", jsonObj.get("days_of_week").toString()));
      }
      if ((jsonObj.get("expiration_time") != null && !jsonObj.get("expiration_time").isJsonNull()) && !jsonObj.get("expiration_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidityHoursDailyInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidityHoursDailyInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidityHoursDailyInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidityHoursDailyInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidityHoursDailyInner>() {
           @Override
           public void write(JsonWriter out, ValidityHoursDailyInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidityHoursDailyInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValidityHoursDailyInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValidityHoursDailyInner
  * @throws IOException if the JSON string is invalid with respect to ValidityHoursDailyInner
  */
  public static ValidityHoursDailyInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidityHoursDailyInner.class);
  }

 /**
  * Convert an instance of ValidityHoursDailyInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

