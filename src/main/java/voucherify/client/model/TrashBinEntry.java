/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Resource moved to the bin, i.e. a campaign, product, SKU, or voucher.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class TrashBinEntry {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_BY_USER_ID = "deleted_by_user_id";
  @SerializedName(SERIALIZED_NAME_DELETED_BY_USER_ID)
  private String deletedByUserId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resource_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  /**
   * Type of the resource moved to the bin.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    CAMPAIGN("campaign"),
    
    PRODUCT("product"),
    
    SKU("sku"),
    
    VOUCHER("voucher");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resource_name";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_RESOURCE_PARENT_ID = "resource_parent_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PARENT_ID)
  private String resourceParentId;

  /**
   * The type of the object represented by JSON. It is equal to the &#x60;resource_type&#x60;.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    CAMPAIGN("campaign"),
    
    PRODUCT("product"),
    
    SKU("sku"),
    
    VOUCHER("voucher");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object;

  public TrashBinEntry() {
  }

  public TrashBinEntry id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the trash bin entry. It should not be confused with the ID of the resource moved to the bin.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public TrashBinEntry createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the resource was moved to the bin. The value for this parameter is shown in the ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TrashBinEntry deletedByUserId(String deletedByUserId) {
    
    this.deletedByUserId = deletedByUserId;
    return this;
  }

   /**
   * Unique identifier of the user who moved the resource to the bin. It returns a user ID if the resource was moved to the bin through an action in the website. It returns a &#x60;null&#x60; if the resource was deleted through the API.
   * @return deletedByUserId
  **/
  @javax.annotation.Nullable
  public String getDeletedByUserId() {
    return deletedByUserId;
  }


  public void setDeletedByUserId(String deletedByUserId) {
    this.deletedByUserId = deletedByUserId;
  }


  public TrashBinEntry resourceId(String resourceId) {
    
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Unique identifier of the resource moved to the bin, i.e. an ID of a campaign, product, SKU, or voucher.
   * @return resourceId
  **/
  @javax.annotation.Nonnull
  public String getResourceId() {
    return resourceId;
  }


  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public TrashBinEntry resourceType(ResourceTypeEnum resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Type of the resource moved to the bin.
   * @return resourceType
  **/
  @javax.annotation.Nonnull
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }


  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public TrashBinEntry resourceName(String resourceName) {
    
    this.resourceName = resourceName;
    return this;
  }

   /**
   * Name of the resouce moved to the bin. It is the name of the campaign, product or SKU, or the voucher code.
   * @return resourceName
  **/
  @javax.annotation.Nonnull
  public String getResourceName() {
    return resourceName;
  }


  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public TrashBinEntry resourceParentId(String resourceParentId) {
    
    this.resourceParentId = resourceParentId;
    return this;
  }

   /**
   * Unique identifier of the parent resource. For a voucher, it is a campaign ID, except for standalone vouchers. For an SKU, it is the product ID. It returns &#x60;null&#x60; for campaigns and base products.
   * @return resourceParentId
  **/
  @javax.annotation.Nullable
  public String getResourceParentId() {
    return resourceParentId;
  }


  public void setResourceParentId(String resourceParentId) {
    this.resourceParentId = resourceParentId;
  }


  public TrashBinEntry _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * The type of the object represented by JSON. It is equal to the &#x60;resource_type&#x60;.
   * @return _object
  **/
  @javax.annotation.Nonnull
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrashBinEntry trashBinEntry = (TrashBinEntry) o;
    return Objects.equals(this.id, trashBinEntry.id) &&
        Objects.equals(this.createdAt, trashBinEntry.createdAt) &&
        Objects.equals(this.deletedByUserId, trashBinEntry.deletedByUserId) &&
        Objects.equals(this.resourceId, trashBinEntry.resourceId) &&
        Objects.equals(this.resourceType, trashBinEntry.resourceType) &&
        Objects.equals(this.resourceName, trashBinEntry.resourceName) &&
        Objects.equals(this.resourceParentId, trashBinEntry.resourceParentId) &&
        Objects.equals(this._object, trashBinEntry._object);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, deletedByUserId, resourceId, resourceType, resourceName, resourceParentId, _object);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrashBinEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedByUserId: ").append(toIndentedString(deletedByUserId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceParentId: ").append(toIndentedString(resourceParentId)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("created_at");
    openapiFields.add("deleted_by_user_id");
    openapiFields.add("resource_id");
    openapiFields.add("resource_type");
    openapiFields.add("resource_name");
    openapiFields.add("resource_parent_id");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("resource_id");
    openapiRequiredFields.add("resource_type");
    openapiRequiredFields.add("resource_name");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TrashBinEntry
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrashBinEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrashBinEntry is not found in the empty JSON string", TrashBinEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrashBinEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrashBinEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrashBinEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("deleted_by_user_id") != null && !jsonObj.get("deleted_by_user_id").isJsonNull()) && !jsonObj.get("deleted_by_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_by_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_by_user_id").toString()));
      }
      if (!jsonObj.get("resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_id").toString()));
      }
      if (!jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("resource_type");

        if (objectElement != null && !objectElement.isJsonNull()) {
          ResourceTypeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `resource_type` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("resource_type") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a valid element of ResourceTypeEnum enum got `%s` instead", jsonObj.get("resource_type").toString()));
        }
      }
      if (!jsonObj.get("resource_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_name").toString()));
      }
      if ((jsonObj.get("resource_parent_id") != null && !jsonObj.get("resource_parent_id").isJsonNull()) && !jsonObj.get("resource_parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_parent_id").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("object");

        if (objectElement != null && !objectElement.isJsonNull()) {
          ObjectEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `object` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("object") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `object` to be a valid element of ObjectEnum enum got `%s` instead", jsonObj.get("object").toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrashBinEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrashBinEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrashBinEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrashBinEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<TrashBinEntry>() {
           @Override
           public void write(JsonWriter out, TrashBinEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrashBinEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrashBinEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrashBinEntry
  * @throws IOException if the JSON string is invalid with respect to TrashBinEntry
  */
  public static TrashBinEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrashBinEntry.class);
  }

 /**
  * Convert an instance of TrashBinEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

