/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import voucherify.client.model.Any;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * FiltersCondition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-17T09:00:53.208514+01:00[Europe/Warsaw]")
public class FiltersCondition {
  public static final String SERIALIZED_NAME_$_IN = "$in";
  @SerializedName(SERIALIZED_NAME_$_IN)
  private Any $in;

  public static final String SERIALIZED_NAME_$_NOT_IN = "$not_in";
  @SerializedName(SERIALIZED_NAME_$_NOT_IN)
  private Any $notIn;

  public static final String SERIALIZED_NAME_$_IS = "$is";
  @SerializedName(SERIALIZED_NAME_$_IS)
  private Any $is;

  public static final String SERIALIZED_NAME_$_IS_DAYS_AGO = "$is_days_ago";
  @SerializedName(SERIALIZED_NAME_$_IS_DAYS_AGO)
  private Any $isDaysAgo;

  public static final String SERIALIZED_NAME_$_IS_DAYS_IN_FUTURE = "$is_days_in_future";
  @SerializedName(SERIALIZED_NAME_$_IS_DAYS_IN_FUTURE)
  private Any $isDaysInFuture;

  public static final String SERIALIZED_NAME_$_IS_NOT = "$is_not";
  @SerializedName(SERIALIZED_NAME_$_IS_NOT)
  private Any $isNot;

  public static final String SERIALIZED_NAME_$_HAS_VALUE = "$has_value";
  @SerializedName(SERIALIZED_NAME_$_HAS_VALUE)
  private Any $hasValue;

  public static final String SERIALIZED_NAME_$_IS_UNKNOWN = "$is_unknown";
  @SerializedName(SERIALIZED_NAME_$_IS_UNKNOWN)
  private Any $isUnknown;

  public static final String SERIALIZED_NAME_$_CONTAINS = "$contains";
  @SerializedName(SERIALIZED_NAME_$_CONTAINS)
  private Any $contains;

  public static final String SERIALIZED_NAME_$_NOT_CONTAIN = "$not_contain";
  @SerializedName(SERIALIZED_NAME_$_NOT_CONTAIN)
  private Any $notContain;

  public static final String SERIALIZED_NAME_$_STARTS_WITH = "$starts_with";
  @SerializedName(SERIALIZED_NAME_$_STARTS_WITH)
  private Any $startsWith;

  public static final String SERIALIZED_NAME_$_ENDS_WITH = "$ends_with";
  @SerializedName(SERIALIZED_NAME_$_ENDS_WITH)
  private Any $endsWith;

  public static final String SERIALIZED_NAME_$_MORE_THAN = "$more_than";
  @SerializedName(SERIALIZED_NAME_$_MORE_THAN)
  private Any $moreThan;

  public static final String SERIALIZED_NAME_$_LESS_THAN = "$less_than";
  @SerializedName(SERIALIZED_NAME_$_LESS_THAN)
  private Any $lessThan;

  public static final String SERIALIZED_NAME_$_MORE_THAN_AGO = "$more_than_ago";
  @SerializedName(SERIALIZED_NAME_$_MORE_THAN_AGO)
  private Any $moreThanAgo;

  public static final String SERIALIZED_NAME_$_LESS_THAN_AGO = "$less_than_ago";
  @SerializedName(SERIALIZED_NAME_$_LESS_THAN_AGO)
  private Any $lessThanAgo;

  public static final String SERIALIZED_NAME_$_MORE_THAN_FUTURE = "$more_than_future";
  @SerializedName(SERIALIZED_NAME_$_MORE_THAN_FUTURE)
  private Any $moreThanFuture;

  public static final String SERIALIZED_NAME_$_LESS_THAN_FUTURE = "$less_than_future";
  @SerializedName(SERIALIZED_NAME_$_LESS_THAN_FUTURE)
  private Any $lessThanFuture;

  public static final String SERIALIZED_NAME_$_MORE_THAN_EQUAL = "$more_than_equal";
  @SerializedName(SERIALIZED_NAME_$_MORE_THAN_EQUAL)
  private Any $moreThanEqual;

  public static final String SERIALIZED_NAME_$_LESS_THAN_EQUAL = "$less_than_equal";
  @SerializedName(SERIALIZED_NAME_$_LESS_THAN_EQUAL)
  private Any $lessThanEqual;

  public static final String SERIALIZED_NAME_$_AFTER = "$after";
  @SerializedName(SERIALIZED_NAME_$_AFTER)
  private Any $after;

  public static final String SERIALIZED_NAME_$_BEFORE = "$before";
  @SerializedName(SERIALIZED_NAME_$_BEFORE)
  private Any $before;

  public static final String SERIALIZED_NAME_$_COUNT = "$count";
  @SerializedName(SERIALIZED_NAME_$_COUNT)
  private Any $count;

  public static final String SERIALIZED_NAME_$_COUNT_LESS = "$count_less";
  @SerializedName(SERIALIZED_NAME_$_COUNT_LESS)
  private Any $countLess;

  public static final String SERIALIZED_NAME_$_COUNT_MORE = "$count_more";
  @SerializedName(SERIALIZED_NAME_$_COUNT_MORE)
  private Any $countMore;

  public FiltersCondition() {
  }

  public FiltersCondition $in(Any $in) {
    
    this.$in = $in;
    return this;
  }

   /**
   * Get $in
   * @return $in
  **/
  @javax.annotation.Nullable
  public Any get$In() {
    return $in;
  }


  public void set$In(Any $in) {
    this.$in = $in;
  }


  public FiltersCondition $notIn(Any $notIn) {
    
    this.$notIn = $notIn;
    return this;
  }

   /**
   * Get $notIn
   * @return $notIn
  **/
  @javax.annotation.Nullable
  public Any get$NotIn() {
    return $notIn;
  }


  public void set$NotIn(Any $notIn) {
    this.$notIn = $notIn;
  }


  public FiltersCondition $is(Any $is) {
    
    this.$is = $is;
    return this;
  }

   /**
   * Get $is
   * @return $is
  **/
  @javax.annotation.Nullable
  public Any get$Is() {
    return $is;
  }


  public void set$Is(Any $is) {
    this.$is = $is;
  }


  public FiltersCondition $isDaysAgo(Any $isDaysAgo) {
    
    this.$isDaysAgo = $isDaysAgo;
    return this;
  }

   /**
   * Get $isDaysAgo
   * @return $isDaysAgo
  **/
  @javax.annotation.Nullable
  public Any get$IsDaysAgo() {
    return $isDaysAgo;
  }


  public void set$IsDaysAgo(Any $isDaysAgo) {
    this.$isDaysAgo = $isDaysAgo;
  }


  public FiltersCondition $isDaysInFuture(Any $isDaysInFuture) {
    
    this.$isDaysInFuture = $isDaysInFuture;
    return this;
  }

   /**
   * Get $isDaysInFuture
   * @return $isDaysInFuture
  **/
  @javax.annotation.Nullable
  public Any get$IsDaysInFuture() {
    return $isDaysInFuture;
  }


  public void set$IsDaysInFuture(Any $isDaysInFuture) {
    this.$isDaysInFuture = $isDaysInFuture;
  }


  public FiltersCondition $isNot(Any $isNot) {
    
    this.$isNot = $isNot;
    return this;
  }

   /**
   * Get $isNot
   * @return $isNot
  **/
  @javax.annotation.Nullable
  public Any get$IsNot() {
    return $isNot;
  }


  public void set$IsNot(Any $isNot) {
    this.$isNot = $isNot;
  }


  public FiltersCondition $hasValue(Any $hasValue) {
    
    this.$hasValue = $hasValue;
    return this;
  }

   /**
   * Get $hasValue
   * @return $hasValue
  **/
  @javax.annotation.Nullable
  public Any get$HasValue() {
    return $hasValue;
  }


  public void set$HasValue(Any $hasValue) {
    this.$hasValue = $hasValue;
  }


  public FiltersCondition $isUnknown(Any $isUnknown) {
    
    this.$isUnknown = $isUnknown;
    return this;
  }

   /**
   * Get $isUnknown
   * @return $isUnknown
  **/
  @javax.annotation.Nullable
  public Any get$IsUnknown() {
    return $isUnknown;
  }


  public void set$IsUnknown(Any $isUnknown) {
    this.$isUnknown = $isUnknown;
  }


  public FiltersCondition $contains(Any $contains) {
    
    this.$contains = $contains;
    return this;
  }

   /**
   * Get $contains
   * @return $contains
  **/
  @javax.annotation.Nullable
  public Any get$Contains() {
    return $contains;
  }


  public void set$Contains(Any $contains) {
    this.$contains = $contains;
  }


  public FiltersCondition $notContain(Any $notContain) {
    
    this.$notContain = $notContain;
    return this;
  }

   /**
   * Get $notContain
   * @return $notContain
  **/
  @javax.annotation.Nullable
  public Any get$NotContain() {
    return $notContain;
  }


  public void set$NotContain(Any $notContain) {
    this.$notContain = $notContain;
  }


  public FiltersCondition $startsWith(Any $startsWith) {
    
    this.$startsWith = $startsWith;
    return this;
  }

   /**
   * Get $startsWith
   * @return $startsWith
  **/
  @javax.annotation.Nullable
  public Any get$StartsWith() {
    return $startsWith;
  }


  public void set$StartsWith(Any $startsWith) {
    this.$startsWith = $startsWith;
  }


  public FiltersCondition $endsWith(Any $endsWith) {
    
    this.$endsWith = $endsWith;
    return this;
  }

   /**
   * Get $endsWith
   * @return $endsWith
  **/
  @javax.annotation.Nullable
  public Any get$EndsWith() {
    return $endsWith;
  }


  public void set$EndsWith(Any $endsWith) {
    this.$endsWith = $endsWith;
  }


  public FiltersCondition $moreThan(Any $moreThan) {
    
    this.$moreThan = $moreThan;
    return this;
  }

   /**
   * Get $moreThan
   * @return $moreThan
  **/
  @javax.annotation.Nullable
  public Any get$MoreThan() {
    return $moreThan;
  }


  public void set$MoreThan(Any $moreThan) {
    this.$moreThan = $moreThan;
  }


  public FiltersCondition $lessThan(Any $lessThan) {
    
    this.$lessThan = $lessThan;
    return this;
  }

   /**
   * Get $lessThan
   * @return $lessThan
  **/
  @javax.annotation.Nullable
  public Any get$LessThan() {
    return $lessThan;
  }


  public void set$LessThan(Any $lessThan) {
    this.$lessThan = $lessThan;
  }


  public FiltersCondition $moreThanAgo(Any $moreThanAgo) {
    
    this.$moreThanAgo = $moreThanAgo;
    return this;
  }

   /**
   * Get $moreThanAgo
   * @return $moreThanAgo
  **/
  @javax.annotation.Nullable
  public Any get$MoreThanAgo() {
    return $moreThanAgo;
  }


  public void set$MoreThanAgo(Any $moreThanAgo) {
    this.$moreThanAgo = $moreThanAgo;
  }


  public FiltersCondition $lessThanAgo(Any $lessThanAgo) {
    
    this.$lessThanAgo = $lessThanAgo;
    return this;
  }

   /**
   * Get $lessThanAgo
   * @return $lessThanAgo
  **/
  @javax.annotation.Nullable
  public Any get$LessThanAgo() {
    return $lessThanAgo;
  }


  public void set$LessThanAgo(Any $lessThanAgo) {
    this.$lessThanAgo = $lessThanAgo;
  }


  public FiltersCondition $moreThanFuture(Any $moreThanFuture) {
    
    this.$moreThanFuture = $moreThanFuture;
    return this;
  }

   /**
   * Get $moreThanFuture
   * @return $moreThanFuture
  **/
  @javax.annotation.Nullable
  public Any get$MoreThanFuture() {
    return $moreThanFuture;
  }


  public void set$MoreThanFuture(Any $moreThanFuture) {
    this.$moreThanFuture = $moreThanFuture;
  }


  public FiltersCondition $lessThanFuture(Any $lessThanFuture) {
    
    this.$lessThanFuture = $lessThanFuture;
    return this;
  }

   /**
   * Get $lessThanFuture
   * @return $lessThanFuture
  **/
  @javax.annotation.Nullable
  public Any get$LessThanFuture() {
    return $lessThanFuture;
  }


  public void set$LessThanFuture(Any $lessThanFuture) {
    this.$lessThanFuture = $lessThanFuture;
  }


  public FiltersCondition $moreThanEqual(Any $moreThanEqual) {
    
    this.$moreThanEqual = $moreThanEqual;
    return this;
  }

   /**
   * Get $moreThanEqual
   * @return $moreThanEqual
  **/
  @javax.annotation.Nullable
  public Any get$MoreThanEqual() {
    return $moreThanEqual;
  }


  public void set$MoreThanEqual(Any $moreThanEqual) {
    this.$moreThanEqual = $moreThanEqual;
  }


  public FiltersCondition $lessThanEqual(Any $lessThanEqual) {
    
    this.$lessThanEqual = $lessThanEqual;
    return this;
  }

   /**
   * Get $lessThanEqual
   * @return $lessThanEqual
  **/
  @javax.annotation.Nullable
  public Any get$LessThanEqual() {
    return $lessThanEqual;
  }


  public void set$LessThanEqual(Any $lessThanEqual) {
    this.$lessThanEqual = $lessThanEqual;
  }


  public FiltersCondition $after(Any $after) {
    
    this.$after = $after;
    return this;
  }

   /**
   * Get $after
   * @return $after
  **/
  @javax.annotation.Nullable
  public Any get$After() {
    return $after;
  }


  public void set$After(Any $after) {
    this.$after = $after;
  }


  public FiltersCondition $before(Any $before) {
    
    this.$before = $before;
    return this;
  }

   /**
   * Get $before
   * @return $before
  **/
  @javax.annotation.Nullable
  public Any get$Before() {
    return $before;
  }


  public void set$Before(Any $before) {
    this.$before = $before;
  }


  public FiltersCondition $count(Any $count) {
    
    this.$count = $count;
    return this;
  }

   /**
   * Get $count
   * @return $count
  **/
  @javax.annotation.Nullable
  public Any get$Count() {
    return $count;
  }


  public void set$Count(Any $count) {
    this.$count = $count;
  }


  public FiltersCondition $countLess(Any $countLess) {
    
    this.$countLess = $countLess;
    return this;
  }

   /**
   * Get $countLess
   * @return $countLess
  **/
  @javax.annotation.Nullable
  public Any get$CountLess() {
    return $countLess;
  }


  public void set$CountLess(Any $countLess) {
    this.$countLess = $countLess;
  }


  public FiltersCondition $countMore(Any $countMore) {
    
    this.$countMore = $countMore;
    return this;
  }

   /**
   * Get $countMore
   * @return $countMore
  **/
  @javax.annotation.Nullable
  public Any get$CountMore() {
    return $countMore;
  }


  public void set$CountMore(Any $countMore) {
    this.$countMore = $countMore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FiltersCondition filtersCondition = (FiltersCondition) o;
    return Objects.equals(this.$in, filtersCondition.$in) &&
        Objects.equals(this.$notIn, filtersCondition.$notIn) &&
        Objects.equals(this.$is, filtersCondition.$is) &&
        Objects.equals(this.$isDaysAgo, filtersCondition.$isDaysAgo) &&
        Objects.equals(this.$isDaysInFuture, filtersCondition.$isDaysInFuture) &&
        Objects.equals(this.$isNot, filtersCondition.$isNot) &&
        Objects.equals(this.$hasValue, filtersCondition.$hasValue) &&
        Objects.equals(this.$isUnknown, filtersCondition.$isUnknown) &&
        Objects.equals(this.$contains, filtersCondition.$contains) &&
        Objects.equals(this.$notContain, filtersCondition.$notContain) &&
        Objects.equals(this.$startsWith, filtersCondition.$startsWith) &&
        Objects.equals(this.$endsWith, filtersCondition.$endsWith) &&
        Objects.equals(this.$moreThan, filtersCondition.$moreThan) &&
        Objects.equals(this.$lessThan, filtersCondition.$lessThan) &&
        Objects.equals(this.$moreThanAgo, filtersCondition.$moreThanAgo) &&
        Objects.equals(this.$lessThanAgo, filtersCondition.$lessThanAgo) &&
        Objects.equals(this.$moreThanFuture, filtersCondition.$moreThanFuture) &&
        Objects.equals(this.$lessThanFuture, filtersCondition.$lessThanFuture) &&
        Objects.equals(this.$moreThanEqual, filtersCondition.$moreThanEqual) &&
        Objects.equals(this.$lessThanEqual, filtersCondition.$lessThanEqual) &&
        Objects.equals(this.$after, filtersCondition.$after) &&
        Objects.equals(this.$before, filtersCondition.$before) &&
        Objects.equals(this.$count, filtersCondition.$count) &&
        Objects.equals(this.$countLess, filtersCondition.$countLess) &&
        Objects.equals(this.$countMore, filtersCondition.$countMore);
  }

  @Override
  public int hashCode() {
    return Objects.hash($in, $notIn, $is, $isDaysAgo, $isDaysInFuture, $isNot, $hasValue, $isUnknown, $contains, $notContain, $startsWith, $endsWith, $moreThan, $lessThan, $moreThanAgo, $lessThanAgo, $moreThanFuture, $lessThanFuture, $moreThanEqual, $lessThanEqual, $after, $before, $count, $countLess, $countMore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FiltersCondition {\n");
    sb.append("    $in: ").append(toIndentedString($in)).append("\n");
    sb.append("    $notIn: ").append(toIndentedString($notIn)).append("\n");
    sb.append("    $is: ").append(toIndentedString($is)).append("\n");
    sb.append("    $isDaysAgo: ").append(toIndentedString($isDaysAgo)).append("\n");
    sb.append("    $isDaysInFuture: ").append(toIndentedString($isDaysInFuture)).append("\n");
    sb.append("    $isNot: ").append(toIndentedString($isNot)).append("\n");
    sb.append("    $hasValue: ").append(toIndentedString($hasValue)).append("\n");
    sb.append("    $isUnknown: ").append(toIndentedString($isUnknown)).append("\n");
    sb.append("    $contains: ").append(toIndentedString($contains)).append("\n");
    sb.append("    $notContain: ").append(toIndentedString($notContain)).append("\n");
    sb.append("    $startsWith: ").append(toIndentedString($startsWith)).append("\n");
    sb.append("    $endsWith: ").append(toIndentedString($endsWith)).append("\n");
    sb.append("    $moreThan: ").append(toIndentedString($moreThan)).append("\n");
    sb.append("    $lessThan: ").append(toIndentedString($lessThan)).append("\n");
    sb.append("    $moreThanAgo: ").append(toIndentedString($moreThanAgo)).append("\n");
    sb.append("    $lessThanAgo: ").append(toIndentedString($lessThanAgo)).append("\n");
    sb.append("    $moreThanFuture: ").append(toIndentedString($moreThanFuture)).append("\n");
    sb.append("    $lessThanFuture: ").append(toIndentedString($lessThanFuture)).append("\n");
    sb.append("    $moreThanEqual: ").append(toIndentedString($moreThanEqual)).append("\n");
    sb.append("    $lessThanEqual: ").append(toIndentedString($lessThanEqual)).append("\n");
    sb.append("    $after: ").append(toIndentedString($after)).append("\n");
    sb.append("    $before: ").append(toIndentedString($before)).append("\n");
    sb.append("    $count: ").append(toIndentedString($count)).append("\n");
    sb.append("    $countLess: ").append(toIndentedString($countLess)).append("\n");
    sb.append("    $countMore: ").append(toIndentedString($countMore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$in");
    openapiFields.add("$not_in");
    openapiFields.add("$is");
    openapiFields.add("$is_days_ago");
    openapiFields.add("$is_days_in_future");
    openapiFields.add("$is_not");
    openapiFields.add("$has_value");
    openapiFields.add("$is_unknown");
    openapiFields.add("$contains");
    openapiFields.add("$not_contain");
    openapiFields.add("$starts_with");
    openapiFields.add("$ends_with");
    openapiFields.add("$more_than");
    openapiFields.add("$less_than");
    openapiFields.add("$more_than_ago");
    openapiFields.add("$less_than_ago");
    openapiFields.add("$more_than_future");
    openapiFields.add("$less_than_future");
    openapiFields.add("$more_than_equal");
    openapiFields.add("$less_than_equal");
    openapiFields.add("$after");
    openapiFields.add("$before");
    openapiFields.add("$count");
    openapiFields.add("$count_less");
    openapiFields.add("$count_more");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FiltersCondition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FiltersCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FiltersCondition is not found in the empty JSON string", FiltersCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FiltersCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FiltersCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `$in`
      if (jsonObj.get("$in") != null && !jsonObj.get("$in").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$in"));
      }
      // validate the optional field `$not_in`
      if (jsonObj.get("$not_in") != null && !jsonObj.get("$not_in").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$not_in"));
      }
      // validate the optional field `$is`
      if (jsonObj.get("$is") != null && !jsonObj.get("$is").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$is"));
      }
      // validate the optional field `$is_days_ago`
      if (jsonObj.get("$is_days_ago") != null && !jsonObj.get("$is_days_ago").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$is_days_ago"));
      }
      // validate the optional field `$is_days_in_future`
      if (jsonObj.get("$is_days_in_future") != null && !jsonObj.get("$is_days_in_future").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$is_days_in_future"));
      }
      // validate the optional field `$is_not`
      if (jsonObj.get("$is_not") != null && !jsonObj.get("$is_not").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$is_not"));
      }
      // validate the optional field `$has_value`
      if (jsonObj.get("$has_value") != null && !jsonObj.get("$has_value").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$has_value"));
      }
      // validate the optional field `$is_unknown`
      if (jsonObj.get("$is_unknown") != null && !jsonObj.get("$is_unknown").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$is_unknown"));
      }
      // validate the optional field `$contains`
      if (jsonObj.get("$contains") != null && !jsonObj.get("$contains").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$contains"));
      }
      // validate the optional field `$not_contain`
      if (jsonObj.get("$not_contain") != null && !jsonObj.get("$not_contain").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$not_contain"));
      }
      // validate the optional field `$starts_with`
      if (jsonObj.get("$starts_with") != null && !jsonObj.get("$starts_with").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$starts_with"));
      }
      // validate the optional field `$ends_with`
      if (jsonObj.get("$ends_with") != null && !jsonObj.get("$ends_with").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$ends_with"));
      }
      // validate the optional field `$more_than`
      if (jsonObj.get("$more_than") != null && !jsonObj.get("$more_than").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$more_than"));
      }
      // validate the optional field `$less_than`
      if (jsonObj.get("$less_than") != null && !jsonObj.get("$less_than").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$less_than"));
      }
      // validate the optional field `$more_than_ago`
      if (jsonObj.get("$more_than_ago") != null && !jsonObj.get("$more_than_ago").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$more_than_ago"));
      }
      // validate the optional field `$less_than_ago`
      if (jsonObj.get("$less_than_ago") != null && !jsonObj.get("$less_than_ago").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$less_than_ago"));
      }
      // validate the optional field `$more_than_future`
      if (jsonObj.get("$more_than_future") != null && !jsonObj.get("$more_than_future").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$more_than_future"));
      }
      // validate the optional field `$less_than_future`
      if (jsonObj.get("$less_than_future") != null && !jsonObj.get("$less_than_future").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$less_than_future"));
      }
      // validate the optional field `$more_than_equal`
      if (jsonObj.get("$more_than_equal") != null && !jsonObj.get("$more_than_equal").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$more_than_equal"));
      }
      // validate the optional field `$less_than_equal`
      if (jsonObj.get("$less_than_equal") != null && !jsonObj.get("$less_than_equal").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$less_than_equal"));
      }
      // validate the optional field `$after`
      if (jsonObj.get("$after") != null && !jsonObj.get("$after").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$after"));
      }
      // validate the optional field `$before`
      if (jsonObj.get("$before") != null && !jsonObj.get("$before").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$before"));
      }
      // validate the optional field `$count`
      if (jsonObj.get("$count") != null && !jsonObj.get("$count").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$count"));
      }
      // validate the optional field `$count_less`
      if (jsonObj.get("$count_less") != null && !jsonObj.get("$count_less").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$count_less"));
      }
      // validate the optional field `$count_more`
      if (jsonObj.get("$count_more") != null && !jsonObj.get("$count_more").isJsonNull()) {
        Any.validateJsonElement(jsonObj.get("$count_more"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FiltersCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FiltersCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FiltersCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FiltersCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<FiltersCondition>() {
           @Override
           public void write(JsonWriter out, FiltersCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FiltersCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FiltersCondition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FiltersCondition
  * @throws IOException if the JSON string is invalid with respect to FiltersCondition
  */
  public static FiltersCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FiltersCondition.class);
  }

 /**
  * Convert an instance of FiltersCondition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

