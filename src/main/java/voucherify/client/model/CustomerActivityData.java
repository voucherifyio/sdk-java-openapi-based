/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import voucherify.client.model.CustomEvent;
import voucherify.client.model.EarningRule;
import voucherify.client.model.EventCustomerActiveCampaignFailed;
import voucherify.client.model.EventCustomerActiveCampaignRecovered;
import voucherify.client.model.EventCustomerActiveCampaignSent;
import voucherify.client.model.EventCustomerBatchFailed;
import voucherify.client.model.EventCustomerBatchRecovered;
import voucherify.client.model.EventCustomerBatchSent;
import voucherify.client.model.EventCustomerBrazeFailed;
import voucherify.client.model.EventCustomerBrazeRecovered;
import voucherify.client.model.EventCustomerBrazeSent;
import voucherify.client.model.EventCustomerConfirmed;
import voucherify.client.model.EventCustomerConfirmedUnconfirmedCustomer;
import voucherify.client.model.EventCustomerConsentsGiven;
import voucherify.client.model.EventCustomerConsentsRevoked;
import voucherify.client.model.EventCustomerCreated;
import voucherify.client.model.EventCustomerCustomEvent;
import voucherify.client.model.EventCustomerDeleted;
import voucherify.client.model.EventCustomerEmailFailed;
import voucherify.client.model.EventCustomerEmailRecovered;
import voucherify.client.model.EventCustomerEmailSent;
import voucherify.client.model.EventCustomerGiftVoucherBalanceAdded;
import voucherify.client.model.EventCustomerIntercomFailed;
import voucherify.client.model.EventCustomerIntercomRecovered;
import voucherify.client.model.EventCustomerIntercomSent;
import voucherify.client.model.EventCustomerKlaviyoFailed;
import voucherify.client.model.EventCustomerKlaviyoRecovered;
import voucherify.client.model.EventCustomerKlaviyoSent;
import voucherify.client.model.EventCustomerLoyaltyCardPointsAdded;
import voucherify.client.model.EventCustomerLoyaltyCardPointsTransferred;
import voucherify.client.model.EventCustomerLoyaltyTierDowngraded;
import voucherify.client.model.EventCustomerLoyaltyTierExpirationChanged;
import voucherify.client.model.EventCustomerLoyaltyTierJoined;
import voucherify.client.model.EventCustomerLoyaltyTierLeft;
import voucherify.client.model.EventCustomerLoyaltyTierProlonged;
import voucherify.client.model.EventCustomerLoyaltyTierUpgraded;
import voucherify.client.model.EventCustomerLoyaltyUpdated;
import voucherify.client.model.EventCustomerMailchimpFailed;
import voucherify.client.model.EventCustomerMailchimpRecovered;
import voucherify.client.model.EventCustomerMailchimpSent;
import voucherify.client.model.EventCustomerOrderCanceled;
import voucherify.client.model.EventCustomerOrderCreated;
import voucherify.client.model.EventCustomerOrderFulfilled;
import voucherify.client.model.EventCustomerOrderPaid;
import voucherify.client.model.EventCustomerOrderProcessing;
import voucherify.client.model.EventCustomerOrderUpdated;
import voucherify.client.model.EventCustomerPublicationFailed;
import voucherify.client.model.EventCustomerPublicationSucceeded;
import voucherify.client.model.EventCustomerRedemptionFailed;
import voucherify.client.model.EventCustomerRedemptionRollbackFailed;
import voucherify.client.model.EventCustomerRedemptionRollbackSucceeded;
import voucherify.client.model.EventCustomerRedemptionSucceeded;
import voucherify.client.model.EventCustomerReferred;
import voucherify.client.model.EventCustomerRewardRedemptionsCompleted;
import voucherify.client.model.EventCustomerRewardRedemptionsCreated;
import voucherify.client.model.EventCustomerRewardRedemptionsPending;
import voucherify.client.model.EventCustomerRewardRedemptionsRolledBack;
import voucherify.client.model.EventCustomerRewarded;
import voucherify.client.model.EventCustomerRewardedLoyaltyPoints;
import voucherify.client.model.EventCustomerSegmentEntered;
import voucherify.client.model.EventCustomerSegmentLeft;
import voucherify.client.model.EventCustomerShopifyFailed;
import voucherify.client.model.EventCustomerShopifyRecovered;
import voucherify.client.model.EventCustomerShopifySent;
import voucherify.client.model.EventCustomerSmsFailed;
import voucherify.client.model.EventCustomerSmsRecovered;
import voucherify.client.model.EventCustomerSmsSent;
import voucherify.client.model.EventCustomerUpdated;
import voucherify.client.model.EventCustomerValidationFailed;
import voucherify.client.model.EventCustomerValidationSucceeded;
import voucherify.client.model.EventCustomerVoucherDeleted;
import voucherify.client.model.EventCustomerVouchersLoyaltyPointsExpired;
import voucherify.client.model.LoyaltyTier;
import voucherify.client.model.OrderCalculated;
import voucherify.client.model.RedemptionInternal;
import voucherify.client.model.RewardAssignment;
import voucherify.client.model.SimpleCampaign;
import voucherify.client.model.SimpleConsent;
import voucherify.client.model.SimpleCustomer;
import voucherify.client.model.SimplePromotionTier;
import voucherify.client.model.SimpleRedemption;
import voucherify.client.model.SimpleRedemptionRewardResult;
import voucherify.client.model.SimpleReferralTier;
import voucherify.client.model.SimpleSegment;
import voucherify.client.model.SimpleVoucher;
import voucherify.client.model.ValidationEntity;
import voucherify.client.model.VoucherTransaction;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import voucherify.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-17T09:00:53.208514+01:00[Europe/Warsaw]")
public class CustomerActivityData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CustomerActivityData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CustomerActivityData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CustomerActivityData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EventCustomerConfirmed> adapterEventCustomerConfirmed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerConfirmed.class));
            final TypeAdapter<EventCustomerCreated> adapterEventCustomerCreated = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerCreated.class));
            final TypeAdapter<EventCustomerUpdated> adapterEventCustomerUpdated = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerUpdated.class));
            final TypeAdapter<EventCustomerDeleted> adapterEventCustomerDeleted = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerDeleted.class));
            final TypeAdapter<EventCustomerReferred> adapterEventCustomerReferred = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerReferred.class));
            final TypeAdapter<EventCustomerCustomEvent> adapterEventCustomerCustomEvent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerCustomEvent.class));
            final TypeAdapter<EventCustomerSegmentEntered> adapterEventCustomerSegmentEntered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerSegmentEntered.class));
            final TypeAdapter<EventCustomerSegmentLeft> adapterEventCustomerSegmentLeft = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerSegmentLeft.class));
            final TypeAdapter<EventCustomerSmsSent> adapterEventCustomerSmsSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerSmsSent.class));
            final TypeAdapter<EventCustomerSmsRecovered> adapterEventCustomerSmsRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerSmsRecovered.class));
            final TypeAdapter<EventCustomerSmsFailed> adapterEventCustomerSmsFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerSmsFailed.class));
            final TypeAdapter<EventCustomerEmailSent> adapterEventCustomerEmailSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerEmailSent.class));
            final TypeAdapter<EventCustomerEmailRecovered> adapterEventCustomerEmailRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerEmailRecovered.class));
            final TypeAdapter<EventCustomerEmailFailed> adapterEventCustomerEmailFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerEmailFailed.class));
            final TypeAdapter<EventCustomerActiveCampaignSent> adapterEventCustomerActiveCampaignSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerActiveCampaignSent.class));
            final TypeAdapter<EventCustomerActiveCampaignRecovered> adapterEventCustomerActiveCampaignRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerActiveCampaignRecovered.class));
            final TypeAdapter<EventCustomerActiveCampaignFailed> adapterEventCustomerActiveCampaignFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerActiveCampaignFailed.class));
            final TypeAdapter<EventCustomerBrazeSent> adapterEventCustomerBrazeSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerBrazeSent.class));
            final TypeAdapter<EventCustomerBrazeRecovered> adapterEventCustomerBrazeRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerBrazeRecovered.class));
            final TypeAdapter<EventCustomerBrazeFailed> adapterEventCustomerBrazeFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerBrazeFailed.class));
            final TypeAdapter<EventCustomerMailchimpSent> adapterEventCustomerMailchimpSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerMailchimpSent.class));
            final TypeAdapter<EventCustomerMailchimpRecovered> adapterEventCustomerMailchimpRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerMailchimpRecovered.class));
            final TypeAdapter<EventCustomerMailchimpFailed> adapterEventCustomerMailchimpFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerMailchimpFailed.class));
            final TypeAdapter<EventCustomerIntercomSent> adapterEventCustomerIntercomSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerIntercomSent.class));
            final TypeAdapter<EventCustomerIntercomRecovered> adapterEventCustomerIntercomRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerIntercomRecovered.class));
            final TypeAdapter<EventCustomerIntercomFailed> adapterEventCustomerIntercomFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerIntercomFailed.class));
            final TypeAdapter<EventCustomerShopifySent> adapterEventCustomerShopifySent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerShopifySent.class));
            final TypeAdapter<EventCustomerShopifyRecovered> adapterEventCustomerShopifyRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerShopifyRecovered.class));
            final TypeAdapter<EventCustomerShopifyFailed> adapterEventCustomerShopifyFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerShopifyFailed.class));
            final TypeAdapter<EventCustomerKlaviyoSent> adapterEventCustomerKlaviyoSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerKlaviyoSent.class));
            final TypeAdapter<EventCustomerKlaviyoRecovered> adapterEventCustomerKlaviyoRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerKlaviyoRecovered.class));
            final TypeAdapter<EventCustomerKlaviyoFailed> adapterEventCustomerKlaviyoFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerKlaviyoFailed.class));
            final TypeAdapter<EventCustomerBatchSent> adapterEventCustomerBatchSent = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerBatchSent.class));
            final TypeAdapter<EventCustomerBatchRecovered> adapterEventCustomerBatchRecovered = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerBatchRecovered.class));
            final TypeAdapter<EventCustomerBatchFailed> adapterEventCustomerBatchFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerBatchFailed.class));
            final TypeAdapter<EventCustomerRewarded> adapterEventCustomerRewarded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRewarded.class));
            final TypeAdapter<EventCustomerRewardedLoyaltyPoints> adapterEventCustomerRewardedLoyaltyPoints = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRewardedLoyaltyPoints.class));
            final TypeAdapter<EventCustomerGiftVoucherBalanceAdded> adapterEventCustomerGiftVoucherBalanceAdded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerGiftVoucherBalanceAdded.class));
            final TypeAdapter<EventCustomerLoyaltyCardPointsAdded> adapterEventCustomerLoyaltyCardPointsAdded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyCardPointsAdded.class));
            final TypeAdapter<EventCustomerLoyaltyCardPointsTransferred> adapterEventCustomerLoyaltyCardPointsTransferred = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyCardPointsTransferred.class));
            final TypeAdapter<EventCustomerVouchersLoyaltyPointsExpired> adapterEventCustomerVouchersLoyaltyPointsExpired = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerVouchersLoyaltyPointsExpired.class));
            final TypeAdapter<EventCustomerVoucherDeleted> adapterEventCustomerVoucherDeleted = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerVoucherDeleted.class));
            final TypeAdapter<EventCustomerPublicationSucceeded> adapterEventCustomerPublicationSucceeded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerPublicationSucceeded.class));
            final TypeAdapter<EventCustomerPublicationFailed> adapterEventCustomerPublicationFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerPublicationFailed.class));
            final TypeAdapter<EventCustomerValidationSucceeded> adapterEventCustomerValidationSucceeded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerValidationSucceeded.class));
            final TypeAdapter<EventCustomerValidationFailed> adapterEventCustomerValidationFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerValidationFailed.class));
            final TypeAdapter<EventCustomerRedemptionSucceeded> adapterEventCustomerRedemptionSucceeded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRedemptionSucceeded.class));
            final TypeAdapter<EventCustomerRedemptionFailed> adapterEventCustomerRedemptionFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRedemptionFailed.class));
            final TypeAdapter<EventCustomerRedemptionRollbackSucceeded> adapterEventCustomerRedemptionRollbackSucceeded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRedemptionRollbackSucceeded.class));
            final TypeAdapter<EventCustomerRedemptionRollbackFailed> adapterEventCustomerRedemptionRollbackFailed = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRedemptionRollbackFailed.class));
            final TypeAdapter<EventCustomerConsentsGiven> adapterEventCustomerConsentsGiven = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerConsentsGiven.class));
            final TypeAdapter<EventCustomerConsentsRevoked> adapterEventCustomerConsentsRevoked = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerConsentsRevoked.class));
            final TypeAdapter<EventCustomerOrderCanceled> adapterEventCustomerOrderCanceled = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerOrderCanceled.class));
            final TypeAdapter<EventCustomerOrderCreated> adapterEventCustomerOrderCreated = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerOrderCreated.class));
            final TypeAdapter<EventCustomerOrderFulfilled> adapterEventCustomerOrderFulfilled = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerOrderFulfilled.class));
            final TypeAdapter<EventCustomerOrderPaid> adapterEventCustomerOrderPaid = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerOrderPaid.class));
            final TypeAdapter<EventCustomerOrderProcessing> adapterEventCustomerOrderProcessing = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerOrderProcessing.class));
            final TypeAdapter<EventCustomerOrderUpdated> adapterEventCustomerOrderUpdated = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerOrderUpdated.class));
            final TypeAdapter<EventCustomerRewardRedemptionsCreated> adapterEventCustomerRewardRedemptionsCreated = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRewardRedemptionsCreated.class));
            final TypeAdapter<EventCustomerRewardRedemptionsPending> adapterEventCustomerRewardRedemptionsPending = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRewardRedemptionsPending.class));
            final TypeAdapter<EventCustomerRewardRedemptionsCompleted> adapterEventCustomerRewardRedemptionsCompleted = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRewardRedemptionsCompleted.class));
            final TypeAdapter<EventCustomerRewardRedemptionsRolledBack> adapterEventCustomerRewardRedemptionsRolledBack = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerRewardRedemptionsRolledBack.class));
            final TypeAdapter<EventCustomerLoyaltyUpdated> adapterEventCustomerLoyaltyUpdated = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyUpdated.class));
            final TypeAdapter<EventCustomerLoyaltyTierUpgraded> adapterEventCustomerLoyaltyTierUpgraded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyTierUpgraded.class));
            final TypeAdapter<EventCustomerLoyaltyTierDowngraded> adapterEventCustomerLoyaltyTierDowngraded = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyTierDowngraded.class));
            final TypeAdapter<EventCustomerLoyaltyTierProlonged> adapterEventCustomerLoyaltyTierProlonged = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyTierProlonged.class));
            final TypeAdapter<EventCustomerLoyaltyTierExpirationChanged> adapterEventCustomerLoyaltyTierExpirationChanged = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyTierExpirationChanged.class));
            final TypeAdapter<EventCustomerLoyaltyTierJoined> adapterEventCustomerLoyaltyTierJoined = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyTierJoined.class));
            final TypeAdapter<EventCustomerLoyaltyTierLeft> adapterEventCustomerLoyaltyTierLeft = gson.getDelegateAdapter(this, TypeToken.get(EventCustomerLoyaltyTierLeft.class));

            return (TypeAdapter<T>) new TypeAdapter<CustomerActivityData>() {
                @Override
                public void write(JsonWriter out, CustomerActivityData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `EventCustomerConfirmed`
                    if (value.getActualInstance() instanceof EventCustomerConfirmed) {
                      JsonElement element = adapterEventCustomerConfirmed.toJsonTree((EventCustomerConfirmed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerCreated`
                    if (value.getActualInstance() instanceof EventCustomerCreated) {
                      JsonElement element = adapterEventCustomerCreated.toJsonTree((EventCustomerCreated)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerUpdated`
                    if (value.getActualInstance() instanceof EventCustomerUpdated) {
                      JsonElement element = adapterEventCustomerUpdated.toJsonTree((EventCustomerUpdated)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerDeleted`
                    if (value.getActualInstance() instanceof EventCustomerDeleted) {
                      JsonElement element = adapterEventCustomerDeleted.toJsonTree((EventCustomerDeleted)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerReferred`
                    if (value.getActualInstance() instanceof EventCustomerReferred) {
                      JsonElement element = adapterEventCustomerReferred.toJsonTree((EventCustomerReferred)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerCustomEvent`
                    if (value.getActualInstance() instanceof EventCustomerCustomEvent) {
                      JsonElement element = adapterEventCustomerCustomEvent.toJsonTree((EventCustomerCustomEvent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerSegmentEntered`
                    if (value.getActualInstance() instanceof EventCustomerSegmentEntered) {
                      JsonElement element = adapterEventCustomerSegmentEntered.toJsonTree((EventCustomerSegmentEntered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerSegmentLeft`
                    if (value.getActualInstance() instanceof EventCustomerSegmentLeft) {
                      JsonElement element = adapterEventCustomerSegmentLeft.toJsonTree((EventCustomerSegmentLeft)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerSmsSent`
                    if (value.getActualInstance() instanceof EventCustomerSmsSent) {
                      JsonElement element = adapterEventCustomerSmsSent.toJsonTree((EventCustomerSmsSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerSmsRecovered`
                    if (value.getActualInstance() instanceof EventCustomerSmsRecovered) {
                      JsonElement element = adapterEventCustomerSmsRecovered.toJsonTree((EventCustomerSmsRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerSmsFailed`
                    if (value.getActualInstance() instanceof EventCustomerSmsFailed) {
                      JsonElement element = adapterEventCustomerSmsFailed.toJsonTree((EventCustomerSmsFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerEmailSent`
                    if (value.getActualInstance() instanceof EventCustomerEmailSent) {
                      JsonElement element = adapterEventCustomerEmailSent.toJsonTree((EventCustomerEmailSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerEmailRecovered`
                    if (value.getActualInstance() instanceof EventCustomerEmailRecovered) {
                      JsonElement element = adapterEventCustomerEmailRecovered.toJsonTree((EventCustomerEmailRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerEmailFailed`
                    if (value.getActualInstance() instanceof EventCustomerEmailFailed) {
                      JsonElement element = adapterEventCustomerEmailFailed.toJsonTree((EventCustomerEmailFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerActiveCampaignSent`
                    if (value.getActualInstance() instanceof EventCustomerActiveCampaignSent) {
                      JsonElement element = adapterEventCustomerActiveCampaignSent.toJsonTree((EventCustomerActiveCampaignSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerActiveCampaignRecovered`
                    if (value.getActualInstance() instanceof EventCustomerActiveCampaignRecovered) {
                      JsonElement element = adapterEventCustomerActiveCampaignRecovered.toJsonTree((EventCustomerActiveCampaignRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerActiveCampaignFailed`
                    if (value.getActualInstance() instanceof EventCustomerActiveCampaignFailed) {
                      JsonElement element = adapterEventCustomerActiveCampaignFailed.toJsonTree((EventCustomerActiveCampaignFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerBrazeSent`
                    if (value.getActualInstance() instanceof EventCustomerBrazeSent) {
                      JsonElement element = adapterEventCustomerBrazeSent.toJsonTree((EventCustomerBrazeSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerBrazeRecovered`
                    if (value.getActualInstance() instanceof EventCustomerBrazeRecovered) {
                      JsonElement element = adapterEventCustomerBrazeRecovered.toJsonTree((EventCustomerBrazeRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerBrazeFailed`
                    if (value.getActualInstance() instanceof EventCustomerBrazeFailed) {
                      JsonElement element = adapterEventCustomerBrazeFailed.toJsonTree((EventCustomerBrazeFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerMailchimpSent`
                    if (value.getActualInstance() instanceof EventCustomerMailchimpSent) {
                      JsonElement element = adapterEventCustomerMailchimpSent.toJsonTree((EventCustomerMailchimpSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerMailchimpRecovered`
                    if (value.getActualInstance() instanceof EventCustomerMailchimpRecovered) {
                      JsonElement element = adapterEventCustomerMailchimpRecovered.toJsonTree((EventCustomerMailchimpRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerMailchimpFailed`
                    if (value.getActualInstance() instanceof EventCustomerMailchimpFailed) {
                      JsonElement element = adapterEventCustomerMailchimpFailed.toJsonTree((EventCustomerMailchimpFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerIntercomSent`
                    if (value.getActualInstance() instanceof EventCustomerIntercomSent) {
                      JsonElement element = adapterEventCustomerIntercomSent.toJsonTree((EventCustomerIntercomSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerIntercomRecovered`
                    if (value.getActualInstance() instanceof EventCustomerIntercomRecovered) {
                      JsonElement element = adapterEventCustomerIntercomRecovered.toJsonTree((EventCustomerIntercomRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerIntercomFailed`
                    if (value.getActualInstance() instanceof EventCustomerIntercomFailed) {
                      JsonElement element = adapterEventCustomerIntercomFailed.toJsonTree((EventCustomerIntercomFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerShopifySent`
                    if (value.getActualInstance() instanceof EventCustomerShopifySent) {
                      JsonElement element = adapterEventCustomerShopifySent.toJsonTree((EventCustomerShopifySent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerShopifyRecovered`
                    if (value.getActualInstance() instanceof EventCustomerShopifyRecovered) {
                      JsonElement element = adapterEventCustomerShopifyRecovered.toJsonTree((EventCustomerShopifyRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerShopifyFailed`
                    if (value.getActualInstance() instanceof EventCustomerShopifyFailed) {
                      JsonElement element = adapterEventCustomerShopifyFailed.toJsonTree((EventCustomerShopifyFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerKlaviyoSent`
                    if (value.getActualInstance() instanceof EventCustomerKlaviyoSent) {
                      JsonElement element = adapterEventCustomerKlaviyoSent.toJsonTree((EventCustomerKlaviyoSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerKlaviyoRecovered`
                    if (value.getActualInstance() instanceof EventCustomerKlaviyoRecovered) {
                      JsonElement element = adapterEventCustomerKlaviyoRecovered.toJsonTree((EventCustomerKlaviyoRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerKlaviyoFailed`
                    if (value.getActualInstance() instanceof EventCustomerKlaviyoFailed) {
                      JsonElement element = adapterEventCustomerKlaviyoFailed.toJsonTree((EventCustomerKlaviyoFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerBatchSent`
                    if (value.getActualInstance() instanceof EventCustomerBatchSent) {
                      JsonElement element = adapterEventCustomerBatchSent.toJsonTree((EventCustomerBatchSent)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerBatchRecovered`
                    if (value.getActualInstance() instanceof EventCustomerBatchRecovered) {
                      JsonElement element = adapterEventCustomerBatchRecovered.toJsonTree((EventCustomerBatchRecovered)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerBatchFailed`
                    if (value.getActualInstance() instanceof EventCustomerBatchFailed) {
                      JsonElement element = adapterEventCustomerBatchFailed.toJsonTree((EventCustomerBatchFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRewarded`
                    if (value.getActualInstance() instanceof EventCustomerRewarded) {
                      JsonElement element = adapterEventCustomerRewarded.toJsonTree((EventCustomerRewarded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRewardedLoyaltyPoints`
                    if (value.getActualInstance() instanceof EventCustomerRewardedLoyaltyPoints) {
                      JsonElement element = adapterEventCustomerRewardedLoyaltyPoints.toJsonTree((EventCustomerRewardedLoyaltyPoints)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerGiftVoucherBalanceAdded`
                    if (value.getActualInstance() instanceof EventCustomerGiftVoucherBalanceAdded) {
                      JsonElement element = adapterEventCustomerGiftVoucherBalanceAdded.toJsonTree((EventCustomerGiftVoucherBalanceAdded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyCardPointsAdded`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyCardPointsAdded) {
                      JsonElement element = adapterEventCustomerLoyaltyCardPointsAdded.toJsonTree((EventCustomerLoyaltyCardPointsAdded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyCardPointsTransferred`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyCardPointsTransferred) {
                      JsonElement element = adapterEventCustomerLoyaltyCardPointsTransferred.toJsonTree((EventCustomerLoyaltyCardPointsTransferred)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerVouchersLoyaltyPointsExpired`
                    if (value.getActualInstance() instanceof EventCustomerVouchersLoyaltyPointsExpired) {
                      JsonElement element = adapterEventCustomerVouchersLoyaltyPointsExpired.toJsonTree((EventCustomerVouchersLoyaltyPointsExpired)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerVoucherDeleted`
                    if (value.getActualInstance() instanceof EventCustomerVoucherDeleted) {
                      JsonElement element = adapterEventCustomerVoucherDeleted.toJsonTree((EventCustomerVoucherDeleted)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerPublicationSucceeded`
                    if (value.getActualInstance() instanceof EventCustomerPublicationSucceeded) {
                      JsonElement element = adapterEventCustomerPublicationSucceeded.toJsonTree((EventCustomerPublicationSucceeded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerPublicationFailed`
                    if (value.getActualInstance() instanceof EventCustomerPublicationFailed) {
                      JsonElement element = adapterEventCustomerPublicationFailed.toJsonTree((EventCustomerPublicationFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerValidationSucceeded`
                    if (value.getActualInstance() instanceof EventCustomerValidationSucceeded) {
                      JsonElement element = adapterEventCustomerValidationSucceeded.toJsonTree((EventCustomerValidationSucceeded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerValidationFailed`
                    if (value.getActualInstance() instanceof EventCustomerValidationFailed) {
                      JsonElement element = adapterEventCustomerValidationFailed.toJsonTree((EventCustomerValidationFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRedemptionSucceeded`
                    if (value.getActualInstance() instanceof EventCustomerRedemptionSucceeded) {
                      JsonElement element = adapterEventCustomerRedemptionSucceeded.toJsonTree((EventCustomerRedemptionSucceeded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRedemptionFailed`
                    if (value.getActualInstance() instanceof EventCustomerRedemptionFailed) {
                      JsonElement element = adapterEventCustomerRedemptionFailed.toJsonTree((EventCustomerRedemptionFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRedemptionRollbackSucceeded`
                    if (value.getActualInstance() instanceof EventCustomerRedemptionRollbackSucceeded) {
                      JsonElement element = adapterEventCustomerRedemptionRollbackSucceeded.toJsonTree((EventCustomerRedemptionRollbackSucceeded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRedemptionRollbackFailed`
                    if (value.getActualInstance() instanceof EventCustomerRedemptionRollbackFailed) {
                      JsonElement element = adapterEventCustomerRedemptionRollbackFailed.toJsonTree((EventCustomerRedemptionRollbackFailed)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerConsentsGiven`
                    if (value.getActualInstance() instanceof EventCustomerConsentsGiven) {
                      JsonElement element = adapterEventCustomerConsentsGiven.toJsonTree((EventCustomerConsentsGiven)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerConsentsRevoked`
                    if (value.getActualInstance() instanceof EventCustomerConsentsRevoked) {
                      JsonElement element = adapterEventCustomerConsentsRevoked.toJsonTree((EventCustomerConsentsRevoked)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerOrderCanceled`
                    if (value.getActualInstance() instanceof EventCustomerOrderCanceled) {
                      JsonElement element = adapterEventCustomerOrderCanceled.toJsonTree((EventCustomerOrderCanceled)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerOrderCreated`
                    if (value.getActualInstance() instanceof EventCustomerOrderCreated) {
                      JsonElement element = adapterEventCustomerOrderCreated.toJsonTree((EventCustomerOrderCreated)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerOrderFulfilled`
                    if (value.getActualInstance() instanceof EventCustomerOrderFulfilled) {
                      JsonElement element = adapterEventCustomerOrderFulfilled.toJsonTree((EventCustomerOrderFulfilled)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerOrderPaid`
                    if (value.getActualInstance() instanceof EventCustomerOrderPaid) {
                      JsonElement element = adapterEventCustomerOrderPaid.toJsonTree((EventCustomerOrderPaid)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerOrderProcessing`
                    if (value.getActualInstance() instanceof EventCustomerOrderProcessing) {
                      JsonElement element = adapterEventCustomerOrderProcessing.toJsonTree((EventCustomerOrderProcessing)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerOrderUpdated`
                    if (value.getActualInstance() instanceof EventCustomerOrderUpdated) {
                      JsonElement element = adapterEventCustomerOrderUpdated.toJsonTree((EventCustomerOrderUpdated)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRewardRedemptionsCreated`
                    if (value.getActualInstance() instanceof EventCustomerRewardRedemptionsCreated) {
                      JsonElement element = adapterEventCustomerRewardRedemptionsCreated.toJsonTree((EventCustomerRewardRedemptionsCreated)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRewardRedemptionsPending`
                    if (value.getActualInstance() instanceof EventCustomerRewardRedemptionsPending) {
                      JsonElement element = adapterEventCustomerRewardRedemptionsPending.toJsonTree((EventCustomerRewardRedemptionsPending)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRewardRedemptionsCompleted`
                    if (value.getActualInstance() instanceof EventCustomerRewardRedemptionsCompleted) {
                      JsonElement element = adapterEventCustomerRewardRedemptionsCompleted.toJsonTree((EventCustomerRewardRedemptionsCompleted)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerRewardRedemptionsRolledBack`
                    if (value.getActualInstance() instanceof EventCustomerRewardRedemptionsRolledBack) {
                      JsonElement element = adapterEventCustomerRewardRedemptionsRolledBack.toJsonTree((EventCustomerRewardRedemptionsRolledBack)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyUpdated`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyUpdated) {
                      JsonElement element = adapterEventCustomerLoyaltyUpdated.toJsonTree((EventCustomerLoyaltyUpdated)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyTierUpgraded`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyTierUpgraded) {
                      JsonElement element = adapterEventCustomerLoyaltyTierUpgraded.toJsonTree((EventCustomerLoyaltyTierUpgraded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyTierDowngraded`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyTierDowngraded) {
                      JsonElement element = adapterEventCustomerLoyaltyTierDowngraded.toJsonTree((EventCustomerLoyaltyTierDowngraded)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyTierProlonged`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyTierProlonged) {
                      JsonElement element = adapterEventCustomerLoyaltyTierProlonged.toJsonTree((EventCustomerLoyaltyTierProlonged)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyTierExpirationChanged`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyTierExpirationChanged) {
                      JsonElement element = adapterEventCustomerLoyaltyTierExpirationChanged.toJsonTree((EventCustomerLoyaltyTierExpirationChanged)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyTierJoined`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyTierJoined) {
                      JsonElement element = adapterEventCustomerLoyaltyTierJoined.toJsonTree((EventCustomerLoyaltyTierJoined)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EventCustomerLoyaltyTierLeft`
                    if (value.getActualInstance() instanceof EventCustomerLoyaltyTierLeft) {
                      JsonElement element = adapterEventCustomerLoyaltyTierLeft.toJsonTree((EventCustomerLoyaltyTierLeft)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired");
                }

                @Override
                public CustomerActivityData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize EventCustomerConfirmed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerConfirmed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerConfirmed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerConfirmed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerConfirmed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerConfirmed'", e);
                    }
                    // deserialize EventCustomerCreated
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerCreated.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerCreated;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerCreated'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerCreated failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerCreated'", e);
                    }
                    // deserialize EventCustomerUpdated
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerUpdated.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerUpdated;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerUpdated'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerUpdated failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerUpdated'", e);
                    }
                    // deserialize EventCustomerDeleted
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerDeleted.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerDeleted;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerDeleted'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerDeleted failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerDeleted'", e);
                    }
                    // deserialize EventCustomerReferred
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerReferred.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerReferred;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerReferred'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerReferred failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerReferred'", e);
                    }
                    // deserialize EventCustomerCustomEvent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerCustomEvent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerCustomEvent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerCustomEvent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerCustomEvent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerCustomEvent'", e);
                    }
                    // deserialize EventCustomerSegmentEntered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerSegmentEntered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerSegmentEntered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerSegmentEntered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerSegmentEntered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerSegmentEntered'", e);
                    }
                    // deserialize EventCustomerSegmentLeft
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerSegmentLeft.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerSegmentLeft;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerSegmentLeft'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerSegmentLeft failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerSegmentLeft'", e);
                    }
                    // deserialize EventCustomerSmsSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerSmsSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerSmsSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerSmsSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerSmsSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerSmsSent'", e);
                    }
                    // deserialize EventCustomerSmsRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerSmsRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerSmsRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerSmsRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerSmsRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerSmsRecovered'", e);
                    }
                    // deserialize EventCustomerSmsFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerSmsFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerSmsFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerSmsFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerSmsFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerSmsFailed'", e);
                    }
                    // deserialize EventCustomerEmailSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerEmailSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerEmailSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerEmailSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerEmailSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerEmailSent'", e);
                    }
                    // deserialize EventCustomerEmailRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerEmailRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerEmailRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerEmailRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerEmailRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerEmailRecovered'", e);
                    }
                    // deserialize EventCustomerEmailFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerEmailFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerEmailFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerEmailFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerEmailFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerEmailFailed'", e);
                    }
                    // deserialize EventCustomerActiveCampaignSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerActiveCampaignSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerActiveCampaignSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerActiveCampaignSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerActiveCampaignSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerActiveCampaignSent'", e);
                    }
                    // deserialize EventCustomerActiveCampaignRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerActiveCampaignRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerActiveCampaignRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerActiveCampaignRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerActiveCampaignRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerActiveCampaignRecovered'", e);
                    }
                    // deserialize EventCustomerActiveCampaignFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerActiveCampaignFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerActiveCampaignFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerActiveCampaignFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerActiveCampaignFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerActiveCampaignFailed'", e);
                    }
                    // deserialize EventCustomerBrazeSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerBrazeSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerBrazeSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerBrazeSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerBrazeSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerBrazeSent'", e);
                    }
                    // deserialize EventCustomerBrazeRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerBrazeRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerBrazeRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerBrazeRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerBrazeRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerBrazeRecovered'", e);
                    }
                    // deserialize EventCustomerBrazeFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerBrazeFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerBrazeFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerBrazeFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerBrazeFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerBrazeFailed'", e);
                    }
                    // deserialize EventCustomerMailchimpSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerMailchimpSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerMailchimpSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerMailchimpSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerMailchimpSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerMailchimpSent'", e);
                    }
                    // deserialize EventCustomerMailchimpRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerMailchimpRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerMailchimpRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerMailchimpRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerMailchimpRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerMailchimpRecovered'", e);
                    }
                    // deserialize EventCustomerMailchimpFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerMailchimpFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerMailchimpFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerMailchimpFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerMailchimpFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerMailchimpFailed'", e);
                    }
                    // deserialize EventCustomerIntercomSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerIntercomSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerIntercomSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerIntercomSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerIntercomSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerIntercomSent'", e);
                    }
                    // deserialize EventCustomerIntercomRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerIntercomRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerIntercomRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerIntercomRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerIntercomRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerIntercomRecovered'", e);
                    }
                    // deserialize EventCustomerIntercomFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerIntercomFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerIntercomFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerIntercomFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerIntercomFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerIntercomFailed'", e);
                    }
                    // deserialize EventCustomerShopifySent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerShopifySent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerShopifySent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerShopifySent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerShopifySent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerShopifySent'", e);
                    }
                    // deserialize EventCustomerShopifyRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerShopifyRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerShopifyRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerShopifyRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerShopifyRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerShopifyRecovered'", e);
                    }
                    // deserialize EventCustomerShopifyFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerShopifyFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerShopifyFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerShopifyFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerShopifyFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerShopifyFailed'", e);
                    }
                    // deserialize EventCustomerKlaviyoSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerKlaviyoSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerKlaviyoSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerKlaviyoSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerKlaviyoSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerKlaviyoSent'", e);
                    }
                    // deserialize EventCustomerKlaviyoRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerKlaviyoRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerKlaviyoRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerKlaviyoRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerKlaviyoRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerKlaviyoRecovered'", e);
                    }
                    // deserialize EventCustomerKlaviyoFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerKlaviyoFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerKlaviyoFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerKlaviyoFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerKlaviyoFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerKlaviyoFailed'", e);
                    }
                    // deserialize EventCustomerBatchSent
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerBatchSent.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerBatchSent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerBatchSent'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerBatchSent failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerBatchSent'", e);
                    }
                    // deserialize EventCustomerBatchRecovered
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerBatchRecovered.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerBatchRecovered;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerBatchRecovered'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerBatchRecovered failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerBatchRecovered'", e);
                    }
                    // deserialize EventCustomerBatchFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerBatchFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerBatchFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerBatchFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerBatchFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerBatchFailed'", e);
                    }
                    // deserialize EventCustomerRewarded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRewarded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRewarded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRewarded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRewarded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRewarded'", e);
                    }
                    // deserialize EventCustomerRewardedLoyaltyPoints
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRewardedLoyaltyPoints.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRewardedLoyaltyPoints;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRewardedLoyaltyPoints'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRewardedLoyaltyPoints failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRewardedLoyaltyPoints'", e);
                    }
                    // deserialize EventCustomerGiftVoucherBalanceAdded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerGiftVoucherBalanceAdded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerGiftVoucherBalanceAdded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerGiftVoucherBalanceAdded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerGiftVoucherBalanceAdded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerGiftVoucherBalanceAdded'", e);
                    }
                    // deserialize EventCustomerLoyaltyCardPointsAdded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyCardPointsAdded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyCardPointsAdded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyCardPointsAdded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyCardPointsAdded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyCardPointsAdded'", e);
                    }
                    // deserialize EventCustomerLoyaltyCardPointsTransferred
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyCardPointsTransferred.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyCardPointsTransferred;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyCardPointsTransferred'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyCardPointsTransferred failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyCardPointsTransferred'", e);
                    }
                    // deserialize EventCustomerVouchersLoyaltyPointsExpired
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerVouchersLoyaltyPointsExpired.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerVouchersLoyaltyPointsExpired;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerVouchersLoyaltyPointsExpired'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerVouchersLoyaltyPointsExpired failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerVouchersLoyaltyPointsExpired'", e);
                    }
                    // deserialize EventCustomerVoucherDeleted
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerVoucherDeleted.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerVoucherDeleted;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerVoucherDeleted'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerVoucherDeleted failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerVoucherDeleted'", e);
                    }
                    // deserialize EventCustomerPublicationSucceeded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerPublicationSucceeded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerPublicationSucceeded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerPublicationSucceeded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerPublicationSucceeded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerPublicationSucceeded'", e);
                    }
                    // deserialize EventCustomerPublicationFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerPublicationFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerPublicationFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerPublicationFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerPublicationFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerPublicationFailed'", e);
                    }
                    // deserialize EventCustomerValidationSucceeded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerValidationSucceeded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerValidationSucceeded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerValidationSucceeded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerValidationSucceeded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerValidationSucceeded'", e);
                    }
                    // deserialize EventCustomerValidationFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerValidationFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerValidationFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerValidationFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerValidationFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerValidationFailed'", e);
                    }
                    // deserialize EventCustomerRedemptionSucceeded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRedemptionSucceeded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRedemptionSucceeded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRedemptionSucceeded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionSucceeded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRedemptionSucceeded'", e);
                    }
                    // deserialize EventCustomerRedemptionFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRedemptionFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRedemptionFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRedemptionFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRedemptionFailed'", e);
                    }
                    // deserialize EventCustomerRedemptionRollbackSucceeded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRedemptionRollbackSucceeded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRedemptionRollbackSucceeded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRedemptionRollbackSucceeded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionRollbackSucceeded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRedemptionRollbackSucceeded'", e);
                    }
                    // deserialize EventCustomerRedemptionRollbackFailed
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRedemptionRollbackFailed.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRedemptionRollbackFailed;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRedemptionRollbackFailed'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionRollbackFailed failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRedemptionRollbackFailed'", e);
                    }
                    // deserialize EventCustomerConsentsGiven
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerConsentsGiven.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerConsentsGiven;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerConsentsGiven'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerConsentsGiven failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerConsentsGiven'", e);
                    }
                    // deserialize EventCustomerConsentsRevoked
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerConsentsRevoked.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerConsentsRevoked;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerConsentsRevoked'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerConsentsRevoked failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerConsentsRevoked'", e);
                    }
                    // deserialize EventCustomerOrderCanceled
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerOrderCanceled.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerOrderCanceled;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerOrderCanceled'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerOrderCanceled failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerOrderCanceled'", e);
                    }
                    // deserialize EventCustomerOrderCreated
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerOrderCreated.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerOrderCreated;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerOrderCreated'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerOrderCreated failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerOrderCreated'", e);
                    }
                    // deserialize EventCustomerOrderFulfilled
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerOrderFulfilled.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerOrderFulfilled;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerOrderFulfilled'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerOrderFulfilled failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerOrderFulfilled'", e);
                    }
                    // deserialize EventCustomerOrderPaid
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerOrderPaid.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerOrderPaid;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerOrderPaid'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerOrderPaid failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerOrderPaid'", e);
                    }
                    // deserialize EventCustomerOrderProcessing
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerOrderProcessing.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerOrderProcessing;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerOrderProcessing'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerOrderProcessing failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerOrderProcessing'", e);
                    }
                    // deserialize EventCustomerOrderUpdated
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerOrderUpdated.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerOrderUpdated;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerOrderUpdated'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerOrderUpdated failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerOrderUpdated'", e);
                    }
                    // deserialize EventCustomerRewardRedemptionsCreated
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRewardRedemptionsCreated.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRewardRedemptionsCreated;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRewardRedemptionsCreated'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsCreated failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRewardRedemptionsCreated'", e);
                    }
                    // deserialize EventCustomerRewardRedemptionsPending
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRewardRedemptionsPending.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRewardRedemptionsPending;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRewardRedemptionsPending'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsPending failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRewardRedemptionsPending'", e);
                    }
                    // deserialize EventCustomerRewardRedemptionsCompleted
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRewardRedemptionsCompleted.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRewardRedemptionsCompleted;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRewardRedemptionsCompleted'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsCompleted failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRewardRedemptionsCompleted'", e);
                    }
                    // deserialize EventCustomerRewardRedemptionsRolledBack
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerRewardRedemptionsRolledBack.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerRewardRedemptionsRolledBack;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerRewardRedemptionsRolledBack'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsRolledBack failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerRewardRedemptionsRolledBack'", e);
                    }
                    // deserialize EventCustomerLoyaltyUpdated
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyUpdated.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyUpdated;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyUpdated'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyUpdated failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyUpdated'", e);
                    }
                    // deserialize EventCustomerLoyaltyTierUpgraded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyTierUpgraded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyTierUpgraded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyTierUpgraded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierUpgraded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyTierUpgraded'", e);
                    }
                    // deserialize EventCustomerLoyaltyTierDowngraded
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyTierDowngraded.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyTierDowngraded;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyTierDowngraded'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierDowngraded failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyTierDowngraded'", e);
                    }
                    // deserialize EventCustomerLoyaltyTierProlonged
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyTierProlonged.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyTierProlonged;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyTierProlonged'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierProlonged failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyTierProlonged'", e);
                    }
                    // deserialize EventCustomerLoyaltyTierExpirationChanged
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyTierExpirationChanged.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyTierExpirationChanged;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyTierExpirationChanged'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierExpirationChanged failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyTierExpirationChanged'", e);
                    }
                    // deserialize EventCustomerLoyaltyTierJoined
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyTierJoined.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyTierJoined;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyTierJoined'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierJoined failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyTierJoined'", e);
                    }
                    // deserialize EventCustomerLoyaltyTierLeft
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EventCustomerLoyaltyTierLeft.validateJsonElement(jsonElement);
                      actualAdapter = adapterEventCustomerLoyaltyTierLeft;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EventCustomerLoyaltyTierLeft'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierLeft failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EventCustomerLoyaltyTierLeft'", e);
                    }

                    if (match == 1) {
                        CustomerActivityData ret = new CustomerActivityData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CustomerActivityData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CustomerActivityData() {
        super("oneOf", Boolean.FALSE);
    }

    public CustomerActivityData(EventCustomerActiveCampaignFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerActiveCampaignRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerActiveCampaignSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerBatchFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerBatchRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerBatchSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerBrazeFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerBrazeRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerBrazeSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerConfirmed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerConsentsGiven o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerConsentsRevoked o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerCreated o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerCustomEvent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerDeleted o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerEmailFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerEmailRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerEmailSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerGiftVoucherBalanceAdded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerIntercomFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerIntercomRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerIntercomSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerKlaviyoFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerKlaviyoRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerKlaviyoSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyCardPointsAdded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyCardPointsTransferred o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyTierDowngraded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyTierExpirationChanged o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyTierJoined o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyTierLeft o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyTierProlonged o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyTierUpgraded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerLoyaltyUpdated o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerMailchimpFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerMailchimpRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerMailchimpSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerOrderCanceled o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerOrderCreated o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerOrderFulfilled o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerOrderPaid o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerOrderProcessing o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerOrderUpdated o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerPublicationFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerPublicationSucceeded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRedemptionFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRedemptionRollbackFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRedemptionRollbackSucceeded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRedemptionSucceeded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerReferred o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRewardRedemptionsCompleted o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRewardRedemptionsCreated o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRewardRedemptionsPending o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRewardRedemptionsRolledBack o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRewarded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerRewardedLoyaltyPoints o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerSegmentEntered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerSegmentLeft o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerShopifyFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerShopifyRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerShopifySent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerSmsFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerSmsRecovered o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerSmsSent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerUpdated o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerValidationFailed o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerValidationSucceeded o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerVoucherDeleted o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CustomerActivityData(EventCustomerVouchersLoyaltyPointsExpired o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EventCustomerConfirmed", EventCustomerConfirmed.class);
        schemas.put("EventCustomerCreated", EventCustomerCreated.class);
        schemas.put("EventCustomerUpdated", EventCustomerUpdated.class);
        schemas.put("EventCustomerDeleted", EventCustomerDeleted.class);
        schemas.put("EventCustomerReferred", EventCustomerReferred.class);
        schemas.put("EventCustomerCustomEvent", EventCustomerCustomEvent.class);
        schemas.put("EventCustomerSegmentEntered", EventCustomerSegmentEntered.class);
        schemas.put("EventCustomerSegmentLeft", EventCustomerSegmentLeft.class);
        schemas.put("EventCustomerSmsSent", EventCustomerSmsSent.class);
        schemas.put("EventCustomerSmsRecovered", EventCustomerSmsRecovered.class);
        schemas.put("EventCustomerSmsFailed", EventCustomerSmsFailed.class);
        schemas.put("EventCustomerEmailSent", EventCustomerEmailSent.class);
        schemas.put("EventCustomerEmailRecovered", EventCustomerEmailRecovered.class);
        schemas.put("EventCustomerEmailFailed", EventCustomerEmailFailed.class);
        schemas.put("EventCustomerActiveCampaignSent", EventCustomerActiveCampaignSent.class);
        schemas.put("EventCustomerActiveCampaignRecovered", EventCustomerActiveCampaignRecovered.class);
        schemas.put("EventCustomerActiveCampaignFailed", EventCustomerActiveCampaignFailed.class);
        schemas.put("EventCustomerBrazeSent", EventCustomerBrazeSent.class);
        schemas.put("EventCustomerBrazeRecovered", EventCustomerBrazeRecovered.class);
        schemas.put("EventCustomerBrazeFailed", EventCustomerBrazeFailed.class);
        schemas.put("EventCustomerMailchimpSent", EventCustomerMailchimpSent.class);
        schemas.put("EventCustomerMailchimpRecovered", EventCustomerMailchimpRecovered.class);
        schemas.put("EventCustomerMailchimpFailed", EventCustomerMailchimpFailed.class);
        schemas.put("EventCustomerIntercomSent", EventCustomerIntercomSent.class);
        schemas.put("EventCustomerIntercomRecovered", EventCustomerIntercomRecovered.class);
        schemas.put("EventCustomerIntercomFailed", EventCustomerIntercomFailed.class);
        schemas.put("EventCustomerShopifySent", EventCustomerShopifySent.class);
        schemas.put("EventCustomerShopifyRecovered", EventCustomerShopifyRecovered.class);
        schemas.put("EventCustomerShopifyFailed", EventCustomerShopifyFailed.class);
        schemas.put("EventCustomerKlaviyoSent", EventCustomerKlaviyoSent.class);
        schemas.put("EventCustomerKlaviyoRecovered", EventCustomerKlaviyoRecovered.class);
        schemas.put("EventCustomerKlaviyoFailed", EventCustomerKlaviyoFailed.class);
        schemas.put("EventCustomerBatchSent", EventCustomerBatchSent.class);
        schemas.put("EventCustomerBatchRecovered", EventCustomerBatchRecovered.class);
        schemas.put("EventCustomerBatchFailed", EventCustomerBatchFailed.class);
        schemas.put("EventCustomerRewarded", EventCustomerRewarded.class);
        schemas.put("EventCustomerRewardedLoyaltyPoints", EventCustomerRewardedLoyaltyPoints.class);
        schemas.put("EventCustomerGiftVoucherBalanceAdded", EventCustomerGiftVoucherBalanceAdded.class);
        schemas.put("EventCustomerLoyaltyCardPointsAdded", EventCustomerLoyaltyCardPointsAdded.class);
        schemas.put("EventCustomerLoyaltyCardPointsTransferred", EventCustomerLoyaltyCardPointsTransferred.class);
        schemas.put("EventCustomerVouchersLoyaltyPointsExpired", EventCustomerVouchersLoyaltyPointsExpired.class);
        schemas.put("EventCustomerVoucherDeleted", EventCustomerVoucherDeleted.class);
        schemas.put("EventCustomerPublicationSucceeded", EventCustomerPublicationSucceeded.class);
        schemas.put("EventCustomerPublicationFailed", EventCustomerPublicationFailed.class);
        schemas.put("EventCustomerValidationSucceeded", EventCustomerValidationSucceeded.class);
        schemas.put("EventCustomerValidationFailed", EventCustomerValidationFailed.class);
        schemas.put("EventCustomerRedemptionSucceeded", EventCustomerRedemptionSucceeded.class);
        schemas.put("EventCustomerRedemptionFailed", EventCustomerRedemptionFailed.class);
        schemas.put("EventCustomerRedemptionRollbackSucceeded", EventCustomerRedemptionRollbackSucceeded.class);
        schemas.put("EventCustomerRedemptionRollbackFailed", EventCustomerRedemptionRollbackFailed.class);
        schemas.put("EventCustomerConsentsGiven", EventCustomerConsentsGiven.class);
        schemas.put("EventCustomerConsentsRevoked", EventCustomerConsentsRevoked.class);
        schemas.put("EventCustomerOrderCanceled", EventCustomerOrderCanceled.class);
        schemas.put("EventCustomerOrderCreated", EventCustomerOrderCreated.class);
        schemas.put("EventCustomerOrderFulfilled", EventCustomerOrderFulfilled.class);
        schemas.put("EventCustomerOrderPaid", EventCustomerOrderPaid.class);
        schemas.put("EventCustomerOrderProcessing", EventCustomerOrderProcessing.class);
        schemas.put("EventCustomerOrderUpdated", EventCustomerOrderUpdated.class);
        schemas.put("EventCustomerRewardRedemptionsCreated", EventCustomerRewardRedemptionsCreated.class);
        schemas.put("EventCustomerRewardRedemptionsPending", EventCustomerRewardRedemptionsPending.class);
        schemas.put("EventCustomerRewardRedemptionsCompleted", EventCustomerRewardRedemptionsCompleted.class);
        schemas.put("EventCustomerRewardRedemptionsRolledBack", EventCustomerRewardRedemptionsRolledBack.class);
        schemas.put("EventCustomerLoyaltyUpdated", EventCustomerLoyaltyUpdated.class);
        schemas.put("EventCustomerLoyaltyTierUpgraded", EventCustomerLoyaltyTierUpgraded.class);
        schemas.put("EventCustomerLoyaltyTierDowngraded", EventCustomerLoyaltyTierDowngraded.class);
        schemas.put("EventCustomerLoyaltyTierProlonged", EventCustomerLoyaltyTierProlonged.class);
        schemas.put("EventCustomerLoyaltyTierExpirationChanged", EventCustomerLoyaltyTierExpirationChanged.class);
        schemas.put("EventCustomerLoyaltyTierJoined", EventCustomerLoyaltyTierJoined.class);
        schemas.put("EventCustomerLoyaltyTierLeft", EventCustomerLoyaltyTierLeft.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CustomerActivityData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EventCustomerConfirmed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerCreated) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerUpdated) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerDeleted) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerReferred) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerCustomEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerSegmentEntered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerSegmentLeft) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerSmsSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerSmsRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerSmsFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerEmailSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerEmailRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerEmailFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerActiveCampaignSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerActiveCampaignRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerActiveCampaignFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerBrazeSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerBrazeRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerBrazeFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerMailchimpSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerMailchimpRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerMailchimpFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerIntercomSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerIntercomRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerIntercomFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerShopifySent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerShopifyRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerShopifyFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerKlaviyoSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerKlaviyoRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerKlaviyoFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerBatchSent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerBatchRecovered) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerBatchFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRewarded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRewardedLoyaltyPoints) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerGiftVoucherBalanceAdded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyCardPointsAdded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyCardPointsTransferred) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerVouchersLoyaltyPointsExpired) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerVoucherDeleted) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerPublicationSucceeded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerPublicationFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerValidationSucceeded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerValidationFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRedemptionSucceeded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRedemptionFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRedemptionRollbackSucceeded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRedemptionRollbackFailed) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerConsentsGiven) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerConsentsRevoked) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerOrderCanceled) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerOrderCreated) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerOrderFulfilled) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerOrderPaid) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerOrderProcessing) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerOrderUpdated) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRewardRedemptionsCreated) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRewardRedemptionsPending) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRewardRedemptionsCompleted) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerRewardRedemptionsRolledBack) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyUpdated) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyTierUpgraded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyTierDowngraded) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyTierProlonged) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyTierExpirationChanged) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyTierJoined) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventCustomerLoyaltyTierLeft) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired");
    }

    /**
     * Get the actual instance, which can be the following:
     * EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired
     *
     * @return The actual instance (EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventCustomerConfirmed`. If the actual instance is not `EventCustomerConfirmed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerConfirmed`
     * @throws ClassCastException if the instance is not `EventCustomerConfirmed`
     */
    public EventCustomerConfirmed getEventCustomerConfirmed() throws ClassCastException {
        return (EventCustomerConfirmed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerCreated`. If the actual instance is not `EventCustomerCreated`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerCreated`
     * @throws ClassCastException if the instance is not `EventCustomerCreated`
     */
    public EventCustomerCreated getEventCustomerCreated() throws ClassCastException {
        return (EventCustomerCreated)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerUpdated`. If the actual instance is not `EventCustomerUpdated`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerUpdated`
     * @throws ClassCastException if the instance is not `EventCustomerUpdated`
     */
    public EventCustomerUpdated getEventCustomerUpdated() throws ClassCastException {
        return (EventCustomerUpdated)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerDeleted`. If the actual instance is not `EventCustomerDeleted`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerDeleted`
     * @throws ClassCastException if the instance is not `EventCustomerDeleted`
     */
    public EventCustomerDeleted getEventCustomerDeleted() throws ClassCastException {
        return (EventCustomerDeleted)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerReferred`. If the actual instance is not `EventCustomerReferred`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerReferred`
     * @throws ClassCastException if the instance is not `EventCustomerReferred`
     */
    public EventCustomerReferred getEventCustomerReferred() throws ClassCastException {
        return (EventCustomerReferred)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerCustomEvent`. If the actual instance is not `EventCustomerCustomEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerCustomEvent`
     * @throws ClassCastException if the instance is not `EventCustomerCustomEvent`
     */
    public EventCustomerCustomEvent getEventCustomerCustomEvent() throws ClassCastException {
        return (EventCustomerCustomEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerSegmentEntered`. If the actual instance is not `EventCustomerSegmentEntered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerSegmentEntered`
     * @throws ClassCastException if the instance is not `EventCustomerSegmentEntered`
     */
    public EventCustomerSegmentEntered getEventCustomerSegmentEntered() throws ClassCastException {
        return (EventCustomerSegmentEntered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerSegmentLeft`. If the actual instance is not `EventCustomerSegmentLeft`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerSegmentLeft`
     * @throws ClassCastException if the instance is not `EventCustomerSegmentLeft`
     */
    public EventCustomerSegmentLeft getEventCustomerSegmentLeft() throws ClassCastException {
        return (EventCustomerSegmentLeft)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerSmsSent`. If the actual instance is not `EventCustomerSmsSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerSmsSent`
     * @throws ClassCastException if the instance is not `EventCustomerSmsSent`
     */
    public EventCustomerSmsSent getEventCustomerSmsSent() throws ClassCastException {
        return (EventCustomerSmsSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerSmsRecovered`. If the actual instance is not `EventCustomerSmsRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerSmsRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerSmsRecovered`
     */
    public EventCustomerSmsRecovered getEventCustomerSmsRecovered() throws ClassCastException {
        return (EventCustomerSmsRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerSmsFailed`. If the actual instance is not `EventCustomerSmsFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerSmsFailed`
     * @throws ClassCastException if the instance is not `EventCustomerSmsFailed`
     */
    public EventCustomerSmsFailed getEventCustomerSmsFailed() throws ClassCastException {
        return (EventCustomerSmsFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerEmailSent`. If the actual instance is not `EventCustomerEmailSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerEmailSent`
     * @throws ClassCastException if the instance is not `EventCustomerEmailSent`
     */
    public EventCustomerEmailSent getEventCustomerEmailSent() throws ClassCastException {
        return (EventCustomerEmailSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerEmailRecovered`. If the actual instance is not `EventCustomerEmailRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerEmailRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerEmailRecovered`
     */
    public EventCustomerEmailRecovered getEventCustomerEmailRecovered() throws ClassCastException {
        return (EventCustomerEmailRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerEmailFailed`. If the actual instance is not `EventCustomerEmailFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerEmailFailed`
     * @throws ClassCastException if the instance is not `EventCustomerEmailFailed`
     */
    public EventCustomerEmailFailed getEventCustomerEmailFailed() throws ClassCastException {
        return (EventCustomerEmailFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerActiveCampaignSent`. If the actual instance is not `EventCustomerActiveCampaignSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerActiveCampaignSent`
     * @throws ClassCastException if the instance is not `EventCustomerActiveCampaignSent`
     */
    public EventCustomerActiveCampaignSent getEventCustomerActiveCampaignSent() throws ClassCastException {
        return (EventCustomerActiveCampaignSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerActiveCampaignRecovered`. If the actual instance is not `EventCustomerActiveCampaignRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerActiveCampaignRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerActiveCampaignRecovered`
     */
    public EventCustomerActiveCampaignRecovered getEventCustomerActiveCampaignRecovered() throws ClassCastException {
        return (EventCustomerActiveCampaignRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerActiveCampaignFailed`. If the actual instance is not `EventCustomerActiveCampaignFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerActiveCampaignFailed`
     * @throws ClassCastException if the instance is not `EventCustomerActiveCampaignFailed`
     */
    public EventCustomerActiveCampaignFailed getEventCustomerActiveCampaignFailed() throws ClassCastException {
        return (EventCustomerActiveCampaignFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerBrazeSent`. If the actual instance is not `EventCustomerBrazeSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerBrazeSent`
     * @throws ClassCastException if the instance is not `EventCustomerBrazeSent`
     */
    public EventCustomerBrazeSent getEventCustomerBrazeSent() throws ClassCastException {
        return (EventCustomerBrazeSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerBrazeRecovered`. If the actual instance is not `EventCustomerBrazeRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerBrazeRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerBrazeRecovered`
     */
    public EventCustomerBrazeRecovered getEventCustomerBrazeRecovered() throws ClassCastException {
        return (EventCustomerBrazeRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerBrazeFailed`. If the actual instance is not `EventCustomerBrazeFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerBrazeFailed`
     * @throws ClassCastException if the instance is not `EventCustomerBrazeFailed`
     */
    public EventCustomerBrazeFailed getEventCustomerBrazeFailed() throws ClassCastException {
        return (EventCustomerBrazeFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerMailchimpSent`. If the actual instance is not `EventCustomerMailchimpSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerMailchimpSent`
     * @throws ClassCastException if the instance is not `EventCustomerMailchimpSent`
     */
    public EventCustomerMailchimpSent getEventCustomerMailchimpSent() throws ClassCastException {
        return (EventCustomerMailchimpSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerMailchimpRecovered`. If the actual instance is not `EventCustomerMailchimpRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerMailchimpRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerMailchimpRecovered`
     */
    public EventCustomerMailchimpRecovered getEventCustomerMailchimpRecovered() throws ClassCastException {
        return (EventCustomerMailchimpRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerMailchimpFailed`. If the actual instance is not `EventCustomerMailchimpFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerMailchimpFailed`
     * @throws ClassCastException if the instance is not `EventCustomerMailchimpFailed`
     */
    public EventCustomerMailchimpFailed getEventCustomerMailchimpFailed() throws ClassCastException {
        return (EventCustomerMailchimpFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerIntercomSent`. If the actual instance is not `EventCustomerIntercomSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerIntercomSent`
     * @throws ClassCastException if the instance is not `EventCustomerIntercomSent`
     */
    public EventCustomerIntercomSent getEventCustomerIntercomSent() throws ClassCastException {
        return (EventCustomerIntercomSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerIntercomRecovered`. If the actual instance is not `EventCustomerIntercomRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerIntercomRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerIntercomRecovered`
     */
    public EventCustomerIntercomRecovered getEventCustomerIntercomRecovered() throws ClassCastException {
        return (EventCustomerIntercomRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerIntercomFailed`. If the actual instance is not `EventCustomerIntercomFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerIntercomFailed`
     * @throws ClassCastException if the instance is not `EventCustomerIntercomFailed`
     */
    public EventCustomerIntercomFailed getEventCustomerIntercomFailed() throws ClassCastException {
        return (EventCustomerIntercomFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerShopifySent`. If the actual instance is not `EventCustomerShopifySent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerShopifySent`
     * @throws ClassCastException if the instance is not `EventCustomerShopifySent`
     */
    public EventCustomerShopifySent getEventCustomerShopifySent() throws ClassCastException {
        return (EventCustomerShopifySent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerShopifyRecovered`. If the actual instance is not `EventCustomerShopifyRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerShopifyRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerShopifyRecovered`
     */
    public EventCustomerShopifyRecovered getEventCustomerShopifyRecovered() throws ClassCastException {
        return (EventCustomerShopifyRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerShopifyFailed`. If the actual instance is not `EventCustomerShopifyFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerShopifyFailed`
     * @throws ClassCastException if the instance is not `EventCustomerShopifyFailed`
     */
    public EventCustomerShopifyFailed getEventCustomerShopifyFailed() throws ClassCastException {
        return (EventCustomerShopifyFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerKlaviyoSent`. If the actual instance is not `EventCustomerKlaviyoSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerKlaviyoSent`
     * @throws ClassCastException if the instance is not `EventCustomerKlaviyoSent`
     */
    public EventCustomerKlaviyoSent getEventCustomerKlaviyoSent() throws ClassCastException {
        return (EventCustomerKlaviyoSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerKlaviyoRecovered`. If the actual instance is not `EventCustomerKlaviyoRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerKlaviyoRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerKlaviyoRecovered`
     */
    public EventCustomerKlaviyoRecovered getEventCustomerKlaviyoRecovered() throws ClassCastException {
        return (EventCustomerKlaviyoRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerKlaviyoFailed`. If the actual instance is not `EventCustomerKlaviyoFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerKlaviyoFailed`
     * @throws ClassCastException if the instance is not `EventCustomerKlaviyoFailed`
     */
    public EventCustomerKlaviyoFailed getEventCustomerKlaviyoFailed() throws ClassCastException {
        return (EventCustomerKlaviyoFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerBatchSent`. If the actual instance is not `EventCustomerBatchSent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerBatchSent`
     * @throws ClassCastException if the instance is not `EventCustomerBatchSent`
     */
    public EventCustomerBatchSent getEventCustomerBatchSent() throws ClassCastException {
        return (EventCustomerBatchSent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerBatchRecovered`. If the actual instance is not `EventCustomerBatchRecovered`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerBatchRecovered`
     * @throws ClassCastException if the instance is not `EventCustomerBatchRecovered`
     */
    public EventCustomerBatchRecovered getEventCustomerBatchRecovered() throws ClassCastException {
        return (EventCustomerBatchRecovered)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerBatchFailed`. If the actual instance is not `EventCustomerBatchFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerBatchFailed`
     * @throws ClassCastException if the instance is not `EventCustomerBatchFailed`
     */
    public EventCustomerBatchFailed getEventCustomerBatchFailed() throws ClassCastException {
        return (EventCustomerBatchFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRewarded`. If the actual instance is not `EventCustomerRewarded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRewarded`
     * @throws ClassCastException if the instance is not `EventCustomerRewarded`
     */
    public EventCustomerRewarded getEventCustomerRewarded() throws ClassCastException {
        return (EventCustomerRewarded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRewardedLoyaltyPoints`. If the actual instance is not `EventCustomerRewardedLoyaltyPoints`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRewardedLoyaltyPoints`
     * @throws ClassCastException if the instance is not `EventCustomerRewardedLoyaltyPoints`
     */
    public EventCustomerRewardedLoyaltyPoints getEventCustomerRewardedLoyaltyPoints() throws ClassCastException {
        return (EventCustomerRewardedLoyaltyPoints)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerGiftVoucherBalanceAdded`. If the actual instance is not `EventCustomerGiftVoucherBalanceAdded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerGiftVoucherBalanceAdded`
     * @throws ClassCastException if the instance is not `EventCustomerGiftVoucherBalanceAdded`
     */
    public EventCustomerGiftVoucherBalanceAdded getEventCustomerGiftVoucherBalanceAdded() throws ClassCastException {
        return (EventCustomerGiftVoucherBalanceAdded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyCardPointsAdded`. If the actual instance is not `EventCustomerLoyaltyCardPointsAdded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyCardPointsAdded`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyCardPointsAdded`
     */
    public EventCustomerLoyaltyCardPointsAdded getEventCustomerLoyaltyCardPointsAdded() throws ClassCastException {
        return (EventCustomerLoyaltyCardPointsAdded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyCardPointsTransferred`. If the actual instance is not `EventCustomerLoyaltyCardPointsTransferred`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyCardPointsTransferred`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyCardPointsTransferred`
     */
    public EventCustomerLoyaltyCardPointsTransferred getEventCustomerLoyaltyCardPointsTransferred() throws ClassCastException {
        return (EventCustomerLoyaltyCardPointsTransferred)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerVouchersLoyaltyPointsExpired`. If the actual instance is not `EventCustomerVouchersLoyaltyPointsExpired`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerVouchersLoyaltyPointsExpired`
     * @throws ClassCastException if the instance is not `EventCustomerVouchersLoyaltyPointsExpired`
     */
    public EventCustomerVouchersLoyaltyPointsExpired getEventCustomerVouchersLoyaltyPointsExpired() throws ClassCastException {
        return (EventCustomerVouchersLoyaltyPointsExpired)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerVoucherDeleted`. If the actual instance is not `EventCustomerVoucherDeleted`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerVoucherDeleted`
     * @throws ClassCastException if the instance is not `EventCustomerVoucherDeleted`
     */
    public EventCustomerVoucherDeleted getEventCustomerVoucherDeleted() throws ClassCastException {
        return (EventCustomerVoucherDeleted)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerPublicationSucceeded`. If the actual instance is not `EventCustomerPublicationSucceeded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerPublicationSucceeded`
     * @throws ClassCastException if the instance is not `EventCustomerPublicationSucceeded`
     */
    public EventCustomerPublicationSucceeded getEventCustomerPublicationSucceeded() throws ClassCastException {
        return (EventCustomerPublicationSucceeded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerPublicationFailed`. If the actual instance is not `EventCustomerPublicationFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerPublicationFailed`
     * @throws ClassCastException if the instance is not `EventCustomerPublicationFailed`
     */
    public EventCustomerPublicationFailed getEventCustomerPublicationFailed() throws ClassCastException {
        return (EventCustomerPublicationFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerValidationSucceeded`. If the actual instance is not `EventCustomerValidationSucceeded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerValidationSucceeded`
     * @throws ClassCastException if the instance is not `EventCustomerValidationSucceeded`
     */
    public EventCustomerValidationSucceeded getEventCustomerValidationSucceeded() throws ClassCastException {
        return (EventCustomerValidationSucceeded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerValidationFailed`. If the actual instance is not `EventCustomerValidationFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerValidationFailed`
     * @throws ClassCastException if the instance is not `EventCustomerValidationFailed`
     */
    public EventCustomerValidationFailed getEventCustomerValidationFailed() throws ClassCastException {
        return (EventCustomerValidationFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRedemptionSucceeded`. If the actual instance is not `EventCustomerRedemptionSucceeded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRedemptionSucceeded`
     * @throws ClassCastException if the instance is not `EventCustomerRedemptionSucceeded`
     */
    public EventCustomerRedemptionSucceeded getEventCustomerRedemptionSucceeded() throws ClassCastException {
        return (EventCustomerRedemptionSucceeded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRedemptionFailed`. If the actual instance is not `EventCustomerRedemptionFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRedemptionFailed`
     * @throws ClassCastException if the instance is not `EventCustomerRedemptionFailed`
     */
    public EventCustomerRedemptionFailed getEventCustomerRedemptionFailed() throws ClassCastException {
        return (EventCustomerRedemptionFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRedemptionRollbackSucceeded`. If the actual instance is not `EventCustomerRedemptionRollbackSucceeded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRedemptionRollbackSucceeded`
     * @throws ClassCastException if the instance is not `EventCustomerRedemptionRollbackSucceeded`
     */
    public EventCustomerRedemptionRollbackSucceeded getEventCustomerRedemptionRollbackSucceeded() throws ClassCastException {
        return (EventCustomerRedemptionRollbackSucceeded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRedemptionRollbackFailed`. If the actual instance is not `EventCustomerRedemptionRollbackFailed`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRedemptionRollbackFailed`
     * @throws ClassCastException if the instance is not `EventCustomerRedemptionRollbackFailed`
     */
    public EventCustomerRedemptionRollbackFailed getEventCustomerRedemptionRollbackFailed() throws ClassCastException {
        return (EventCustomerRedemptionRollbackFailed)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerConsentsGiven`. If the actual instance is not `EventCustomerConsentsGiven`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerConsentsGiven`
     * @throws ClassCastException if the instance is not `EventCustomerConsentsGiven`
     */
    public EventCustomerConsentsGiven getEventCustomerConsentsGiven() throws ClassCastException {
        return (EventCustomerConsentsGiven)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerConsentsRevoked`. If the actual instance is not `EventCustomerConsentsRevoked`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerConsentsRevoked`
     * @throws ClassCastException if the instance is not `EventCustomerConsentsRevoked`
     */
    public EventCustomerConsentsRevoked getEventCustomerConsentsRevoked() throws ClassCastException {
        return (EventCustomerConsentsRevoked)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerOrderCanceled`. If the actual instance is not `EventCustomerOrderCanceled`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerOrderCanceled`
     * @throws ClassCastException if the instance is not `EventCustomerOrderCanceled`
     */
    public EventCustomerOrderCanceled getEventCustomerOrderCanceled() throws ClassCastException {
        return (EventCustomerOrderCanceled)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerOrderCreated`. If the actual instance is not `EventCustomerOrderCreated`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerOrderCreated`
     * @throws ClassCastException if the instance is not `EventCustomerOrderCreated`
     */
    public EventCustomerOrderCreated getEventCustomerOrderCreated() throws ClassCastException {
        return (EventCustomerOrderCreated)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerOrderFulfilled`. If the actual instance is not `EventCustomerOrderFulfilled`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerOrderFulfilled`
     * @throws ClassCastException if the instance is not `EventCustomerOrderFulfilled`
     */
    public EventCustomerOrderFulfilled getEventCustomerOrderFulfilled() throws ClassCastException {
        return (EventCustomerOrderFulfilled)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerOrderPaid`. If the actual instance is not `EventCustomerOrderPaid`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerOrderPaid`
     * @throws ClassCastException if the instance is not `EventCustomerOrderPaid`
     */
    public EventCustomerOrderPaid getEventCustomerOrderPaid() throws ClassCastException {
        return (EventCustomerOrderPaid)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerOrderProcessing`. If the actual instance is not `EventCustomerOrderProcessing`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerOrderProcessing`
     * @throws ClassCastException if the instance is not `EventCustomerOrderProcessing`
     */
    public EventCustomerOrderProcessing getEventCustomerOrderProcessing() throws ClassCastException {
        return (EventCustomerOrderProcessing)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerOrderUpdated`. If the actual instance is not `EventCustomerOrderUpdated`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerOrderUpdated`
     * @throws ClassCastException if the instance is not `EventCustomerOrderUpdated`
     */
    public EventCustomerOrderUpdated getEventCustomerOrderUpdated() throws ClassCastException {
        return (EventCustomerOrderUpdated)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRewardRedemptionsCreated`. If the actual instance is not `EventCustomerRewardRedemptionsCreated`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRewardRedemptionsCreated`
     * @throws ClassCastException if the instance is not `EventCustomerRewardRedemptionsCreated`
     */
    public EventCustomerRewardRedemptionsCreated getEventCustomerRewardRedemptionsCreated() throws ClassCastException {
        return (EventCustomerRewardRedemptionsCreated)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRewardRedemptionsPending`. If the actual instance is not `EventCustomerRewardRedemptionsPending`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRewardRedemptionsPending`
     * @throws ClassCastException if the instance is not `EventCustomerRewardRedemptionsPending`
     */
    public EventCustomerRewardRedemptionsPending getEventCustomerRewardRedemptionsPending() throws ClassCastException {
        return (EventCustomerRewardRedemptionsPending)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRewardRedemptionsCompleted`. If the actual instance is not `EventCustomerRewardRedemptionsCompleted`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRewardRedemptionsCompleted`
     * @throws ClassCastException if the instance is not `EventCustomerRewardRedemptionsCompleted`
     */
    public EventCustomerRewardRedemptionsCompleted getEventCustomerRewardRedemptionsCompleted() throws ClassCastException {
        return (EventCustomerRewardRedemptionsCompleted)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerRewardRedemptionsRolledBack`. If the actual instance is not `EventCustomerRewardRedemptionsRolledBack`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerRewardRedemptionsRolledBack`
     * @throws ClassCastException if the instance is not `EventCustomerRewardRedemptionsRolledBack`
     */
    public EventCustomerRewardRedemptionsRolledBack getEventCustomerRewardRedemptionsRolledBack() throws ClassCastException {
        return (EventCustomerRewardRedemptionsRolledBack)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyUpdated`. If the actual instance is not `EventCustomerLoyaltyUpdated`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyUpdated`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyUpdated`
     */
    public EventCustomerLoyaltyUpdated getEventCustomerLoyaltyUpdated() throws ClassCastException {
        return (EventCustomerLoyaltyUpdated)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyTierUpgraded`. If the actual instance is not `EventCustomerLoyaltyTierUpgraded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyTierUpgraded`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyTierUpgraded`
     */
    public EventCustomerLoyaltyTierUpgraded getEventCustomerLoyaltyTierUpgraded() throws ClassCastException {
        return (EventCustomerLoyaltyTierUpgraded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyTierDowngraded`. If the actual instance is not `EventCustomerLoyaltyTierDowngraded`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyTierDowngraded`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyTierDowngraded`
     */
    public EventCustomerLoyaltyTierDowngraded getEventCustomerLoyaltyTierDowngraded() throws ClassCastException {
        return (EventCustomerLoyaltyTierDowngraded)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyTierProlonged`. If the actual instance is not `EventCustomerLoyaltyTierProlonged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyTierProlonged`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyTierProlonged`
     */
    public EventCustomerLoyaltyTierProlonged getEventCustomerLoyaltyTierProlonged() throws ClassCastException {
        return (EventCustomerLoyaltyTierProlonged)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyTierExpirationChanged`. If the actual instance is not `EventCustomerLoyaltyTierExpirationChanged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyTierExpirationChanged`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyTierExpirationChanged`
     */
    public EventCustomerLoyaltyTierExpirationChanged getEventCustomerLoyaltyTierExpirationChanged() throws ClassCastException {
        return (EventCustomerLoyaltyTierExpirationChanged)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyTierJoined`. If the actual instance is not `EventCustomerLoyaltyTierJoined`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyTierJoined`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyTierJoined`
     */
    public EventCustomerLoyaltyTierJoined getEventCustomerLoyaltyTierJoined() throws ClassCastException {
        return (EventCustomerLoyaltyTierJoined)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EventCustomerLoyaltyTierLeft`. If the actual instance is not `EventCustomerLoyaltyTierLeft`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventCustomerLoyaltyTierLeft`
     * @throws ClassCastException if the instance is not `EventCustomerLoyaltyTierLeft`
     */
    public EventCustomerLoyaltyTierLeft getEventCustomerLoyaltyTierLeft() throws ClassCastException {
        return (EventCustomerLoyaltyTierLeft)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomerActivityData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with EventCustomerConfirmed
    try {
      EventCustomerConfirmed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerConfirmed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerCreated
    try {
      EventCustomerCreated.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerCreated failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerUpdated
    try {
      EventCustomerUpdated.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerUpdated failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerDeleted
    try {
      EventCustomerDeleted.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerDeleted failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerReferred
    try {
      EventCustomerReferred.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerReferred failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerCustomEvent
    try {
      EventCustomerCustomEvent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerCustomEvent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerSegmentEntered
    try {
      EventCustomerSegmentEntered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerSegmentEntered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerSegmentLeft
    try {
      EventCustomerSegmentLeft.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerSegmentLeft failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerSmsSent
    try {
      EventCustomerSmsSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerSmsSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerSmsRecovered
    try {
      EventCustomerSmsRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerSmsRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerSmsFailed
    try {
      EventCustomerSmsFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerSmsFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerEmailSent
    try {
      EventCustomerEmailSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerEmailSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerEmailRecovered
    try {
      EventCustomerEmailRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerEmailRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerEmailFailed
    try {
      EventCustomerEmailFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerEmailFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerActiveCampaignSent
    try {
      EventCustomerActiveCampaignSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerActiveCampaignSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerActiveCampaignRecovered
    try {
      EventCustomerActiveCampaignRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerActiveCampaignRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerActiveCampaignFailed
    try {
      EventCustomerActiveCampaignFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerActiveCampaignFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerBrazeSent
    try {
      EventCustomerBrazeSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerBrazeSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerBrazeRecovered
    try {
      EventCustomerBrazeRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerBrazeRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerBrazeFailed
    try {
      EventCustomerBrazeFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerBrazeFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerMailchimpSent
    try {
      EventCustomerMailchimpSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerMailchimpSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerMailchimpRecovered
    try {
      EventCustomerMailchimpRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerMailchimpRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerMailchimpFailed
    try {
      EventCustomerMailchimpFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerMailchimpFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerIntercomSent
    try {
      EventCustomerIntercomSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerIntercomSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerIntercomRecovered
    try {
      EventCustomerIntercomRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerIntercomRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerIntercomFailed
    try {
      EventCustomerIntercomFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerIntercomFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerShopifySent
    try {
      EventCustomerShopifySent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerShopifySent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerShopifyRecovered
    try {
      EventCustomerShopifyRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerShopifyRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerShopifyFailed
    try {
      EventCustomerShopifyFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerShopifyFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerKlaviyoSent
    try {
      EventCustomerKlaviyoSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerKlaviyoSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerKlaviyoRecovered
    try {
      EventCustomerKlaviyoRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerKlaviyoRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerKlaviyoFailed
    try {
      EventCustomerKlaviyoFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerKlaviyoFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerBatchSent
    try {
      EventCustomerBatchSent.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerBatchSent failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerBatchRecovered
    try {
      EventCustomerBatchRecovered.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerBatchRecovered failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerBatchFailed
    try {
      EventCustomerBatchFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerBatchFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRewarded
    try {
      EventCustomerRewarded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRewarded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRewardedLoyaltyPoints
    try {
      EventCustomerRewardedLoyaltyPoints.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRewardedLoyaltyPoints failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerGiftVoucherBalanceAdded
    try {
      EventCustomerGiftVoucherBalanceAdded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerGiftVoucherBalanceAdded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyCardPointsAdded
    try {
      EventCustomerLoyaltyCardPointsAdded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyCardPointsAdded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyCardPointsTransferred
    try {
      EventCustomerLoyaltyCardPointsTransferred.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyCardPointsTransferred failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerVouchersLoyaltyPointsExpired
    try {
      EventCustomerVouchersLoyaltyPointsExpired.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerVouchersLoyaltyPointsExpired failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerVoucherDeleted
    try {
      EventCustomerVoucherDeleted.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerVoucherDeleted failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerPublicationSucceeded
    try {
      EventCustomerPublicationSucceeded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerPublicationSucceeded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerPublicationFailed
    try {
      EventCustomerPublicationFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerPublicationFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerValidationSucceeded
    try {
      EventCustomerValidationSucceeded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerValidationSucceeded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerValidationFailed
    try {
      EventCustomerValidationFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerValidationFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRedemptionSucceeded
    try {
      EventCustomerRedemptionSucceeded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionSucceeded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRedemptionFailed
    try {
      EventCustomerRedemptionFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRedemptionRollbackSucceeded
    try {
      EventCustomerRedemptionRollbackSucceeded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionRollbackSucceeded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRedemptionRollbackFailed
    try {
      EventCustomerRedemptionRollbackFailed.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRedemptionRollbackFailed failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerConsentsGiven
    try {
      EventCustomerConsentsGiven.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerConsentsGiven failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerConsentsRevoked
    try {
      EventCustomerConsentsRevoked.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerConsentsRevoked failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerOrderCanceled
    try {
      EventCustomerOrderCanceled.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerOrderCanceled failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerOrderCreated
    try {
      EventCustomerOrderCreated.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerOrderCreated failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerOrderFulfilled
    try {
      EventCustomerOrderFulfilled.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerOrderFulfilled failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerOrderPaid
    try {
      EventCustomerOrderPaid.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerOrderPaid failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerOrderProcessing
    try {
      EventCustomerOrderProcessing.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerOrderProcessing failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerOrderUpdated
    try {
      EventCustomerOrderUpdated.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerOrderUpdated failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRewardRedemptionsCreated
    try {
      EventCustomerRewardRedemptionsCreated.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsCreated failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRewardRedemptionsPending
    try {
      EventCustomerRewardRedemptionsPending.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsPending failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRewardRedemptionsCompleted
    try {
      EventCustomerRewardRedemptionsCompleted.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsCompleted failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerRewardRedemptionsRolledBack
    try {
      EventCustomerRewardRedemptionsRolledBack.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerRewardRedemptionsRolledBack failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyUpdated
    try {
      EventCustomerLoyaltyUpdated.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyUpdated failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyTierUpgraded
    try {
      EventCustomerLoyaltyTierUpgraded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierUpgraded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyTierDowngraded
    try {
      EventCustomerLoyaltyTierDowngraded.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierDowngraded failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyTierProlonged
    try {
      EventCustomerLoyaltyTierProlonged.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierProlonged failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyTierExpirationChanged
    try {
      EventCustomerLoyaltyTierExpirationChanged.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierExpirationChanged failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyTierJoined
    try {
      EventCustomerLoyaltyTierJoined.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierJoined failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EventCustomerLoyaltyTierLeft
    try {
      EventCustomerLoyaltyTierLeft.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventCustomerLoyaltyTierLeft failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CustomerActivityData with oneOf schemas: EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of CustomerActivityData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerActivityData
  * @throws IOException if the JSON string is invalid with respect to CustomerActivityData
  */
  public static CustomerActivityData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerActivityData.class);
  }

 /**
  * Convert an instance of CustomerActivityData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

