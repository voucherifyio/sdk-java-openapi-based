/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import voucherify.client.model.OrderCalculated;
import voucherify.client.model.PromotionTier;
import voucherify.client.model.RedemptionInternalRelatedRedemptions;
import voucherify.client.model.RedemptionRewardResult;
import voucherify.client.model.RedemptionVoucher;
import voucherify.client.model.SimpleCustomer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Model Used for internal communication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class RedemptionInternal {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "redemption";

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TRACKING_ID = "tracking_id";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  /**
   * The source of the channel for the redemption rollback. A &#x60;USER&#x60; corresponds to the Voucherify Dashboard and an &#x60;API&#x60; corresponds to the API.
   */
  @JsonAdapter(ChannelTypeEnum.Adapter.class)
  public enum ChannelTypeEnum {
    USER("USER"),
    
    API("API");

    private String value;

    ChannelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelTypeEnum fromValue(String value) {
      for (ChannelTypeEnum b : ChannelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channel_type";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private ChannelTypeEnum channelType;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channel_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_FAILURE_CODE = "failure_code";
  @SerializedName(SERIALIZED_NAME_FAILURE_CODE)
  private String failureCode;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "failure_message";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  private String failureMessage;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private OrderCalculated order;

  public static final String SERIALIZED_NAME_PREVIOUS_ORDER = "previous_order";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ORDER)
  private OrderCalculated previousOrder;

  public static final String SERIALIZED_NAME_REWARD = "reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private RedemptionRewardResult reward;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * Redemption result.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    SUCCESS("SUCCESS"),
    
    FAILURE("FAILURE");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  /**
   * Redemption status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_RELATED_REDEMPTIONS = "related_redemptions";
  @SerializedName(SERIALIZED_NAME_RELATED_REDEMPTIONS)
  private RedemptionInternalRelatedRedemptions relatedRedemptions;

  public static final String SERIALIZED_NAME_PARENT_REDEMPTION_ID = "parent_redemption_id";
  @SerializedName(SERIALIZED_NAME_PARENT_REDEMPTION_ID)
  private String parentRedemptionId;

  public static final String SERIALIZED_NAME_REDEMPTION = "redemption";
  @SerializedName(SERIALIZED_NAME_REDEMPTION)
  private String redemption;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private SimpleCustomer customer;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  /**
   * Defines the related object.
   */
  @JsonAdapter(RelatedObjectTypeEnum.Adapter.class)
  public enum RelatedObjectTypeEnum {
    VOUCHER("voucher"),
    
    PROMOTION_TIER("promotion_tier");

    private String value;

    RelatedObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelatedObjectTypeEnum fromValue(String value) {
      for (RelatedObjectTypeEnum b : RelatedObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelatedObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelatedObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelatedObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelatedObjectTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RELATED_OBJECT_TYPE = "related_object_type";
  @SerializedName(SERIALIZED_NAME_RELATED_OBJECT_TYPE)
  private RelatedObjectTypeEnum relatedObjectType;

  public static final String SERIALIZED_NAME_RELATED_OBJECT_ID = "related_object_id";
  @SerializedName(SERIALIZED_NAME_RELATED_OBJECT_ID)
  private String relatedObjectId;

  public static final String SERIALIZED_NAME_RELATED_OBJECT_PARENT_ID = "related_object_parent_id";
  @SerializedName(SERIALIZED_NAME_RELATED_OBJECT_PARENT_ID)
  private String relatedObjectParentId;

  public static final String SERIALIZED_NAME_CAMPAIGN_NAME = "campaign_name";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NAME)
  private String campaignName;

  public static final String SERIALIZED_NAME_VOUCHER = "voucher";
  @SerializedName(SERIALIZED_NAME_VOUCHER)
  private RedemptionVoucher voucher;

  public static final String SERIALIZED_NAME_PROMOTION_TIER = "promotion_tier";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TIER)
  private PromotionTier promotionTier;

  public RedemptionInternal() {
  }

  public RedemptionInternal id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique redemption ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RedemptionInternal _object(String _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * The type of the object represented by the JSON. This object stores information about the &#x60;redemption&#x60;.
   * @return _object
  **/
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    this._object = _object;
  }


  public RedemptionInternal createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RedemptionInternal trackingId(String trackingId) {
    
    this.trackingId = trackingId;
    return this;
  }

   /**
   * Hashed customer source ID.
   * @return trackingId
  **/
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }


  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }


  public RedemptionInternal metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * The metadata object stores all custom attributes assigned to the redemption.
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public RedemptionInternal channelType(ChannelTypeEnum channelType) {
    
    this.channelType = channelType;
    return this;
  }

   /**
   * The source of the channel for the redemption rollback. A &#x60;USER&#x60; corresponds to the Voucherify Dashboard and an &#x60;API&#x60; corresponds to the API.
   * @return channelType
  **/
  @javax.annotation.Nullable
  public ChannelTypeEnum getChannelType() {
    return channelType;
  }


  public void setChannelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
  }


  public RedemptionInternal channelId(String channelId) {
    
    this.channelId = channelId;
    return this;
  }

   /**
   * Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API.
   * @return channelId
  **/
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }


  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public RedemptionInternal failureCode(String failureCode) {
    
    this.failureCode = failureCode;
    return this;
  }

   /**
   * If the result is &#x60;FAILURE&#x60;, this parameter will provide a generic reason as to why the redemption failed.
   * @return failureCode
  **/
  @javax.annotation.Nullable
  public String getFailureCode() {
    return failureCode;
  }


  public void setFailureCode(String failureCode) {
    this.failureCode = failureCode;
  }


  public RedemptionInternal failureMessage(String failureMessage) {
    
    this.failureMessage = failureMessage;
    return this;
  }

   /**
   * If the result is &#x60;FAILURE&#x60;, this parameter will provide a more expanded reason as to why the redemption failed.
   * @return failureMessage
  **/
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }


  public void setFailureMessage(String failureMessage) {
    this.failureMessage = failureMessage;
  }


  public RedemptionInternal order(OrderCalculated order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  public OrderCalculated getOrder() {
    return order;
  }


  public void setOrder(OrderCalculated order) {
    this.order = order;
  }


  public RedemptionInternal previousOrder(OrderCalculated previousOrder) {
    
    this.previousOrder = previousOrder;
    return this;
  }

   /**
   * Get previousOrder
   * @return previousOrder
  **/
  @javax.annotation.Nullable
  public OrderCalculated getPreviousOrder() {
    return previousOrder;
  }


  public void setPreviousOrder(OrderCalculated previousOrder) {
    this.previousOrder = previousOrder;
  }


  public RedemptionInternal reward(RedemptionRewardResult reward) {
    
    this.reward = reward;
    return this;
  }

   /**
   * Get reward
   * @return reward
  **/
  @javax.annotation.Nullable
  public RedemptionRewardResult getReward() {
    return reward;
  }


  public void setReward(RedemptionRewardResult reward) {
    this.reward = reward;
  }


  public RedemptionInternal amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.
   * @return amount
  **/
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public RedemptionInternal reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * System generated cause for the redemption being invalid in the context of the provided parameters.
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public RedemptionInternal result(ResultEnum result) {
    
    this.result = result;
    return this;
  }

   /**
   * Redemption result.
   * @return result
  **/
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }


  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public RedemptionInternal status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Redemption status.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public RedemptionInternal relatedRedemptions(RedemptionInternalRelatedRedemptions relatedRedemptions) {
    
    this.relatedRedemptions = relatedRedemptions;
    return this;
  }

   /**
   * Get relatedRedemptions
   * @return relatedRedemptions
  **/
  @javax.annotation.Nullable
  public RedemptionInternalRelatedRedemptions getRelatedRedemptions() {
    return relatedRedemptions;
  }


  public void setRelatedRedemptions(RedemptionInternalRelatedRedemptions relatedRedemptions) {
    this.relatedRedemptions = relatedRedemptions;
  }


  public RedemptionInternal parentRedemptionId(String parentRedemptionId) {
    
    this.parentRedemptionId = parentRedemptionId;
    return this;
  }

   /**
   * Unique redemption ID of the parent redemption.
   * @return parentRedemptionId
  **/
  @javax.annotation.Nullable
  public String getParentRedemptionId() {
    return parentRedemptionId;
  }


  public void setParentRedemptionId(String parentRedemptionId) {
    this.parentRedemptionId = parentRedemptionId;
  }


  public RedemptionInternal redemption(String redemption) {
    
    this.redemption = redemption;
    return this;
  }

   /**
   * Unique redemption ID of the parent redemption.
   * @return redemption
  **/
  @javax.annotation.Nullable
  public String getRedemption() {
    return redemption;
  }


  public void setRedemption(String redemption) {
    this.redemption = redemption;
  }


  public RedemptionInternal customer(SimpleCustomer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  public SimpleCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(SimpleCustomer customer) {
    this.customer = customer;
  }


  public RedemptionInternal customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Unique customer ID of the redeeming customer.
   * @return customerId
  **/
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public RedemptionInternal relatedObjectType(RelatedObjectTypeEnum relatedObjectType) {
    
    this.relatedObjectType = relatedObjectType;
    return this;
  }

   /**
   * Defines the related object.
   * @return relatedObjectType
  **/
  @javax.annotation.Nullable
  public RelatedObjectTypeEnum getRelatedObjectType() {
    return relatedObjectType;
  }


  public void setRelatedObjectType(RelatedObjectTypeEnum relatedObjectType) {
    this.relatedObjectType = relatedObjectType;
  }


  public RedemptionInternal relatedObjectId(String relatedObjectId) {
    
    this.relatedObjectId = relatedObjectId;
    return this;
  }

   /**
   * Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.
   * @return relatedObjectId
  **/
  @javax.annotation.Nullable
  public String getRelatedObjectId() {
    return relatedObjectId;
  }


  public void setRelatedObjectId(String relatedObjectId) {
    this.relatedObjectId = relatedObjectId;
  }


  public RedemptionInternal relatedObjectParentId(String relatedObjectParentId) {
    
    this.relatedObjectParentId = relatedObjectParentId;
    return this;
  }

   /**
   * Unique related parent object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.
   * @return relatedObjectParentId
  **/
  @javax.annotation.Nullable
  public String getRelatedObjectParentId() {
    return relatedObjectParentId;
  }


  public void setRelatedObjectParentId(String relatedObjectParentId) {
    this.relatedObjectParentId = relatedObjectParentId;
  }


  public RedemptionInternal campaignName(String campaignName) {
    
    this.campaignName = campaignName;
    return this;
  }

   /**
   * Campaign name
   * @return campaignName
  **/
  @javax.annotation.Nullable
  public String getCampaignName() {
    return campaignName;
  }


  public void setCampaignName(String campaignName) {
    this.campaignName = campaignName;
  }


  public RedemptionInternal voucher(RedemptionVoucher voucher) {
    
    this.voucher = voucher;
    return this;
  }

   /**
   * Get voucher
   * @return voucher
  **/
  @javax.annotation.Nullable
  public RedemptionVoucher getVoucher() {
    return voucher;
  }


  public void setVoucher(RedemptionVoucher voucher) {
    this.voucher = voucher;
  }


  public RedemptionInternal promotionTier(PromotionTier promotionTier) {
    
    this.promotionTier = promotionTier;
    return this;
  }

   /**
   * Get promotionTier
   * @return promotionTier
  **/
  @javax.annotation.Nullable
  public PromotionTier getPromotionTier() {
    return promotionTier;
  }


  public void setPromotionTier(PromotionTier promotionTier) {
    this.promotionTier = promotionTier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedemptionInternal redemptionInternal = (RedemptionInternal) o;
    return Objects.equals(this.id, redemptionInternal.id) &&
        Objects.equals(this._object, redemptionInternal._object) &&
        Objects.equals(this.createdAt, redemptionInternal.createdAt) &&
        Objects.equals(this.trackingId, redemptionInternal.trackingId) &&
        Objects.equals(this.metadata, redemptionInternal.metadata) &&
        Objects.equals(this.channelType, redemptionInternal.channelType) &&
        Objects.equals(this.channelId, redemptionInternal.channelId) &&
        Objects.equals(this.failureCode, redemptionInternal.failureCode) &&
        Objects.equals(this.failureMessage, redemptionInternal.failureMessage) &&
        Objects.equals(this.order, redemptionInternal.order) &&
        Objects.equals(this.previousOrder, redemptionInternal.previousOrder) &&
        Objects.equals(this.reward, redemptionInternal.reward) &&
        Objects.equals(this.amount, redemptionInternal.amount) &&
        Objects.equals(this.reason, redemptionInternal.reason) &&
        Objects.equals(this.result, redemptionInternal.result) &&
        Objects.equals(this.status, redemptionInternal.status) &&
        Objects.equals(this.relatedRedemptions, redemptionInternal.relatedRedemptions) &&
        Objects.equals(this.parentRedemptionId, redemptionInternal.parentRedemptionId) &&
        Objects.equals(this.redemption, redemptionInternal.redemption) &&
        Objects.equals(this.customer, redemptionInternal.customer) &&
        Objects.equals(this.customerId, redemptionInternal.customerId) &&
        Objects.equals(this.relatedObjectType, redemptionInternal.relatedObjectType) &&
        Objects.equals(this.relatedObjectId, redemptionInternal.relatedObjectId) &&
        Objects.equals(this.relatedObjectParentId, redemptionInternal.relatedObjectParentId) &&
        Objects.equals(this.campaignName, redemptionInternal.campaignName) &&
        Objects.equals(this.voucher, redemptionInternal.voucher) &&
        Objects.equals(this.promotionTier, redemptionInternal.promotionTier);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _object, createdAt, trackingId, metadata, channelType, channelId, failureCode, failureMessage, order, previousOrder, reward, amount, reason, result, status, relatedRedemptions, parentRedemptionId, redemption, customer, customerId, relatedObjectType, relatedObjectId, relatedObjectParentId, campaignName, voucher, promotionTier);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedemptionInternal {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    failureCode: ").append(toIndentedString(failureCode)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    previousOrder: ").append(toIndentedString(previousOrder)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    relatedRedemptions: ").append(toIndentedString(relatedRedemptions)).append("\n");
    sb.append("    parentRedemptionId: ").append(toIndentedString(parentRedemptionId)).append("\n");
    sb.append("    redemption: ").append(toIndentedString(redemption)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    relatedObjectType: ").append(toIndentedString(relatedObjectType)).append("\n");
    sb.append("    relatedObjectId: ").append(toIndentedString(relatedObjectId)).append("\n");
    sb.append("    relatedObjectParentId: ").append(toIndentedString(relatedObjectParentId)).append("\n");
    sb.append("    campaignName: ").append(toIndentedString(campaignName)).append("\n");
    sb.append("    voucher: ").append(toIndentedString(voucher)).append("\n");
    sb.append("    promotionTier: ").append(toIndentedString(promotionTier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("object");
    openapiFields.add("created_at");
    openapiFields.add("tracking_id");
    openapiFields.add("metadata");
    openapiFields.add("channel_type");
    openapiFields.add("channel_id");
    openapiFields.add("failure_code");
    openapiFields.add("failure_message");
    openapiFields.add("order");
    openapiFields.add("previous_order");
    openapiFields.add("reward");
    openapiFields.add("amount");
    openapiFields.add("reason");
    openapiFields.add("result");
    openapiFields.add("status");
    openapiFields.add("related_redemptions");
    openapiFields.add("parent_redemption_id");
    openapiFields.add("redemption");
    openapiFields.add("customer");
    openapiFields.add("customer_id");
    openapiFields.add("related_object_type");
    openapiFields.add("related_object_id");
    openapiFields.add("related_object_parent_id");
    openapiFields.add("campaign_name");
    openapiFields.add("voucher");
    openapiFields.add("promotion_tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RedemptionInternal
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedemptionInternal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedemptionInternal is not found in the empty JSON string", RedemptionInternal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedemptionInternal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedemptionInternal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("tracking_id") != null && !jsonObj.get("tracking_id").isJsonNull()) && !jsonObj.get("tracking_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_id").toString()));
      }
      if ((jsonObj.get("channel_type") != null && !jsonObj.get("channel_type").isJsonNull()) && !jsonObj.get("channel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_type").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("channel_type");

        if (objectElement != null && !objectElement.isJsonNull()) {
          ChannelTypeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `channel_type` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("channel_type") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `channel_type` to be a valid element of ChannelTypeEnum enum got `%s` instead", jsonObj.get("channel_type").toString()));
        }
      }
      if ((jsonObj.get("channel_id") != null && !jsonObj.get("channel_id").isJsonNull()) && !jsonObj.get("channel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_id").toString()));
      }
      if ((jsonObj.get("failure_code") != null && !jsonObj.get("failure_code").isJsonNull()) && !jsonObj.get("failure_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure_code").toString()));
      }
      if ((jsonObj.get("failure_message") != null && !jsonObj.get("failure_message").isJsonNull()) && !jsonObj.get("failure_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure_message").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        OrderCalculated.validateJsonElement(jsonObj.get("order"));
      }
      // validate the optional field `previous_order`
      if (jsonObj.get("previous_order") != null && !jsonObj.get("previous_order").isJsonNull()) {
        OrderCalculated.validateJsonElement(jsonObj.get("previous_order"));
      }
      // validate the optional field `reward`
      if (jsonObj.get("reward") != null && !jsonObj.get("reward").isJsonNull()) {
        RedemptionRewardResult.validateJsonElement(jsonObj.get("reward"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("result");

        if (objectElement != null && !objectElement.isJsonNull()) {
          ResultEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `result` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("result") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `result` to be a valid element of ResultEnum enum got `%s` instead", jsonObj.get("result").toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("status");

        if (objectElement != null && !objectElement.isJsonNull()) {
          StatusEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `status` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("status") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `status` to be a valid element of StatusEnum enum got `%s` instead", jsonObj.get("status").toString()));
        }
      }
      // validate the optional field `related_redemptions`
      if (jsonObj.get("related_redemptions") != null && !jsonObj.get("related_redemptions").isJsonNull()) {
        RedemptionInternalRelatedRedemptions.validateJsonElement(jsonObj.get("related_redemptions"));
      }
      if ((jsonObj.get("parent_redemption_id") != null && !jsonObj.get("parent_redemption_id").isJsonNull()) && !jsonObj.get("parent_redemption_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_redemption_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_redemption_id").toString()));
      }
      if ((jsonObj.get("redemption") != null && !jsonObj.get("redemption").isJsonNull()) && !jsonObj.get("redemption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemption").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        SimpleCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("related_object_type") != null && !jsonObj.get("related_object_type").isJsonNull()) && !jsonObj.get("related_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("related_object_type").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("related_object_type");

        if (objectElement != null && !objectElement.isJsonNull()) {
          RelatedObjectTypeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `related_object_type` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("related_object_type") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `related_object_type` to be a valid element of RelatedObjectTypeEnum enum got `%s` instead", jsonObj.get("related_object_type").toString()));
        }
      }
      if ((jsonObj.get("related_object_id") != null && !jsonObj.get("related_object_id").isJsonNull()) && !jsonObj.get("related_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("related_object_id").toString()));
      }
      if ((jsonObj.get("related_object_parent_id") != null && !jsonObj.get("related_object_parent_id").isJsonNull()) && !jsonObj.get("related_object_parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_object_parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("related_object_parent_id").toString()));
      }
      if ((jsonObj.get("campaign_name") != null && !jsonObj.get("campaign_name").isJsonNull()) && !jsonObj.get("campaign_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign_name").toString()));
      }
      // validate the optional field `voucher`
      if (jsonObj.get("voucher") != null && !jsonObj.get("voucher").isJsonNull()) {
        RedemptionVoucher.validateJsonElement(jsonObj.get("voucher"));
      }
      // validate the optional field `promotion_tier`
      if (jsonObj.get("promotion_tier") != null && !jsonObj.get("promotion_tier").isJsonNull()) {
        PromotionTier.validateJsonElement(jsonObj.get("promotion_tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedemptionInternal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedemptionInternal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedemptionInternal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedemptionInternal.class));

       return (TypeAdapter<T>) new TypeAdapter<RedemptionInternal>() {
           @Override
           public void write(JsonWriter out, RedemptionInternal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedemptionInternal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RedemptionInternal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RedemptionInternal
  * @throws IOException if the JSON string is invalid with respect to RedemptionInternal
  */
  public static RedemptionInternal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedemptionInternal.class);
  }

 /**
  * Convert an instance of RedemptionInternal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

