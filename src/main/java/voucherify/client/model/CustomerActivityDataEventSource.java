/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import voucherify.client.model.CustomerActivityDataEventSourceApiKey;
import voucherify.client.model.CustomerActivityDataEventSourceUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Contains the source of the object that initiated the sendout.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CustomerActivityDataEventSource {
  /**
   * Determines the channel that initiated the sendout.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    USER_PORTAL("USER_PORTAL"),
    
    API("API"),
    
    CLIENT_API("CLIENT_API"),
    
    INTERNAL("INTERNAL");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private CustomerActivityDataEventSourceUser user;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private CustomerActivityDataEventSourceApiKey apiKey;

  public CustomerActivityDataEventSource() {
  }

  public CustomerActivityDataEventSource channel(ChannelEnum channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Determines the channel that initiated the sendout.
   * @return channel
  **/
  @javax.annotation.Nonnull
  public ChannelEnum getChannel() {
    return channel;
  }


  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public CustomerActivityDataEventSource user(CustomerActivityDataEventSourceUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public CustomerActivityDataEventSourceUser getUser() {
    return user;
  }


  public void setUser(CustomerActivityDataEventSourceUser user) {
    this.user = user;
  }


  public CustomerActivityDataEventSource apiKey(CustomerActivityDataEventSourceApiKey apiKey) {
    
    this.apiKey = apiKey;
    return this;
  }

   /**
   * Get apiKey
   * @return apiKey
  **/
  @javax.annotation.Nullable
  public CustomerActivityDataEventSourceApiKey getApiKey() {
    return apiKey;
  }


  public void setApiKey(CustomerActivityDataEventSourceApiKey apiKey) {
    this.apiKey = apiKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerActivityDataEventSource customerActivityDataEventSource = (CustomerActivityDataEventSource) o;
    return Objects.equals(this.channel, customerActivityDataEventSource.channel) &&
        Objects.equals(this.user, customerActivityDataEventSource.user) &&
        Objects.equals(this.apiKey, customerActivityDataEventSource.apiKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, user, apiKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerActivityDataEventSource {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("user");
    openapiFields.add("api_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channel");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomerActivityDataEventSource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerActivityDataEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerActivityDataEventSource is not found in the empty JSON string", CustomerActivityDataEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerActivityDataEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerActivityDataEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerActivityDataEventSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("channel");

        if (objectElement != null && !objectElement.isJsonNull()) {
          ChannelEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `channel` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("channel") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `channel` to be a valid element of ChannelEnum enum got `%s` instead", jsonObj.get("channel").toString()));
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        CustomerActivityDataEventSourceUser.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `api_key`
      if (jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonNull()) {
        CustomerActivityDataEventSourceApiKey.validateJsonElement(jsonObj.get("api_key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerActivityDataEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerActivityDataEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerActivityDataEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerActivityDataEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerActivityDataEventSource>() {
           @Override
           public void write(JsonWriter out, CustomerActivityDataEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerActivityDataEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerActivityDataEventSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerActivityDataEventSource
  * @throws IOException if the JSON string is invalid with respect to CustomerActivityDataEventSource
  */
  public static CustomerActivityDataEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerActivityDataEventSource.class);
  }

 /**
  * Convert an instance of CustomerActivityDataEventSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

