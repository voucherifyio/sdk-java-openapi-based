/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Stacking Rules Response Body
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ManagementProjectsStackingRulesResponseBody {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXCLUSIVE_CATEGORIES = "exclusive_categories";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_CATEGORIES)
  private List<String> exclusiveCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOINT_CATEGORIES = "joint_categories";
  @SerializedName(SERIALIZED_NAME_JOINT_CATEGORIES)
  private List<String> jointCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDEEMABLES_LIMIT = "redeemables_limit";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_LIMIT)
  private Integer redeemablesLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_REDEEMABLES_LIMIT = "applicable_redeemables_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_REDEEMABLES_LIMIT)
  private Integer applicableRedeemablesLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_REDEEMABLES_PER_CATEGORY_LIMIT = "applicable_redeemables_per_category_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_REDEEMABLES_PER_CATEGORY_LIMIT)
  private Integer applicableRedeemablesPerCategoryLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_LIMIT = "applicable_exclusive_redeemables_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_LIMIT)
  private Integer applicableExclusiveRedeemablesLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_PER_CATEGORY_LIMIT = "applicable_exclusive_redeemables_per_category_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_PER_CATEGORY_LIMIT)
  private Integer applicableExclusiveRedeemablesPerCategoryLimit;

  /**
   * Defines if the discounts are applied by taking into account the initial order amount or the discounted order amount.
   */
  @JsonAdapter(DiscountCalculationModeEnum.Adapter.class)
  public enum DiscountCalculationModeEnum {
    INITIAL_AMOUNT("INITIAL_AMOUNT"),
    
    DISCOUNTED_AMOUNT("DISCOUNTED_AMOUNT");

    private String value;

    DiscountCalculationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscountCalculationModeEnum fromValue(String value) {
      for (DiscountCalculationModeEnum b : DiscountCalculationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscountCalculationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscountCalculationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscountCalculationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscountCalculationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISCOUNT_CALCULATION_MODE = "discount_calculation_mode";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_CALCULATION_MODE)
  private DiscountCalculationModeEnum discountCalculationMode;

  public static final String SERIALIZED_NAME_INITIAL_AMOUNT_MODE_CATEGORIES = "initial_amount_mode_categories";
  @SerializedName(SERIALIZED_NAME_INITIAL_AMOUNT_MODE_CATEGORIES)
  private List<String> initialAmountModeCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOUNTED_AMOUNT_MODE_CATEGORIES = "discounted_amount_mode_categories";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_AMOUNT_MODE_CATEGORIES)
  private List<String> discountedAmountModeCategories = new ArrayList<>();

  /**
   * Defines the application mode for redeemables. &#x60;\&quot;ALL\&quot;&#x60; means that all redeemables must be validated for the redemption to be successful. &#x60;\&quot;PARTIAL\&quot;&#x60; means that only those redeemables that can be validated will be redeemed. The redeemables that fail validaton will be skipped.
   */
  @JsonAdapter(RedeemablesApplicationModeEnum.Adapter.class)
  public enum RedeemablesApplicationModeEnum {
    ALL("ALL"),
    
    PARTIAL("PARTIAL");

    private String value;

    RedeemablesApplicationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesApplicationModeEnum fromValue(String value) {
      for (RedeemablesApplicationModeEnum b : RedeemablesApplicationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedeemablesApplicationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesApplicationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesApplicationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesApplicationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_APPLICATION_MODE = "redeemables_application_mode";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_APPLICATION_MODE)
  private RedeemablesApplicationModeEnum redeemablesApplicationMode;

  /**
   * Defines the sorting rule for redeemables. &#x60;\&quot;CATEGORY_HIERARCHY\&quot;&#x60; means that redeemables are applied with the order established by the hierarchy of the categories. &#x60;\&quot;REQUESTED_ORDER\&quot;&#x60; means that redeemables are applied with the order established in the request.
   */
  @JsonAdapter(RedeemablesSortingRuleEnum.Adapter.class)
  public enum RedeemablesSortingRuleEnum {
    CATEGORY_HIERARCHY("CATEGORY_HIERARCHY"),
    
    REQUESTED_ORDER("REQUESTED_ORDER");

    private String value;

    RedeemablesSortingRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesSortingRuleEnum fromValue(String value) {
      for (RedeemablesSortingRuleEnum b : RedeemablesSortingRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedeemablesSortingRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesSortingRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesSortingRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesSortingRuleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_SORTING_RULE = "redeemables_sorting_rule";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_SORTING_RULE)
  private RedeemablesSortingRuleEnum redeemablesSortingRule;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ManagementProjectsStackingRulesResponseBody() {
  }

  public ManagementProjectsStackingRulesResponseBody id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of the stacking rules.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ManagementProjectsStackingRulesResponseBody exclusiveCategories(List<String> exclusiveCategories) {
    
    this.exclusiveCategories = exclusiveCategories;
    return this;
  }

  public ManagementProjectsStackingRulesResponseBody addExclusiveCategoriesItem(String exclusiveCategoriesItem) {
    if (this.exclusiveCategories == null) {
      this.exclusiveCategories = new ArrayList<>();
    }
    this.exclusiveCategories.add(exclusiveCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the categories that are exclusive.
   * @return exclusiveCategories
  **/
  @javax.annotation.Nonnull
  public List<String> getExclusiveCategories() {
    return exclusiveCategories;
  }


  public void setExclusiveCategories(List<String> exclusiveCategories) {
    this.exclusiveCategories = exclusiveCategories;
  }


  public ManagementProjectsStackingRulesResponseBody jointCategories(List<String> jointCategories) {
    
    this.jointCategories = jointCategories;
    return this;
  }

  public ManagementProjectsStackingRulesResponseBody addJointCategoriesItem(String jointCategoriesItem) {
    if (this.jointCategories == null) {
      this.jointCategories = new ArrayList<>();
    }
    this.jointCategories.add(jointCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the categories that are joint.
   * @return jointCategories
  **/
  @javax.annotation.Nonnull
  public List<String> getJointCategories() {
    return jointCategories;
  }


  public void setJointCategories(List<String> jointCategories) {
    this.jointCategories = jointCategories;
  }


  public ManagementProjectsStackingRulesResponseBody redeemablesLimit(Integer redeemablesLimit) {
    
    this.redeemablesLimit = redeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables can be sent to Voucherify for validation at the same time.
   * minimum: 1
   * maximum: 30
   * @return redeemablesLimit
  **/
  @javax.annotation.Nonnull
  public Integer getRedeemablesLimit() {
    return redeemablesLimit;
  }


  public void setRedeemablesLimit(Integer redeemablesLimit) {
    this.redeemablesLimit = redeemablesLimit;
  }


  public ManagementProjectsStackingRulesResponseBody applicableRedeemablesLimit(Integer applicableRedeemablesLimit) {
    
    this.applicableRedeemablesLimit = applicableRedeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables can be applied at the same time. The number must be less than or equal to &#x60;\&quot;redeemables_limit\&quot;&#x60;.
   * minimum: 1
   * @return applicableRedeemablesLimit
  **/
  @javax.annotation.Nonnull
  public Integer getApplicableRedeemablesLimit() {
    return applicableRedeemablesLimit;
  }


  public void setApplicableRedeemablesLimit(Integer applicableRedeemablesLimit) {
    this.applicableRedeemablesLimit = applicableRedeemablesLimit;
  }


  public ManagementProjectsStackingRulesResponseBody applicableRedeemablesPerCategoryLimit(Integer applicableRedeemablesPerCategoryLimit) {
    
    this.applicableRedeemablesPerCategoryLimit = applicableRedeemablesPerCategoryLimit;
    return this;
  }

   /**
   * Defines how many redeemables with the same category can be applied at the same time. The number must be less than or equal to &#x60;\&quot;applicable_redeemables_limit\&quot;&#x60;.
   * @return applicableRedeemablesPerCategoryLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableRedeemablesPerCategoryLimit() {
    return applicableRedeemablesPerCategoryLimit;
  }


  public void setApplicableRedeemablesPerCategoryLimit(Integer applicableRedeemablesPerCategoryLimit) {
    this.applicableRedeemablesPerCategoryLimit = applicableRedeemablesPerCategoryLimit;
  }


  public ManagementProjectsStackingRulesResponseBody applicableExclusiveRedeemablesLimit(Integer applicableExclusiveRedeemablesLimit) {
    
    this.applicableExclusiveRedeemablesLimit = applicableExclusiveRedeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables with an assigned exclusive category can be applied at the same time.
   * minimum: 1
   * maximum: 5
   * @return applicableExclusiveRedeemablesLimit
  **/
  @javax.annotation.Nonnull
  public Integer getApplicableExclusiveRedeemablesLimit() {
    return applicableExclusiveRedeemablesLimit;
  }


  public void setApplicableExclusiveRedeemablesLimit(Integer applicableExclusiveRedeemablesLimit) {
    this.applicableExclusiveRedeemablesLimit = applicableExclusiveRedeemablesLimit;
  }


  public ManagementProjectsStackingRulesResponseBody applicableExclusiveRedeemablesPerCategoryLimit(Integer applicableExclusiveRedeemablesPerCategoryLimit) {
    
    this.applicableExclusiveRedeemablesPerCategoryLimit = applicableExclusiveRedeemablesPerCategoryLimit;
    return this;
  }

   /**
   * Defines how many exclusive redeemables with the same category can be applied at the same time. The number must be less than or equal to &#x60;\&quot;applicable_exclusive_redeemables_limit\&quot;&#x60;.
   * @return applicableExclusiveRedeemablesPerCategoryLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableExclusiveRedeemablesPerCategoryLimit() {
    return applicableExclusiveRedeemablesPerCategoryLimit;
  }


  public void setApplicableExclusiveRedeemablesPerCategoryLimit(Integer applicableExclusiveRedeemablesPerCategoryLimit) {
    this.applicableExclusiveRedeemablesPerCategoryLimit = applicableExclusiveRedeemablesPerCategoryLimit;
  }


  public ManagementProjectsStackingRulesResponseBody discountCalculationMode(DiscountCalculationModeEnum discountCalculationMode) {
    
    this.discountCalculationMode = discountCalculationMode;
    return this;
  }

   /**
   * Defines if the discounts are applied by taking into account the initial order amount or the discounted order amount.
   * @return discountCalculationMode
  **/
  @javax.annotation.Nonnull
  public DiscountCalculationModeEnum getDiscountCalculationMode() {
    return discountCalculationMode;
  }


  public void setDiscountCalculationMode(DiscountCalculationModeEnum discountCalculationMode) {
    this.discountCalculationMode = discountCalculationMode;
  }


  public ManagementProjectsStackingRulesResponseBody initialAmountModeCategories(List<String> initialAmountModeCategories) {
    
    this.initialAmountModeCategories = initialAmountModeCategories;
    return this;
  }

  public ManagementProjectsStackingRulesResponseBody addInitialAmountModeCategoriesItem(String initialAmountModeCategoriesItem) {
    if (this.initialAmountModeCategories == null) {
      this.initialAmountModeCategories = new ArrayList<>();
    }
    this.initialAmountModeCategories.add(initialAmountModeCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the categories that apply a discount based on the initial amount.
   * @return initialAmountModeCategories
  **/
  @javax.annotation.Nonnull
  public List<String> getInitialAmountModeCategories() {
    return initialAmountModeCategories;
  }


  public void setInitialAmountModeCategories(List<String> initialAmountModeCategories) {
    this.initialAmountModeCategories = initialAmountModeCategories;
  }


  public ManagementProjectsStackingRulesResponseBody discountedAmountModeCategories(List<String> discountedAmountModeCategories) {
    
    this.discountedAmountModeCategories = discountedAmountModeCategories;
    return this;
  }

  public ManagementProjectsStackingRulesResponseBody addDiscountedAmountModeCategoriesItem(String discountedAmountModeCategoriesItem) {
    if (this.discountedAmountModeCategories == null) {
      this.discountedAmountModeCategories = new ArrayList<>();
    }
    this.discountedAmountModeCategories.add(discountedAmountModeCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the categories that apply a discount based on the discounted amount.
   * @return discountedAmountModeCategories
  **/
  @javax.annotation.Nonnull
  public List<String> getDiscountedAmountModeCategories() {
    return discountedAmountModeCategories;
  }


  public void setDiscountedAmountModeCategories(List<String> discountedAmountModeCategories) {
    this.discountedAmountModeCategories = discountedAmountModeCategories;
  }


  public ManagementProjectsStackingRulesResponseBody redeemablesApplicationMode(RedeemablesApplicationModeEnum redeemablesApplicationMode) {
    
    this.redeemablesApplicationMode = redeemablesApplicationMode;
    return this;
  }

   /**
   * Defines the application mode for redeemables. &#x60;\&quot;ALL\&quot;&#x60; means that all redeemables must be validated for the redemption to be successful. &#x60;\&quot;PARTIAL\&quot;&#x60; means that only those redeemables that can be validated will be redeemed. The redeemables that fail validaton will be skipped.
   * @return redeemablesApplicationMode
  **/
  @javax.annotation.Nonnull
  public RedeemablesApplicationModeEnum getRedeemablesApplicationMode() {
    return redeemablesApplicationMode;
  }


  public void setRedeemablesApplicationMode(RedeemablesApplicationModeEnum redeemablesApplicationMode) {
    this.redeemablesApplicationMode = redeemablesApplicationMode;
  }


  public ManagementProjectsStackingRulesResponseBody redeemablesSortingRule(RedeemablesSortingRuleEnum redeemablesSortingRule) {
    
    this.redeemablesSortingRule = redeemablesSortingRule;
    return this;
  }

   /**
   * Defines the sorting rule for redeemables. &#x60;\&quot;CATEGORY_HIERARCHY\&quot;&#x60; means that redeemables are applied with the order established by the hierarchy of the categories. &#x60;\&quot;REQUESTED_ORDER\&quot;&#x60; means that redeemables are applied with the order established in the request.
   * @return redeemablesSortingRule
  **/
  @javax.annotation.Nonnull
  public RedeemablesSortingRuleEnum getRedeemablesSortingRule() {
    return redeemablesSortingRule;
  }


  public void setRedeemablesSortingRule(RedeemablesSortingRuleEnum redeemablesSortingRule) {
    this.redeemablesSortingRule = redeemablesSortingRule;
  }


  public ManagementProjectsStackingRulesResponseBody createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the stacking rules were created. The value for this parameter is shown in the ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ManagementProjectsStackingRulesResponseBody updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the stacking rules were updated. The value for this parameter is shown in the ISO 8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementProjectsStackingRulesResponseBody managementProjectsStackingRulesResponseBody = (ManagementProjectsStackingRulesResponseBody) o;
    return Objects.equals(this.id, managementProjectsStackingRulesResponseBody.id) &&
        Objects.equals(this.exclusiveCategories, managementProjectsStackingRulesResponseBody.exclusiveCategories) &&
        Objects.equals(this.jointCategories, managementProjectsStackingRulesResponseBody.jointCategories) &&
        Objects.equals(this.redeemablesLimit, managementProjectsStackingRulesResponseBody.redeemablesLimit) &&
        Objects.equals(this.applicableRedeemablesLimit, managementProjectsStackingRulesResponseBody.applicableRedeemablesLimit) &&
        Objects.equals(this.applicableRedeemablesPerCategoryLimit, managementProjectsStackingRulesResponseBody.applicableRedeemablesPerCategoryLimit) &&
        Objects.equals(this.applicableExclusiveRedeemablesLimit, managementProjectsStackingRulesResponseBody.applicableExclusiveRedeemablesLimit) &&
        Objects.equals(this.applicableExclusiveRedeemablesPerCategoryLimit, managementProjectsStackingRulesResponseBody.applicableExclusiveRedeemablesPerCategoryLimit) &&
        Objects.equals(this.discountCalculationMode, managementProjectsStackingRulesResponseBody.discountCalculationMode) &&
        Objects.equals(this.initialAmountModeCategories, managementProjectsStackingRulesResponseBody.initialAmountModeCategories) &&
        Objects.equals(this.discountedAmountModeCategories, managementProjectsStackingRulesResponseBody.discountedAmountModeCategories) &&
        Objects.equals(this.redeemablesApplicationMode, managementProjectsStackingRulesResponseBody.redeemablesApplicationMode) &&
        Objects.equals(this.redeemablesSortingRule, managementProjectsStackingRulesResponseBody.redeemablesSortingRule) &&
        Objects.equals(this.createdAt, managementProjectsStackingRulesResponseBody.createdAt) &&
        Objects.equals(this.updatedAt, managementProjectsStackingRulesResponseBody.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, exclusiveCategories, jointCategories, redeemablesLimit, applicableRedeemablesLimit, applicableRedeemablesPerCategoryLimit, applicableExclusiveRedeemablesLimit, applicableExclusiveRedeemablesPerCategoryLimit, discountCalculationMode, initialAmountModeCategories, discountedAmountModeCategories, redeemablesApplicationMode, redeemablesSortingRule, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementProjectsStackingRulesResponseBody {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    exclusiveCategories: ").append(toIndentedString(exclusiveCategories)).append("\n");
    sb.append("    jointCategories: ").append(toIndentedString(jointCategories)).append("\n");
    sb.append("    redeemablesLimit: ").append(toIndentedString(redeemablesLimit)).append("\n");
    sb.append("    applicableRedeemablesLimit: ").append(toIndentedString(applicableRedeemablesLimit)).append("\n");
    sb.append("    applicableRedeemablesPerCategoryLimit: ").append(toIndentedString(applicableRedeemablesPerCategoryLimit)).append("\n");
    sb.append("    applicableExclusiveRedeemablesLimit: ").append(toIndentedString(applicableExclusiveRedeemablesLimit)).append("\n");
    sb.append("    applicableExclusiveRedeemablesPerCategoryLimit: ").append(toIndentedString(applicableExclusiveRedeemablesPerCategoryLimit)).append("\n");
    sb.append("    discountCalculationMode: ").append(toIndentedString(discountCalculationMode)).append("\n");
    sb.append("    initialAmountModeCategories: ").append(toIndentedString(initialAmountModeCategories)).append("\n");
    sb.append("    discountedAmountModeCategories: ").append(toIndentedString(discountedAmountModeCategories)).append("\n");
    sb.append("    redeemablesApplicationMode: ").append(toIndentedString(redeemablesApplicationMode)).append("\n");
    sb.append("    redeemablesSortingRule: ").append(toIndentedString(redeemablesSortingRule)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("exclusive_categories");
    openapiFields.add("joint_categories");
    openapiFields.add("redeemables_limit");
    openapiFields.add("applicable_redeemables_limit");
    openapiFields.add("applicable_redeemables_per_category_limit");
    openapiFields.add("applicable_exclusive_redeemables_limit");
    openapiFields.add("applicable_exclusive_redeemables_per_category_limit");
    openapiFields.add("discount_calculation_mode");
    openapiFields.add("initial_amount_mode_categories");
    openapiFields.add("discounted_amount_mode_categories");
    openapiFields.add("redeemables_application_mode");
    openapiFields.add("redeemables_sorting_rule");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("exclusive_categories");
    openapiRequiredFields.add("joint_categories");
    openapiRequiredFields.add("redeemables_limit");
    openapiRequiredFields.add("applicable_redeemables_limit");
    openapiRequiredFields.add("applicable_exclusive_redeemables_limit");
    openapiRequiredFields.add("discount_calculation_mode");
    openapiRequiredFields.add("initial_amount_mode_categories");
    openapiRequiredFields.add("discounted_amount_mode_categories");
    openapiRequiredFields.add("redeemables_application_mode");
    openapiRequiredFields.add("redeemables_sorting_rule");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ManagementProjectsStackingRulesResponseBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagementProjectsStackingRulesResponseBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagementProjectsStackingRulesResponseBody is not found in the empty JSON string", ManagementProjectsStackingRulesResponseBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagementProjectsStackingRulesResponseBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagementProjectsStackingRulesResponseBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManagementProjectsStackingRulesResponseBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("exclusive_categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("exclusive_categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusive_categories` to be an array in the JSON string but got `%s`", jsonObj.get("exclusive_categories").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("joint_categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("joint_categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `joint_categories` to be an array in the JSON string but got `%s`", jsonObj.get("joint_categories").toString()));
      }
      if (!jsonObj.get("discount_calculation_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_calculation_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_calculation_mode").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("discount_calculation_mode");

        if (objectElement != null && !objectElement.isJsonNull()) {
          DiscountCalculationModeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `discount_calculation_mode` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("discount_calculation_mode") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `discount_calculation_mode` to be a valid element of DiscountCalculationModeEnum enum got `%s` instead", jsonObj.get("discount_calculation_mode").toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("initial_amount_mode_categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("initial_amount_mode_categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_amount_mode_categories` to be an array in the JSON string but got `%s`", jsonObj.get("initial_amount_mode_categories").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("discounted_amount_mode_categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("discounted_amount_mode_categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `discounted_amount_mode_categories` to be an array in the JSON string but got `%s`", jsonObj.get("discounted_amount_mode_categories").toString()));
      }
      if (!jsonObj.get("redeemables_application_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redeemables_application_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redeemables_application_mode").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("redeemables_application_mode");

        if (objectElement != null && !objectElement.isJsonNull()) {
          RedeemablesApplicationModeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `redeemables_application_mode` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("redeemables_application_mode") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `redeemables_application_mode` to be a valid element of RedeemablesApplicationModeEnum enum got `%s` instead", jsonObj.get("redeemables_application_mode").toString()));
        }
      }
      if (!jsonObj.get("redeemables_sorting_rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redeemables_sorting_rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redeemables_sorting_rule").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("redeemables_sorting_rule");

        if (objectElement != null && !objectElement.isJsonNull()) {
          RedeemablesSortingRuleEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `redeemables_sorting_rule` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("redeemables_sorting_rule") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `redeemables_sorting_rule` to be a valid element of RedeemablesSortingRuleEnum enum got `%s` instead", jsonObj.get("redeemables_sorting_rule").toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementProjectsStackingRulesResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementProjectsStackingRulesResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementProjectsStackingRulesResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementProjectsStackingRulesResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementProjectsStackingRulesResponseBody>() {
           @Override
           public void write(JsonWriter out, ManagementProjectsStackingRulesResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementProjectsStackingRulesResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManagementProjectsStackingRulesResponseBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManagementProjectsStackingRulesResponseBody
  * @throws IOException if the JSON string is invalid with respect to ManagementProjectsStackingRulesResponseBody
  */
  public static ManagementProjectsStackingRulesResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementProjectsStackingRulesResponseBody.class);
  }

 /**
  * Convert an instance of ManagementProjectsStackingRulesResponseBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

