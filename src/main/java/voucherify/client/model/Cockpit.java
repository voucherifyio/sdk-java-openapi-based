/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Defines customer cockpit details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Cockpit {
  public static final String SERIALIZED_NAME_CAMPAIGNS_OVERVIEW_ENABLED = "campaigns_overview_enabled";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS_OVERVIEW_ENABLED)
  private Boolean campaignsOverviewEnabled;

  public static final String SERIALIZED_NAME_LOYALTY_ENABLED = "loyalty_enabled";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ENABLED)
  private Boolean loyaltyEnabled;

  public static final String SERIALIZED_NAME_GIFT_CARDS_ENABLED = "gift_cards_enabled";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS_ENABLED)
  private Boolean giftCardsEnabled;

  public static final String SERIALIZED_NAME_COUPONS_ENABLED = "coupons_enabled";
  @SerializedName(SERIALIZED_NAME_COUPONS_ENABLED)
  private Boolean couponsEnabled;

  public static final String SERIALIZED_NAME_REFERRALS_ENABLED = "referrals_enabled";
  @SerializedName(SERIALIZED_NAME_REFERRALS_ENABLED)
  private Boolean referralsEnabled;

  public static final String SERIALIZED_NAME_LUCKY_DRAW_ENABLED = "lucky_draw_enabled";
  @SerializedName(SERIALIZED_NAME_LUCKY_DRAW_ENABLED)
  private Boolean luckyDrawEnabled;

  /**
   * Determines the color scheme of the customer cockpit.
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
  public enum ThemeEnum {
    ORANGE("orange"),
    
    GREEN("green"),
    
    DARK_GREEN("dark-green"),
    
    BLUE("blue"),
    
    PURPLE("purple"),
    
    RED("red"),
    
    GREY("grey");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThemeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private ThemeEnum theme;

  public static final String SERIALIZED_NAME_USE_CUSTOM_DOUBLE_OPT_IN_REDIRECT_URL = "use_custom_double_opt_in_redirect_url";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_DOUBLE_OPT_IN_REDIRECT_URL)
  private Boolean useCustomDoubleOptInRedirectUrl;

  public static final String SERIALIZED_NAME_CUSTOM_DOUBLE_OPT_IN_REDIRECT_URL = "custom_double_opt_in_redirect_url";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOUBLE_OPT_IN_REDIRECT_URL)
  private String customDoubleOptInRedirectUrl;

  public Cockpit() {
  }

  public Cockpit campaignsOverviewEnabled(Boolean campaignsOverviewEnabled) {
    
    this.campaignsOverviewEnabled = campaignsOverviewEnabled;
    return this;
  }

   /**
   * Indicates if the campaign overview is turned on for customers.
   * @return campaignsOverviewEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getCampaignsOverviewEnabled() {
    return campaignsOverviewEnabled;
  }


  public void setCampaignsOverviewEnabled(Boolean campaignsOverviewEnabled) {
    this.campaignsOverviewEnabled = campaignsOverviewEnabled;
  }


  public Cockpit loyaltyEnabled(Boolean loyaltyEnabled) {
    
    this.loyaltyEnabled = loyaltyEnabled;
    return this;
  }

   /**
   * Indicates if the loyalty campaign overview is turned on for customers.
   * @return loyaltyEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getLoyaltyEnabled() {
    return loyaltyEnabled;
  }


  public void setLoyaltyEnabled(Boolean loyaltyEnabled) {
    this.loyaltyEnabled = loyaltyEnabled;
  }


  public Cockpit giftCardsEnabled(Boolean giftCardsEnabled) {
    
    this.giftCardsEnabled = giftCardsEnabled;
    return this;
  }

   /**
   * Indicates if the gift card overview is turned on for customers.
   * @return giftCardsEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getGiftCardsEnabled() {
    return giftCardsEnabled;
  }


  public void setGiftCardsEnabled(Boolean giftCardsEnabled) {
    this.giftCardsEnabled = giftCardsEnabled;
  }


  public Cockpit couponsEnabled(Boolean couponsEnabled) {
    
    this.couponsEnabled = couponsEnabled;
    return this;
  }

   /**
   * Indicates if the discount coupon overview is turned on for customers.
   * @return couponsEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getCouponsEnabled() {
    return couponsEnabled;
  }


  public void setCouponsEnabled(Boolean couponsEnabled) {
    this.couponsEnabled = couponsEnabled;
  }


  public Cockpit referralsEnabled(Boolean referralsEnabled) {
    
    this.referralsEnabled = referralsEnabled;
    return this;
  }

   /**
   * Indicates if the referral campaign overview is turned on for customers.
   * @return referralsEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getReferralsEnabled() {
    return referralsEnabled;
  }


  public void setReferralsEnabled(Boolean referralsEnabled) {
    this.referralsEnabled = referralsEnabled;
  }


  public Cockpit luckyDrawEnabled(Boolean luckyDrawEnabled) {
    
    this.luckyDrawEnabled = luckyDrawEnabled;
    return this;
  }

   /**
   * Indicates if the lucky draw overview is turned on for customers.
   * @return luckyDrawEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getLuckyDrawEnabled() {
    return luckyDrawEnabled;
  }


  public void setLuckyDrawEnabled(Boolean luckyDrawEnabled) {
    this.luckyDrawEnabled = luckyDrawEnabled;
  }


  public Cockpit theme(ThemeEnum theme) {
    
    this.theme = theme;
    return this;
  }

   /**
   * Determines the color scheme of the customer cockpit.
   * @return theme
  **/
  @javax.annotation.Nullable
  public ThemeEnum getTheme() {
    return theme;
  }


  public void setTheme(ThemeEnum theme) {
    this.theme = theme;
  }


  public Cockpit useCustomDoubleOptInRedirectUrl(Boolean useCustomDoubleOptInRedirectUrl) {
    
    this.useCustomDoubleOptInRedirectUrl = useCustomDoubleOptInRedirectUrl;
    return this;
  }

   /**
   * Indicates if the double opt-in option is turned on.
   * @return useCustomDoubleOptInRedirectUrl
  **/
  @javax.annotation.Nullable
  public Boolean getUseCustomDoubleOptInRedirectUrl() {
    return useCustomDoubleOptInRedirectUrl;
  }


  public void setUseCustomDoubleOptInRedirectUrl(Boolean useCustomDoubleOptInRedirectUrl) {
    this.useCustomDoubleOptInRedirectUrl = useCustomDoubleOptInRedirectUrl;
  }


  public Cockpit customDoubleOptInRedirectUrl(String customDoubleOptInRedirectUrl) {
    
    this.customDoubleOptInRedirectUrl = customDoubleOptInRedirectUrl;
    return this;
  }

   /**
   * Defines the URL for the double opt-in consent.
   * @return customDoubleOptInRedirectUrl
  **/
  @javax.annotation.Nullable
  public String getCustomDoubleOptInRedirectUrl() {
    return customDoubleOptInRedirectUrl;
  }


  public void setCustomDoubleOptInRedirectUrl(String customDoubleOptInRedirectUrl) {
    this.customDoubleOptInRedirectUrl = customDoubleOptInRedirectUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cockpit cockpit = (Cockpit) o;
    return Objects.equals(this.campaignsOverviewEnabled, cockpit.campaignsOverviewEnabled) &&
        Objects.equals(this.loyaltyEnabled, cockpit.loyaltyEnabled) &&
        Objects.equals(this.giftCardsEnabled, cockpit.giftCardsEnabled) &&
        Objects.equals(this.couponsEnabled, cockpit.couponsEnabled) &&
        Objects.equals(this.referralsEnabled, cockpit.referralsEnabled) &&
        Objects.equals(this.luckyDrawEnabled, cockpit.luckyDrawEnabled) &&
        Objects.equals(this.theme, cockpit.theme) &&
        Objects.equals(this.useCustomDoubleOptInRedirectUrl, cockpit.useCustomDoubleOptInRedirectUrl) &&
        Objects.equals(this.customDoubleOptInRedirectUrl, cockpit.customDoubleOptInRedirectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignsOverviewEnabled, loyaltyEnabled, giftCardsEnabled, couponsEnabled, referralsEnabled, luckyDrawEnabled, theme, useCustomDoubleOptInRedirectUrl, customDoubleOptInRedirectUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cockpit {\n");
    sb.append("    campaignsOverviewEnabled: ").append(toIndentedString(campaignsOverviewEnabled)).append("\n");
    sb.append("    loyaltyEnabled: ").append(toIndentedString(loyaltyEnabled)).append("\n");
    sb.append("    giftCardsEnabled: ").append(toIndentedString(giftCardsEnabled)).append("\n");
    sb.append("    couponsEnabled: ").append(toIndentedString(couponsEnabled)).append("\n");
    sb.append("    referralsEnabled: ").append(toIndentedString(referralsEnabled)).append("\n");
    sb.append("    luckyDrawEnabled: ").append(toIndentedString(luckyDrawEnabled)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    useCustomDoubleOptInRedirectUrl: ").append(toIndentedString(useCustomDoubleOptInRedirectUrl)).append("\n");
    sb.append("    customDoubleOptInRedirectUrl: ").append(toIndentedString(customDoubleOptInRedirectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaigns_overview_enabled");
    openapiFields.add("loyalty_enabled");
    openapiFields.add("gift_cards_enabled");
    openapiFields.add("coupons_enabled");
    openapiFields.add("referrals_enabled");
    openapiFields.add("lucky_draw_enabled");
    openapiFields.add("theme");
    openapiFields.add("use_custom_double_opt_in_redirect_url");
    openapiFields.add("custom_double_opt_in_redirect_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Cockpit
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cockpit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cockpit is not found in the empty JSON string", Cockpit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cockpit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cockpit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("theme");

        if (objectElement != null && !objectElement.isJsonNull()) {
          ThemeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `theme` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("theme") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `theme` to be a valid element of ThemeEnum enum got `%s` instead", jsonObj.get("theme").toString()));
        }
      }
      if ((jsonObj.get("custom_double_opt_in_redirect_url") != null && !jsonObj.get("custom_double_opt_in_redirect_url").isJsonNull()) && !jsonObj.get("custom_double_opt_in_redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_double_opt_in_redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_double_opt_in_redirect_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cockpit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cockpit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cockpit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cockpit.class));

       return (TypeAdapter<T>) new TypeAdapter<Cockpit>() {
           @Override
           public void write(JsonWriter out, Cockpit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cockpit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Cockpit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Cockpit
  * @throws IOException if the JSON string is invalid with respect to Cockpit
  */
  public static Cockpit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cockpit.class);
  }

 /**
  * Convert an instance of Cockpit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

