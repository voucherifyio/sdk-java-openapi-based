/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import voucherify.client.model.ExportCustomerBase;
import voucherify.client.model.ExportOrderBase;
import voucherify.client.model.ExportPointsExpirationBase;
import voucherify.client.model.ExportPublicationBase;
import voucherify.client.model.ExportRedemptionBase;
import voucherify.client.model.ExportVoucherBase;
import voucherify.client.model.ExportVoucherTransactionsBase;
import voucherify.client.model.LoyaltiesMembersTransactionsExportCreateRequestBodyParameters;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import voucherify.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-17T09:04:49.535428+01:00[Europe/Warsaw]")
public class ExportsCreateRequestBody extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ExportsCreateRequestBody.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExportsCreateRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ExportsCreateRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExportVoucherBase> adapterExportVoucherBase = gson.getDelegateAdapter(this, TypeToken.get(ExportVoucherBase.class));
            final TypeAdapter<ExportRedemptionBase> adapterExportRedemptionBase = gson.getDelegateAdapter(this, TypeToken.get(ExportRedemptionBase.class));
            final TypeAdapter<ExportCustomerBase> adapterExportCustomerBase = gson.getDelegateAdapter(this, TypeToken.get(ExportCustomerBase.class));
            final TypeAdapter<ExportPublicationBase> adapterExportPublicationBase = gson.getDelegateAdapter(this, TypeToken.get(ExportPublicationBase.class));
            final TypeAdapter<ExportOrderBase> adapterExportOrderBase = gson.getDelegateAdapter(this, TypeToken.get(ExportOrderBase.class));
            final TypeAdapter<ExportPointsExpirationBase> adapterExportPointsExpirationBase = gson.getDelegateAdapter(this, TypeToken.get(ExportPointsExpirationBase.class));
            final TypeAdapter<ExportVoucherTransactionsBase> adapterExportVoucherTransactionsBase = gson.getDelegateAdapter(this, TypeToken.get(ExportVoucherTransactionsBase.class));

            return (TypeAdapter<T>) new TypeAdapter<ExportsCreateRequestBody>() {
                @Override
                public void write(JsonWriter out, ExportsCreateRequestBody value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExportVoucherBase`
                    if (value.getActualInstance() instanceof ExportVoucherBase) {
                      JsonElement element = adapterExportVoucherBase.toJsonTree((ExportVoucherBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportRedemptionBase`
                    if (value.getActualInstance() instanceof ExportRedemptionBase) {
                      JsonElement element = adapterExportRedemptionBase.toJsonTree((ExportRedemptionBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportCustomerBase`
                    if (value.getActualInstance() instanceof ExportCustomerBase) {
                      JsonElement element = adapterExportCustomerBase.toJsonTree((ExportCustomerBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportPublicationBase`
                    if (value.getActualInstance() instanceof ExportPublicationBase) {
                      JsonElement element = adapterExportPublicationBase.toJsonTree((ExportPublicationBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportOrderBase`
                    if (value.getActualInstance() instanceof ExportOrderBase) {
                      JsonElement element = adapterExportOrderBase.toJsonTree((ExportOrderBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportPointsExpirationBase`
                    if (value.getActualInstance() instanceof ExportPointsExpirationBase) {
                      JsonElement element = adapterExportPointsExpirationBase.toJsonTree((ExportPointsExpirationBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportVoucherTransactionsBase`
                    if (value.getActualInstance() instanceof ExportVoucherTransactionsBase) {
                      JsonElement element = adapterExportVoucherTransactionsBase.toJsonTree((ExportVoucherTransactionsBase)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ExportCustomerBase, ExportOrderBase, ExportPointsExpirationBase, ExportPublicationBase, ExportRedemptionBase, ExportVoucherBase, ExportVoucherTransactionsBase");
                }

                @Override
                public ExportsCreateRequestBody read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExportVoucherBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportVoucherBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportVoucherBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportVoucherBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportVoucherBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportVoucherBase'", e);
                    }
                    // deserialize ExportRedemptionBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportRedemptionBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportRedemptionBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportRedemptionBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportRedemptionBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportRedemptionBase'", e);
                    }
                    // deserialize ExportCustomerBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportCustomerBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportCustomerBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportCustomerBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportCustomerBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportCustomerBase'", e);
                    }
                    // deserialize ExportPublicationBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportPublicationBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportPublicationBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportPublicationBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportPublicationBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportPublicationBase'", e);
                    }
                    // deserialize ExportOrderBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportOrderBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportOrderBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportOrderBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportOrderBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportOrderBase'", e);
                    }
                    // deserialize ExportPointsExpirationBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportPointsExpirationBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportPointsExpirationBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportPointsExpirationBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportPointsExpirationBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportPointsExpirationBase'", e);
                    }
                    // deserialize ExportVoucherTransactionsBase
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportVoucherTransactionsBase.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportVoucherTransactionsBase;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportVoucherTransactionsBase'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportVoucherTransactionsBase failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportVoucherTransactionsBase'", e);
                    }

                    if (match == 1) {
                        ExportsCreateRequestBody ret = new ExportsCreateRequestBody();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ExportsCreateRequestBody: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ExportsCreateRequestBody() {
        super("oneOf", Boolean.FALSE);
    }

    public ExportsCreateRequestBody(ExportCustomerBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ExportsCreateRequestBody(ExportOrderBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ExportsCreateRequestBody(ExportPointsExpirationBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ExportsCreateRequestBody(ExportPublicationBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ExportsCreateRequestBody(ExportRedemptionBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ExportsCreateRequestBody(ExportVoucherBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ExportsCreateRequestBody(ExportVoucherTransactionsBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExportVoucherBase", ExportVoucherBase.class);
        schemas.put("ExportRedemptionBase", ExportRedemptionBase.class);
        schemas.put("ExportCustomerBase", ExportCustomerBase.class);
        schemas.put("ExportPublicationBase", ExportPublicationBase.class);
        schemas.put("ExportOrderBase", ExportOrderBase.class);
        schemas.put("ExportPointsExpirationBase", ExportPointsExpirationBase.class);
        schemas.put("ExportVoucherTransactionsBase", ExportVoucherTransactionsBase.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ExportsCreateRequestBody.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ExportCustomerBase, ExportOrderBase, ExportPointsExpirationBase, ExportPublicationBase, ExportRedemptionBase, ExportVoucherBase, ExportVoucherTransactionsBase
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExportVoucherBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportRedemptionBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportCustomerBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportPublicationBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportOrderBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportPointsExpirationBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportVoucherTransactionsBase) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ExportCustomerBase, ExportOrderBase, ExportPointsExpirationBase, ExportPublicationBase, ExportRedemptionBase, ExportVoucherBase, ExportVoucherTransactionsBase");
    }

    /**
     * Get the actual instance, which can be the following:
     * ExportCustomerBase, ExportOrderBase, ExportPointsExpirationBase, ExportPublicationBase, ExportRedemptionBase, ExportVoucherBase, ExportVoucherTransactionsBase
     *
     * @return The actual instance (ExportCustomerBase, ExportOrderBase, ExportPointsExpirationBase, ExportPublicationBase, ExportRedemptionBase, ExportVoucherBase, ExportVoucherTransactionsBase)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExportVoucherBase`. If the actual instance is not `ExportVoucherBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportVoucherBase`
     * @throws ClassCastException if the instance is not `ExportVoucherBase`
     */
    public ExportVoucherBase getExportVoucherBase() throws ClassCastException {
        return (ExportVoucherBase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportRedemptionBase`. If the actual instance is not `ExportRedemptionBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportRedemptionBase`
     * @throws ClassCastException if the instance is not `ExportRedemptionBase`
     */
    public ExportRedemptionBase getExportRedemptionBase() throws ClassCastException {
        return (ExportRedemptionBase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportCustomerBase`. If the actual instance is not `ExportCustomerBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportCustomerBase`
     * @throws ClassCastException if the instance is not `ExportCustomerBase`
     */
    public ExportCustomerBase getExportCustomerBase() throws ClassCastException {
        return (ExportCustomerBase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportPublicationBase`. If the actual instance is not `ExportPublicationBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportPublicationBase`
     * @throws ClassCastException if the instance is not `ExportPublicationBase`
     */
    public ExportPublicationBase getExportPublicationBase() throws ClassCastException {
        return (ExportPublicationBase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportOrderBase`. If the actual instance is not `ExportOrderBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportOrderBase`
     * @throws ClassCastException if the instance is not `ExportOrderBase`
     */
    public ExportOrderBase getExportOrderBase() throws ClassCastException {
        return (ExportOrderBase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportPointsExpirationBase`. If the actual instance is not `ExportPointsExpirationBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportPointsExpirationBase`
     * @throws ClassCastException if the instance is not `ExportPointsExpirationBase`
     */
    public ExportPointsExpirationBase getExportPointsExpirationBase() throws ClassCastException {
        return (ExportPointsExpirationBase)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportVoucherTransactionsBase`. If the actual instance is not `ExportVoucherTransactionsBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportVoucherTransactionsBase`
     * @throws ClassCastException if the instance is not `ExportVoucherTransactionsBase`
     */
    public ExportVoucherTransactionsBase getExportVoucherTransactionsBase() throws ClassCastException {
        return (ExportVoucherTransactionsBase)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExportsCreateRequestBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ExportVoucherBase
    try {
      ExportVoucherBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportVoucherBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportRedemptionBase
    try {
      ExportRedemptionBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportRedemptionBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportCustomerBase
    try {
      ExportCustomerBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportCustomerBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportPublicationBase
    try {
      ExportPublicationBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportPublicationBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportOrderBase
    try {
      ExportOrderBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportOrderBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportPointsExpirationBase
    try {
      ExportPointsExpirationBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportPointsExpirationBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportVoucherTransactionsBase
    try {
      ExportVoucherTransactionsBase.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportVoucherTransactionsBase failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ExportsCreateRequestBody with oneOf schemas: ExportCustomerBase, ExportOrderBase, ExportPointsExpirationBase, ExportPublicationBase, ExportRedemptionBase, ExportVoucherBase, ExportVoucherTransactionsBase. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of ExportsCreateRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportsCreateRequestBody
  * @throws IOException if the JSON string is invalid with respect to ExportsCreateRequestBody
  */
  public static ExportsCreateRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportsCreateRequestBody.class);
  }

 /**
  * Convert an instance of ExportsCreateRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

