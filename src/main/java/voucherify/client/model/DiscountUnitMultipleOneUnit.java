/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import voucherify.client.model.SimpleProductDiscountUnit;
import voucherify.client.model.SimpleSkuDiscountUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * DiscountUnitMultipleOneUnit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-17T09:00:53.208514+01:00[Europe/Warsaw]")
public class DiscountUnitMultipleOneUnit {
  public static final String SERIALIZED_NAME_UNIT_OFF = "unit_off";
  @SerializedName(SERIALIZED_NAME_UNIT_OFF)
  private BigDecimal unitOff;

  public static final String SERIALIZED_NAME_UNIT_OFF_FORMULA = "unit_off_formula";
  @SerializedName(SERIALIZED_NAME_UNIT_OFF_FORMULA)
  private String unitOffFormula;

  /**
   * Defines how the unit is added to the customer&#39;s order.  
   */
  @JsonAdapter(EffectEnum.Adapter.class)
  public enum EffectEnum {
    NEW_ITEMS("ADD_NEW_ITEMS"),
    
    MISSING_ITEMS("ADD_MISSING_ITEMS");

    private String value;

    EffectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectEnum fromValue(String value) {
      for (EffectEnum b : EffectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private EffectEnum effect;

  public static final String SERIALIZED_NAME_UNIT_TYPE = "unit_type";
  @SerializedName(SERIALIZED_NAME_UNIT_TYPE)
  private String unitType;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private SimpleProductDiscountUnit product;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private SimpleSkuDiscountUnit sku;

  public DiscountUnitMultipleOneUnit() {
  }

  public DiscountUnitMultipleOneUnit unitOff(BigDecimal unitOff) {
    
    this.unitOff = unitOff;
    return this;
  }

   /**
   * Number of units to be granted a full value discount.
   * @return unitOff
  **/
  @javax.annotation.Nullable
  public BigDecimal getUnitOff() {
    return unitOff;
  }


  public void setUnitOff(BigDecimal unitOff) {
    this.unitOff = unitOff;
  }


  public DiscountUnitMultipleOneUnit unitOffFormula(String unitOffFormula) {
    
    this.unitOffFormula = unitOffFormula;
    return this;
  }

   /**
   * Get unitOffFormula
   * @return unitOffFormula
  **/
  @javax.annotation.Nullable
  public String getUnitOffFormula() {
    return unitOffFormula;
  }


  public void setUnitOffFormula(String unitOffFormula) {
    this.unitOffFormula = unitOffFormula;
  }


  public DiscountUnitMultipleOneUnit effect(EffectEnum effect) {
    
    this.effect = effect;
    return this;
  }

   /**
   * Defines how the unit is added to the customer&#39;s order.  
   * @return effect
  **/
  @javax.annotation.Nonnull
  public EffectEnum getEffect() {
    return effect;
  }


  public void setEffect(EffectEnum effect) {
    this.effect = effect;
  }


  public DiscountUnitMultipleOneUnit unitType(String unitType) {
    
    this.unitType = unitType;
    return this;
  }

   /**
   * The product deemed as free, chosen from product inventory (e.g. time, items).
   * @return unitType
  **/
  @javax.annotation.Nonnull
  public String getUnitType() {
    return unitType;
  }


  public void setUnitType(String unitType) {
    this.unitType = unitType;
  }


  public DiscountUnitMultipleOneUnit product(SimpleProductDiscountUnit product) {
    
    this.product = product;
    return this;
  }

   /**
   * Get product
   * @return product
  **/
  @javax.annotation.Nullable
  public SimpleProductDiscountUnit getProduct() {
    return product;
  }


  public void setProduct(SimpleProductDiscountUnit product) {
    this.product = product;
  }


  public DiscountUnitMultipleOneUnit sku(SimpleSkuDiscountUnit sku) {
    
    this.sku = sku;
    return this;
  }

   /**
   * Get sku
   * @return sku
  **/
  @javax.annotation.Nullable
  public SimpleSkuDiscountUnit getSku() {
    return sku;
  }


  public void setSku(SimpleSkuDiscountUnit sku) {
    this.sku = sku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscountUnitMultipleOneUnit discountUnitMultipleOneUnit = (DiscountUnitMultipleOneUnit) o;
    return Objects.equals(this.unitOff, discountUnitMultipleOneUnit.unitOff) &&
        Objects.equals(this.unitOffFormula, discountUnitMultipleOneUnit.unitOffFormula) &&
        Objects.equals(this.effect, discountUnitMultipleOneUnit.effect) &&
        Objects.equals(this.unitType, discountUnitMultipleOneUnit.unitType) &&
        Objects.equals(this.product, discountUnitMultipleOneUnit.product) &&
        Objects.equals(this.sku, discountUnitMultipleOneUnit.sku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitOff, unitOffFormula, effect, unitType, product, sku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscountUnitMultipleOneUnit {\n");
    sb.append("    unitOff: ").append(toIndentedString(unitOff)).append("\n");
    sb.append("    unitOffFormula: ").append(toIndentedString(unitOffFormula)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unit_off");
    openapiFields.add("unit_off_formula");
    openapiFields.add("effect");
    openapiFields.add("unit_type");
    openapiFields.add("product");
    openapiFields.add("sku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effect");
    openapiRequiredFields.add("unit_type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DiscountUnitMultipleOneUnit
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscountUnitMultipleOneUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscountUnitMultipleOneUnit is not found in the empty JSON string", DiscountUnitMultipleOneUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscountUnitMultipleOneUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscountUnitMultipleOneUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscountUnitMultipleOneUnit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unit_off_formula") != null && !jsonObj.get("unit_off_formula").isJsonNull()) && !jsonObj.get("unit_off_formula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit_off_formula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit_off_formula").toString()));
      }
      if (!jsonObj.get("effect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effect").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("effect");

        if (objectElement != null && !objectElement.isJsonNull()) {
          EffectEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `effect` to be not null");
        }
      } catch (IllegalArgumentException e) {
        throw new IllegalArgumentException(String.format("Expected the field `effect` to be a valid element of EffectEnum enum got `%s` instead", jsonObj.get("effect").toString()));
      }
      if (!jsonObj.get("unit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit_type").toString()));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        SimpleProductDiscountUnit.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `sku`
      if (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) {
        SimpleSkuDiscountUnit.validateJsonElement(jsonObj.get("sku"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscountUnitMultipleOneUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscountUnitMultipleOneUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscountUnitMultipleOneUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscountUnitMultipleOneUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscountUnitMultipleOneUnit>() {
           @Override
           public void write(JsonWriter out, DiscountUnitMultipleOneUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscountUnitMultipleOneUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DiscountUnitMultipleOneUnit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DiscountUnitMultipleOneUnit
  * @throws IOException if the JSON string is invalid with respect to DiscountUnitMultipleOneUnit
  */
  public static DiscountUnitMultipleOneUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscountUnitMultipleOneUnit.class);
  }

 /**
  * Convert an instance of DiscountUnitMultipleOneUnit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

