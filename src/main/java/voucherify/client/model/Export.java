/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import voucherify.client.model.ExportBaseResult;
import voucherify.client.model.ExportCustomer;
import voucherify.client.model.ExportOrder;
import voucherify.client.model.ExportPointsExpiration;
import voucherify.client.model.ExportPublication;
import voucherify.client.model.ExportRedemption;
import voucherify.client.model.ExportVoucher;
import voucherify.client.model.ExportVoucherTransactions;
import voucherify.client.model.LoyaltiesMembersTransactionsExportCreateRequestBodyParameters;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import voucherify.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Export extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Export.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Export.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Export' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExportVoucher> adapterExportVoucher = gson.getDelegateAdapter(this, TypeToken.get(ExportVoucher.class));
            final TypeAdapter<ExportRedemption> adapterExportRedemption = gson.getDelegateAdapter(this, TypeToken.get(ExportRedemption.class));
            final TypeAdapter<ExportCustomer> adapterExportCustomer = gson.getDelegateAdapter(this, TypeToken.get(ExportCustomer.class));
            final TypeAdapter<ExportPublication> adapterExportPublication = gson.getDelegateAdapter(this, TypeToken.get(ExportPublication.class));
            final TypeAdapter<ExportOrder> adapterExportOrder = gson.getDelegateAdapter(this, TypeToken.get(ExportOrder.class));
            final TypeAdapter<ExportPointsExpiration> adapterExportPointsExpiration = gson.getDelegateAdapter(this, TypeToken.get(ExportPointsExpiration.class));
            final TypeAdapter<ExportVoucherTransactions> adapterExportVoucherTransactions = gson.getDelegateAdapter(this, TypeToken.get(ExportVoucherTransactions.class));

            return (TypeAdapter<T>) new TypeAdapter<Export>() {
                @Override
                public void write(JsonWriter out, Export value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExportVoucher`
                    if (value.getActualInstance() instanceof ExportVoucher) {
                      JsonElement element = adapterExportVoucher.toJsonTree((ExportVoucher)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportRedemption`
                    if (value.getActualInstance() instanceof ExportRedemption) {
                      JsonElement element = adapterExportRedemption.toJsonTree((ExportRedemption)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportCustomer`
                    if (value.getActualInstance() instanceof ExportCustomer) {
                      JsonElement element = adapterExportCustomer.toJsonTree((ExportCustomer)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportPublication`
                    if (value.getActualInstance() instanceof ExportPublication) {
                      JsonElement element = adapterExportPublication.toJsonTree((ExportPublication)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportOrder`
                    if (value.getActualInstance() instanceof ExportOrder) {
                      JsonElement element = adapterExportOrder.toJsonTree((ExportOrder)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportPointsExpiration`
                    if (value.getActualInstance() instanceof ExportPointsExpiration) {
                      JsonElement element = adapterExportPointsExpiration.toJsonTree((ExportPointsExpiration)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ExportVoucherTransactions`
                    if (value.getActualInstance() instanceof ExportVoucherTransactions) {
                      JsonElement element = adapterExportVoucherTransactions.toJsonTree((ExportVoucherTransactions)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ExportCustomer, ExportOrder, ExportPointsExpiration, ExportPublication, ExportRedemption, ExportVoucher, ExportVoucherTransactions");
                }

                @Override
                public Export read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExportVoucher
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportVoucher.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportVoucher;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportVoucher'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportVoucher failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportVoucher'", e);
                    }
                    // deserialize ExportRedemption
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportRedemption.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportRedemption;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportRedemption'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportRedemption failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportRedemption'", e);
                    }
                    // deserialize ExportCustomer
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportCustomer.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportCustomer;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportCustomer'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportCustomer failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportCustomer'", e);
                    }
                    // deserialize ExportPublication
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportPublication.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportPublication;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportPublication'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportPublication failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportPublication'", e);
                    }
                    // deserialize ExportOrder
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportOrder.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportOrder;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportOrder'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportOrder failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportOrder'", e);
                    }
                    // deserialize ExportPointsExpiration
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportPointsExpiration.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportPointsExpiration;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportPointsExpiration'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportPointsExpiration failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportPointsExpiration'", e);
                    }
                    // deserialize ExportVoucherTransactions
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ExportVoucherTransactions.validateJsonElement(jsonElement);
                      actualAdapter = adapterExportVoucherTransactions;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ExportVoucherTransactions'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ExportVoucherTransactions failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ExportVoucherTransactions'", e);
                    }

                    if (match == 1) {
                        Export ret = new Export();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Export: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Export() {
        super("oneOf", Boolean.FALSE);
    }

    public Export(ExportCustomer o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Export(ExportOrder o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Export(ExportPointsExpiration o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Export(ExportPublication o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Export(ExportRedemption o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Export(ExportVoucher o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Export(ExportVoucherTransactions o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExportVoucher", ExportVoucher.class);
        schemas.put("ExportRedemption", ExportRedemption.class);
        schemas.put("ExportCustomer", ExportCustomer.class);
        schemas.put("ExportPublication", ExportPublication.class);
        schemas.put("ExportOrder", ExportOrder.class);
        schemas.put("ExportPointsExpiration", ExportPointsExpiration.class);
        schemas.put("ExportVoucherTransactions", ExportVoucherTransactions.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Export.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ExportCustomer, ExportOrder, ExportPointsExpiration, ExportPublication, ExportRedemption, ExportVoucher, ExportVoucherTransactions
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExportVoucher) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportRedemption) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportCustomer) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportPublication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportOrder) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportPointsExpiration) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExportVoucherTransactions) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ExportCustomer, ExportOrder, ExportPointsExpiration, ExportPublication, ExportRedemption, ExportVoucher, ExportVoucherTransactions");
    }

    /**
     * Get the actual instance, which can be the following:
     * ExportCustomer, ExportOrder, ExportPointsExpiration, ExportPublication, ExportRedemption, ExportVoucher, ExportVoucherTransactions
     *
     * @return The actual instance (ExportCustomer, ExportOrder, ExportPointsExpiration, ExportPublication, ExportRedemption, ExportVoucher, ExportVoucherTransactions)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExportVoucher`. If the actual instance is not `ExportVoucher`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportVoucher`
     * @throws ClassCastException if the instance is not `ExportVoucher`
     */
    public ExportVoucher getExportVoucher() throws ClassCastException {
        return (ExportVoucher)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportRedemption`. If the actual instance is not `ExportRedemption`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportRedemption`
     * @throws ClassCastException if the instance is not `ExportRedemption`
     */
    public ExportRedemption getExportRedemption() throws ClassCastException {
        return (ExportRedemption)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportCustomer`. If the actual instance is not `ExportCustomer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportCustomer`
     * @throws ClassCastException if the instance is not `ExportCustomer`
     */
    public ExportCustomer getExportCustomer() throws ClassCastException {
        return (ExportCustomer)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportPublication`. If the actual instance is not `ExportPublication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportPublication`
     * @throws ClassCastException if the instance is not `ExportPublication`
     */
    public ExportPublication getExportPublication() throws ClassCastException {
        return (ExportPublication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportOrder`. If the actual instance is not `ExportOrder`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportOrder`
     * @throws ClassCastException if the instance is not `ExportOrder`
     */
    public ExportOrder getExportOrder() throws ClassCastException {
        return (ExportOrder)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportPointsExpiration`. If the actual instance is not `ExportPointsExpiration`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportPointsExpiration`
     * @throws ClassCastException if the instance is not `ExportPointsExpiration`
     */
    public ExportPointsExpiration getExportPointsExpiration() throws ClassCastException {
        return (ExportPointsExpiration)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExportVoucherTransactions`. If the actual instance is not `ExportVoucherTransactions`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExportVoucherTransactions`
     * @throws ClassCastException if the instance is not `ExportVoucherTransactions`
     */
    public ExportVoucherTransactions getExportVoucherTransactions() throws ClassCastException {
        return (ExportVoucherTransactions)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Export
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ExportVoucher
    try {
      ExportVoucher.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportVoucher failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportRedemption
    try {
      ExportRedemption.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportRedemption failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportCustomer
    try {
      ExportCustomer.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportCustomer failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportPublication
    try {
      ExportPublication.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportPublication failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportOrder
    try {
      ExportOrder.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportOrder failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportPointsExpiration
    try {
      ExportPointsExpiration.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportPointsExpiration failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ExportVoucherTransactions
    try {
      ExportVoucherTransactions.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExportVoucherTransactions failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for Export with oneOf schemas: ExportCustomer, ExportOrder, ExportPointsExpiration, ExportPublication, ExportRedemption, ExportVoucher, ExportVoucherTransactions. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of Export given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Export
  * @throws IOException if the JSON string is invalid with respect to Export
  */
  public static Export fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Export.class);
  }

 /**
  * Convert an instance of Export to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

