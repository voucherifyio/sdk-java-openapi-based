/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * Determines the notification settings for redemptions. The notification can be used as a warning that a limit will be reached soon.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class APIUsageNotificationsRedemptions {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public static final String SERIALIZED_NAME_IN_APP = "in_app";
  @SerializedName(SERIALIZED_NAME_IN_APP)
  private Boolean inApp;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = new ArrayList<>();

  public APIUsageNotificationsRedemptions() {
  }

  public APIUsageNotificationsRedemptions enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Enables the notification.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public APIUsageNotificationsRedemptions value(Integer value) {
    
    this.value = value;
    return this;
  }

   /**
   * The percent value of the limit which, when reached, triggers the notification.
   * minimum: 10
   * maximum: 90
   * @return value
  **/
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }


  public void setValue(Integer value) {
    this.value = value;
  }


  public APIUsageNotificationsRedemptions inApp(Boolean inApp) {
    
    this.inApp = inApp;
    return this;
  }

   /**
   * Enables the notification in the application.
   * @return inApp
  **/
  @javax.annotation.Nonnull
  public Boolean getInApp() {
    return inApp;
  }


  public void setInApp(Boolean inApp) {
    this.inApp = inApp;
  }


  public APIUsageNotificationsRedemptions emails(List<String> emails) {
    
    this.emails = emails;
    return this;
  }

  public APIUsageNotificationsRedemptions addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * An array of email addresses which will receive the notification.
   * @return emails
  **/
  @javax.annotation.Nonnull
  public List<String> getEmails() {
    return emails;
  }


  public void setEmails(List<String> emails) {
    this.emails = emails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIUsageNotificationsRedemptions apIUsageNotificationsRedemptions = (APIUsageNotificationsRedemptions) o;
    return Objects.equals(this.enabled, apIUsageNotificationsRedemptions.enabled) &&
        Objects.equals(this.value, apIUsageNotificationsRedemptions.value) &&
        Objects.equals(this.inApp, apIUsageNotificationsRedemptions.inApp) &&
        Objects.equals(this.emails, apIUsageNotificationsRedemptions.emails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, value, inApp, emails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIUsageNotificationsRedemptions {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    inApp: ").append(toIndentedString(inApp)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("value");
    openapiFields.add("in_app");
    openapiFields.add("emails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("in_app");
    openapiRequiredFields.add("emails");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to APIUsageNotificationsRedemptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIUsageNotificationsRedemptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIUsageNotificationsRedemptions is not found in the empty JSON string", APIUsageNotificationsRedemptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIUsageNotificationsRedemptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIUsageNotificationsRedemptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIUsageNotificationsRedemptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("emails") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIUsageNotificationsRedemptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIUsageNotificationsRedemptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIUsageNotificationsRedemptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIUsageNotificationsRedemptions.class));

       return (TypeAdapter<T>) new TypeAdapter<APIUsageNotificationsRedemptions>() {
           @Override
           public void write(JsonWriter out, APIUsageNotificationsRedemptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIUsageNotificationsRedemptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIUsageNotificationsRedemptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIUsageNotificationsRedemptions
  * @throws IOException if the JSON string is invalid with respect to APIUsageNotificationsRedemptions
  */
  public static APIUsageNotificationsRedemptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIUsageNotificationsRedemptions.class);
  }

 /**
  * Convert an instance of APIUsageNotificationsRedemptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

