/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import voucherify.client.model.FieldConditions;
import voucherify.client.model.Junction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * ExportOrderFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-17T09:00:53.208514+01:00[Europe/Warsaw]")
public class ExportOrderFilters {
  public static final String SERIALIZED_NAME_JUNCTION = "junction";
  @SerializedName(SERIALIZED_NAME_JUNCTION)
  private Junction junction;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private FieldConditions id;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private FieldConditions sourceId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private FieldConditions createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private FieldConditions updatedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private FieldConditions status;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private FieldConditions amount;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discount_amount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private FieldConditions discountAmount;

  public static final String SERIALIZED_NAME_ITEMS_DISCOUNT_AMOUNT = "items_discount_amount";
  @SerializedName(SERIALIZED_NAME_ITEMS_DISCOUNT_AMOUNT)
  private FieldConditions itemsDiscountAmount;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT = "total_discount_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT)
  private FieldConditions totalDiscountAmount;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private FieldConditions totalAmount;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private FieldConditions customerId;

  public static final String SERIALIZED_NAME_REFERRER_ID = "referrer_id";
  @SerializedName(SERIALIZED_NAME_REFERRER_ID)
  private FieldConditions referrerId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private FieldConditions metadata;

  public ExportOrderFilters() {
  }

  public ExportOrderFilters junction(Junction junction) {
    
    this.junction = junction;
    return this;
  }

   /**
   * Get junction
   * @return junction
  **/
  @javax.annotation.Nullable
  public Junction getJunction() {
    return junction;
  }


  public void setJunction(Junction junction) {
    this.junction = junction;
  }


  public ExportOrderFilters id(FieldConditions id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public FieldConditions getId() {
    return id;
  }


  public void setId(FieldConditions id) {
    this.id = id;
  }


  public ExportOrderFilters sourceId(FieldConditions sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @javax.annotation.Nullable
  public FieldConditions getSourceId() {
    return sourceId;
  }


  public void setSourceId(FieldConditions sourceId) {
    this.sourceId = sourceId;
  }


  public ExportOrderFilters createdAt(FieldConditions createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public FieldConditions getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(FieldConditions createdAt) {
    this.createdAt = createdAt;
  }


  public ExportOrderFilters updatedAt(FieldConditions updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public FieldConditions getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(FieldConditions updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ExportOrderFilters status(FieldConditions status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public FieldConditions getStatus() {
    return status;
  }


  public void setStatus(FieldConditions status) {
    this.status = status;
  }


  public ExportOrderFilters amount(FieldConditions amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  public FieldConditions getAmount() {
    return amount;
  }


  public void setAmount(FieldConditions amount) {
    this.amount = amount;
  }


  public ExportOrderFilters discountAmount(FieldConditions discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

   /**
   * Get discountAmount
   * @return discountAmount
  **/
  @javax.annotation.Nullable
  public FieldConditions getDiscountAmount() {
    return discountAmount;
  }


  public void setDiscountAmount(FieldConditions discountAmount) {
    this.discountAmount = discountAmount;
  }


  public ExportOrderFilters itemsDiscountAmount(FieldConditions itemsDiscountAmount) {
    
    this.itemsDiscountAmount = itemsDiscountAmount;
    return this;
  }

   /**
   * Get itemsDiscountAmount
   * @return itemsDiscountAmount
  **/
  @javax.annotation.Nullable
  public FieldConditions getItemsDiscountAmount() {
    return itemsDiscountAmount;
  }


  public void setItemsDiscountAmount(FieldConditions itemsDiscountAmount) {
    this.itemsDiscountAmount = itemsDiscountAmount;
  }


  public ExportOrderFilters totalDiscountAmount(FieldConditions totalDiscountAmount) {
    
    this.totalDiscountAmount = totalDiscountAmount;
    return this;
  }

   /**
   * Get totalDiscountAmount
   * @return totalDiscountAmount
  **/
  @javax.annotation.Nullable
  public FieldConditions getTotalDiscountAmount() {
    return totalDiscountAmount;
  }


  public void setTotalDiscountAmount(FieldConditions totalDiscountAmount) {
    this.totalDiscountAmount = totalDiscountAmount;
  }


  public ExportOrderFilters totalAmount(FieldConditions totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Get totalAmount
   * @return totalAmount
  **/
  @javax.annotation.Nullable
  public FieldConditions getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(FieldConditions totalAmount) {
    this.totalAmount = totalAmount;
  }


  public ExportOrderFilters customerId(FieldConditions customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  public FieldConditions getCustomerId() {
    return customerId;
  }


  public void setCustomerId(FieldConditions customerId) {
    this.customerId = customerId;
  }


  public ExportOrderFilters referrerId(FieldConditions referrerId) {
    
    this.referrerId = referrerId;
    return this;
  }

   /**
   * Get referrerId
   * @return referrerId
  **/
  @javax.annotation.Nullable
  public FieldConditions getReferrerId() {
    return referrerId;
  }


  public void setReferrerId(FieldConditions referrerId) {
    this.referrerId = referrerId;
  }


  public ExportOrderFilters metadata(FieldConditions metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public FieldConditions getMetadata() {
    return metadata;
  }


  public void setMetadata(FieldConditions metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportOrderFilters exportOrderFilters = (ExportOrderFilters) o;
    return Objects.equals(this.junction, exportOrderFilters.junction) &&
        Objects.equals(this.id, exportOrderFilters.id) &&
        Objects.equals(this.sourceId, exportOrderFilters.sourceId) &&
        Objects.equals(this.createdAt, exportOrderFilters.createdAt) &&
        Objects.equals(this.updatedAt, exportOrderFilters.updatedAt) &&
        Objects.equals(this.status, exportOrderFilters.status) &&
        Objects.equals(this.amount, exportOrderFilters.amount) &&
        Objects.equals(this.discountAmount, exportOrderFilters.discountAmount) &&
        Objects.equals(this.itemsDiscountAmount, exportOrderFilters.itemsDiscountAmount) &&
        Objects.equals(this.totalDiscountAmount, exportOrderFilters.totalDiscountAmount) &&
        Objects.equals(this.totalAmount, exportOrderFilters.totalAmount) &&
        Objects.equals(this.customerId, exportOrderFilters.customerId) &&
        Objects.equals(this.referrerId, exportOrderFilters.referrerId) &&
        Objects.equals(this.metadata, exportOrderFilters.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(junction, id, sourceId, createdAt, updatedAt, status, amount, discountAmount, itemsDiscountAmount, totalDiscountAmount, totalAmount, customerId, referrerId, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportOrderFilters {\n");
    sb.append("    junction: ").append(toIndentedString(junction)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    itemsDiscountAmount: ").append(toIndentedString(itemsDiscountAmount)).append("\n");
    sb.append("    totalDiscountAmount: ").append(toIndentedString(totalDiscountAmount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    referrerId: ").append(toIndentedString(referrerId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("junction");
    openapiFields.add("id");
    openapiFields.add("source_id");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("status");
    openapiFields.add("amount");
    openapiFields.add("discount_amount");
    openapiFields.add("items_discount_amount");
    openapiFields.add("total_discount_amount");
    openapiFields.add("total_amount");
    openapiFields.add("customer_id");
    openapiFields.add("referrer_id");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExportOrderFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportOrderFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportOrderFilters is not found in the empty JSON string", ExportOrderFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportOrderFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportOrderFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `source_id`
      if (jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("source_id"));
      }
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("created_at"));
      }
      // validate the optional field `updated_at`
      if (jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("updated_at"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("amount"));
      }
      // validate the optional field `discount_amount`
      if (jsonObj.get("discount_amount") != null && !jsonObj.get("discount_amount").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("discount_amount"));
      }
      // validate the optional field `items_discount_amount`
      if (jsonObj.get("items_discount_amount") != null && !jsonObj.get("items_discount_amount").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("items_discount_amount"));
      }
      // validate the optional field `total_discount_amount`
      if (jsonObj.get("total_discount_amount") != null && !jsonObj.get("total_discount_amount").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("total_discount_amount"));
      }
      // validate the optional field `total_amount`
      if (jsonObj.get("total_amount") != null && !jsonObj.get("total_amount").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("total_amount"));
      }
      // validate the optional field `customer_id`
      if (jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("customer_id"));
      }
      // validate the optional field `referrer_id`
      if (jsonObj.get("referrer_id") != null && !jsonObj.get("referrer_id").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("referrer_id"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        FieldConditions.validateJsonElement(jsonObj.get("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportOrderFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportOrderFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportOrderFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportOrderFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportOrderFilters>() {
           @Override
           public void write(JsonWriter out, ExportOrderFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportOrderFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportOrderFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportOrderFilters
  * @throws IOException if the JSON string is invalid with respect to ExportOrderFilters
  */
  public static ExportOrderFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportOrderFilters.class);
  }

 /**
  * Convert an instance of ExportOrderFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

