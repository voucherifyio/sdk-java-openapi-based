/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import voucherify.client.model.DiscountFixedVouchersEffectTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import voucherify.client.JSON;

/**
 * DiscountFixed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class DiscountFixed {
  /**
   * Defines the type of the voucher.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FIXED("FIXED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.FIXED;

  public static final String SERIALIZED_NAME_FIXED_AMOUNT = "fixed_amount";
  @SerializedName(SERIALIZED_NAME_FIXED_AMOUNT)
  private BigDecimal fixedAmount;

  public static final String SERIALIZED_NAME_FIXED_AMOUNT_FORMULA = "fixed_amount_formula";
  @SerializedName(SERIALIZED_NAME_FIXED_AMOUNT_FORMULA)
  private String fixedAmountFormula;

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private DiscountFixedVouchersEffectTypes effect;

  public static final String SERIALIZED_NAME_IS_DYNAMIC = "is_dynamic";
  @SerializedName(SERIALIZED_NAME_IS_DYNAMIC)
  private Boolean isDynamic;

  public DiscountFixed() {
  }

  public DiscountFixed type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines the type of the voucher.
   * @return type
  **/
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DiscountFixed fixedAmount(BigDecimal fixedAmount) {
    
    this.fixedAmount = fixedAmount;
    return this;
  }

   /**
   * Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the &#x60;fixed_amount_formula&#x60; parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.
   * @return fixedAmount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getFixedAmount() {
    return fixedAmount;
  }


  public void setFixedAmount(BigDecimal fixedAmount) {
    this.fixedAmount = fixedAmount;
  }


  public DiscountFixed fixedAmountFormula(String fixedAmountFormula) {
    
    this.fixedAmountFormula = fixedAmountFormula;
    return this;
  }

   /**
   * Get fixedAmountFormula
   * @return fixedAmountFormula
  **/
  @javax.annotation.Nullable
  public String getFixedAmountFormula() {
    return fixedAmountFormula;
  }


  public void setFixedAmountFormula(String fixedAmountFormula) {
    this.fixedAmountFormula = fixedAmountFormula;
  }


  public DiscountFixed effect(DiscountFixedVouchersEffectTypes effect) {
    
    this.effect = effect;
    return this;
  }

   /**
   * Get effect
   * @return effect
  **/
  @javax.annotation.Nullable
  public DiscountFixedVouchersEffectTypes getEffect() {
    return effect;
  }


  public void setEffect(DiscountFixedVouchersEffectTypes effect) {
    this.effect = effect;
  }


  public DiscountFixed isDynamic(Boolean isDynamic) {
    
    this.isDynamic = isDynamic;
    return this;
  }

   /**
   * Flag indicating whether the discount was calculated using a formula.
   * @return isDynamic
  **/
  @javax.annotation.Nullable
  public Boolean getIsDynamic() {
    return isDynamic;
  }


  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscountFixed discountFixed = (DiscountFixed) o;
    return Objects.equals(this.type, discountFixed.type) &&
        Objects.equals(this.fixedAmount, discountFixed.fixedAmount) &&
        Objects.equals(this.fixedAmountFormula, discountFixed.fixedAmountFormula) &&
        Objects.equals(this.effect, discountFixed.effect) &&
        Objects.equals(this.isDynamic, discountFixed.isDynamic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, fixedAmount, fixedAmountFormula, effect, isDynamic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscountFixed {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fixedAmount: ").append(toIndentedString(fixedAmount)).append("\n");
    sb.append("    fixedAmountFormula: ").append(toIndentedString(fixedAmountFormula)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("fixed_amount");
    openapiFields.add("fixed_amount_formula");
    openapiFields.add("effect");
    openapiFields.add("is_dynamic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("fixed_amount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DiscountFixed
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscountFixed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscountFixed is not found in the empty JSON string", DiscountFixed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscountFixed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscountFixed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscountFixed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      try {
        JsonElement objectElement = jsonObj.get("type");

        if (objectElement != null && !objectElement.isJsonNull()) {
          TypeEnum.fromValue(objectElement.getAsString());
        } else {
          throw new IllegalArgumentException("Expected the field `type` to be not null");
        }
      } catch (IllegalArgumentException e) {
        if(jsonObj.get("type") != null) {
          throw new IllegalArgumentException(String.format("Expected the field `type` to be a valid element of TypeEnum enum got `%s` instead", jsonObj.get("type").toString()));
        }
      }
      if ((jsonObj.get("fixed_amount_formula") != null && !jsonObj.get("fixed_amount_formula").isJsonNull()) && !jsonObj.get("fixed_amount_formula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed_amount_formula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed_amount_formula").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscountFixed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscountFixed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscountFixed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscountFixed.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscountFixed>() {
           @Override
           public void write(JsonWriter out, DiscountFixed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscountFixed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DiscountFixed given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DiscountFixed
  * @throws IOException if the JSON string is invalid with respect to DiscountFixed
  */
  public static DiscountFixed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscountFixed.class);
  }

 /**
  * Convert an instance of DiscountFixed to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

