/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import voucherify.client.model.RedeemGiftCard;
import voucherify.client.model.RedeemGiftCardAllOfGift;
import voucherify.client.model.RedeemLoyaltyCard;
import voucherify.client.model.RedeemLoyaltyCardAllOfReward;
import voucherify.client.model.RedeemPromotionStack;
import voucherify.client.model.RedeemPromotionTier;
import voucherify.client.model.RedeemVoucher;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import voucherify.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-17T09:00:53.208514+01:00[Europe/Warsaw]")
public class StackableValidateRedeemBaseRedeemablesItem extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(StackableValidateRedeemBaseRedeemablesItem.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StackableValidateRedeemBaseRedeemablesItem.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StackableValidateRedeemBaseRedeemablesItem' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RedeemVoucher> adapterRedeemVoucher = gson.getDelegateAdapter(this, TypeToken.get(RedeemVoucher.class));
            final TypeAdapter<RedeemPromotionTier> adapterRedeemPromotionTier = gson.getDelegateAdapter(this, TypeToken.get(RedeemPromotionTier.class));
            final TypeAdapter<RedeemPromotionStack> adapterRedeemPromotionStack = gson.getDelegateAdapter(this, TypeToken.get(RedeemPromotionStack.class));
            final TypeAdapter<RedeemGiftCard> adapterRedeemGiftCard = gson.getDelegateAdapter(this, TypeToken.get(RedeemGiftCard.class));
            final TypeAdapter<RedeemLoyaltyCard> adapterRedeemLoyaltyCard = gson.getDelegateAdapter(this, TypeToken.get(RedeemLoyaltyCard.class));

            return (TypeAdapter<T>) new TypeAdapter<StackableValidateRedeemBaseRedeemablesItem>() {
                @Override
                public void write(JsonWriter out, StackableValidateRedeemBaseRedeemablesItem value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `RedeemVoucher`
                    if (value.getActualInstance() instanceof RedeemVoucher) {
                      JsonElement element = adapterRedeemVoucher.toJsonTree((RedeemVoucher)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `RedeemPromotionTier`
                    if (value.getActualInstance() instanceof RedeemPromotionTier) {
                      JsonElement element = adapterRedeemPromotionTier.toJsonTree((RedeemPromotionTier)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `RedeemPromotionStack`
                    if (value.getActualInstance() instanceof RedeemPromotionStack) {
                      JsonElement element = adapterRedeemPromotionStack.toJsonTree((RedeemPromotionStack)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `RedeemGiftCard`
                    if (value.getActualInstance() instanceof RedeemGiftCard) {
                      JsonElement element = adapterRedeemGiftCard.toJsonTree((RedeemGiftCard)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `RedeemLoyaltyCard`
                    if (value.getActualInstance() instanceof RedeemLoyaltyCard) {
                      JsonElement element = adapterRedeemLoyaltyCard.toJsonTree((RedeemLoyaltyCard)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: RedeemGiftCard, RedeemLoyaltyCard, RedeemPromotionStack, RedeemPromotionTier, RedeemVoucher");
                }

                @Override
                public StackableValidateRedeemBaseRedeemablesItem read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize RedeemVoucher
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RedeemVoucher.validateJsonElement(jsonElement);
                      actualAdapter = adapterRedeemVoucher;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RedeemVoucher'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RedeemVoucher failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RedeemVoucher'", e);
                    }
                    // deserialize RedeemPromotionTier
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RedeemPromotionTier.validateJsonElement(jsonElement);
                      actualAdapter = adapterRedeemPromotionTier;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RedeemPromotionTier'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RedeemPromotionTier failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RedeemPromotionTier'", e);
                    }
                    // deserialize RedeemPromotionStack
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RedeemPromotionStack.validateJsonElement(jsonElement);
                      actualAdapter = adapterRedeemPromotionStack;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RedeemPromotionStack'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RedeemPromotionStack failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RedeemPromotionStack'", e);
                    }
                    // deserialize RedeemGiftCard
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RedeemGiftCard.validateJsonElement(jsonElement);
                      actualAdapter = adapterRedeemGiftCard;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RedeemGiftCard'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RedeemGiftCard failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RedeemGiftCard'", e);
                    }
                    // deserialize RedeemLoyaltyCard
                    try {
                      // validate the JSON object to see if any exception is thrown
                      RedeemLoyaltyCard.validateJsonElement(jsonElement);
                      actualAdapter = adapterRedeemLoyaltyCard;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'RedeemLoyaltyCard'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for RedeemLoyaltyCard failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'RedeemLoyaltyCard'", e);
                    }

                    if (match == 1) {
                        StackableValidateRedeemBaseRedeemablesItem ret = new StackableValidateRedeemBaseRedeemablesItem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for StackableValidateRedeemBaseRedeemablesItem: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public StackableValidateRedeemBaseRedeemablesItem() {
        super("oneOf", Boolean.FALSE);
    }

    public StackableValidateRedeemBaseRedeemablesItem(RedeemGiftCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StackableValidateRedeemBaseRedeemablesItem(RedeemLoyaltyCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StackableValidateRedeemBaseRedeemablesItem(RedeemPromotionStack o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StackableValidateRedeemBaseRedeemablesItem(RedeemPromotionTier o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StackableValidateRedeemBaseRedeemablesItem(RedeemVoucher o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("RedeemVoucher", RedeemVoucher.class);
        schemas.put("RedeemPromotionTier", RedeemPromotionTier.class);
        schemas.put("RedeemPromotionStack", RedeemPromotionStack.class);
        schemas.put("RedeemGiftCard", RedeemGiftCard.class);
        schemas.put("RedeemLoyaltyCard", RedeemLoyaltyCard.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return StackableValidateRedeemBaseRedeemablesItem.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * RedeemGiftCard, RedeemLoyaltyCard, RedeemPromotionStack, RedeemPromotionTier, RedeemVoucher
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof RedeemVoucher) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RedeemPromotionTier) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RedeemPromotionStack) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RedeemGiftCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RedeemLoyaltyCard) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be RedeemGiftCard, RedeemLoyaltyCard, RedeemPromotionStack, RedeemPromotionTier, RedeemVoucher");
    }

    /**
     * Get the actual instance, which can be the following:
     * RedeemGiftCard, RedeemLoyaltyCard, RedeemPromotionStack, RedeemPromotionTier, RedeemVoucher
     *
     * @return The actual instance (RedeemGiftCard, RedeemLoyaltyCard, RedeemPromotionStack, RedeemPromotionTier, RedeemVoucher)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `RedeemVoucher`. If the actual instance is not `RedeemVoucher`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedeemVoucher`
     * @throws ClassCastException if the instance is not `RedeemVoucher`
     */
    public RedeemVoucher getRedeemVoucher() throws ClassCastException {
        return (RedeemVoucher)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RedeemPromotionTier`. If the actual instance is not `RedeemPromotionTier`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedeemPromotionTier`
     * @throws ClassCastException if the instance is not `RedeemPromotionTier`
     */
    public RedeemPromotionTier getRedeemPromotionTier() throws ClassCastException {
        return (RedeemPromotionTier)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RedeemPromotionStack`. If the actual instance is not `RedeemPromotionStack`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedeemPromotionStack`
     * @throws ClassCastException if the instance is not `RedeemPromotionStack`
     */
    public RedeemPromotionStack getRedeemPromotionStack() throws ClassCastException {
        return (RedeemPromotionStack)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RedeemGiftCard`. If the actual instance is not `RedeemGiftCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedeemGiftCard`
     * @throws ClassCastException if the instance is not `RedeemGiftCard`
     */
    public RedeemGiftCard getRedeemGiftCard() throws ClassCastException {
        return (RedeemGiftCard)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RedeemLoyaltyCard`. If the actual instance is not `RedeemLoyaltyCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedeemLoyaltyCard`
     * @throws ClassCastException if the instance is not `RedeemLoyaltyCard`
     */
    public RedeemLoyaltyCard getRedeemLoyaltyCard() throws ClassCastException {
        return (RedeemLoyaltyCard)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StackableValidateRedeemBaseRedeemablesItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with RedeemVoucher
    try {
      RedeemVoucher.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RedeemVoucher failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RedeemPromotionTier
    try {
      RedeemPromotionTier.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RedeemPromotionTier failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RedeemPromotionStack
    try {
      RedeemPromotionStack.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RedeemPromotionStack failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RedeemGiftCard
    try {
      RedeemGiftCard.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RedeemGiftCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RedeemLoyaltyCard
    try {
      RedeemLoyaltyCard.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RedeemLoyaltyCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for StackableValidateRedeemBaseRedeemablesItem with oneOf schemas: RedeemGiftCard, RedeemLoyaltyCard, RedeemPromotionStack, RedeemPromotionTier, RedeemVoucher. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of StackableValidateRedeemBaseRedeemablesItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StackableValidateRedeemBaseRedeemablesItem
  * @throws IOException if the JSON string is invalid with respect to StackableValidateRedeemBaseRedeemablesItem
  */
  public static StackableValidateRedeemBaseRedeemablesItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackableValidateRedeemBaseRedeemablesItem.class);
  }

 /**
  * Convert an instance of StackableValidateRedeemBaseRedeemablesItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

